{"config":{"lang":["en","ru"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Android in Avito # Multiple projects live in two repositories: Open Source repository ( avito-tech/avito-android ) - monorepo of all tooling to continuously test and deliver apps to users. Internal repository (closed source) - monorepo of all apps and shared libraries Info You could see links to \"internal\" resources that are not available for non-employees (links.k.avito.ru). It has been done on purpose to have single documentation and show the whole picture. Info There is another part of documentation that is not published yet. You can find the old version in history . Contacts # Telegram chat in Russian Telegram chat in English","title":"Android in Avito"},{"location":"#android-in-avito","text":"Multiple projects live in two repositories: Open Source repository ( avito-tech/avito-android ) - monorepo of all tooling to continuously test and deliver apps to users. Internal repository (closed source) - monorepo of all apps and shared libraries Info You could see links to \"internal\" resources that are not available for non-employees (links.k.avito.ru). It has been done on purpose to have single documentation and show the whole picture. Info There is another part of documentation that is not published yet. You can find the old version in history .","title":"Android in Avito"},{"location":"#contacts","text":"Telegram chat in Russian Telegram chat in English","title":"Contacts"},{"location":"blog/2019/12/open-source-introduction/","text":"Open source: CI/CD and test infrastructure for Android # Avito.ru is the second biggest classified in the world. We have moved our Android infrastructure into open source: Gradle plugins, emulators, and test libraries. Our code will be useful in automating CI/CD and will also facilitate the coding and support of autotests. In this review, we will explain why we decided to move into open source, present the central libraries of the project, and suggest whom to contact with any questions. We will analyze in detail the individual libraries, Gradle plugins, and our development approaches in future posts. Who we are and what we do # We are developing solutions for Android as part of the Speed platform team. There are four of us: Sergey Boishtyan Senior engineer sboishtyan Dima Voronin Lead engineer DmitriVoronin Eugene Krivobokov Senior engineer eugene_kr Daniil Popov Senior engineer Int02h We are in charge of delivering changes in all Avito\u2019s Android apps to users as fast as possible. Our area of responsibility covers: Local project activities: making sure that everything is quickly built and the IDE runs fast. CI pipeline: tests and all possible checks. CD: tools for release engineers. Why open source # We wanted not only to mirror the code in the open source repository on GitHub but also to learn something new and make a contribution to the software engineering community. There were five key reasons to move the project into open source: Get feedback. Influence industry standards. Learn something new. Influence third-party libraries. Promote our personal brands. Let's discuss these one by one. Get feedback and make the code easier to reuse # We do the tooling for Avito\u2019s engineers, and our users need all solutions to simply work. We lack the outsider perspective of developers who work on similar problems. We need them to point out issues in the internal implementation and the convenience of connecting to our project. We have already seen how moving the code to GitHub highlighted the problems of reuse. When you understand that other companies can use your project, you start looking at the architecture differently. Reusing code is not the ultimate target. But this external criterion says a lot about the quality of the architecture and its flexibility. Influence the industry standards # We have been developing infrastructure for mobile apps since 2017 and regularly make talks at local developer conferences and meetups. We always wanted to share the code in addition to our words and allow others to reuse it. Indeed, many Android developers face similar challenges: How to write effective autotests. How to run these in pull requests. How to maintain infrastructure cost-effectively. There are no generally accepted, universal solutions for these tasks \u2014 each company solves them in its way. We share our best practices so that developers of new projects do not have to collect bit by bit information on testing mobile apps and building CI/CD. We want to offer ready-made solutions for routine problems instead of having to invent the wheel. And even if nobody uses the project code in its original form, developers will be able to see our approaches and improve their libraries. Learn by teaching # Just moving the code into open source is not enough. Practices, approaches, methods of troubleshooting, and making decisions \u2014 this is what is essential. Sharing these, we verify whether our ideas and ready-made solutions work outside of Avito. Influencing third-party libraries and fixing their problems faster # Imagine you are facing a problem in Android or a library and cannot find a workaround. You need help from the community or the code\u2019s authors. You asked a question on Stack Overflow, filed a bug report in Google IssueTracker, described everything in detail, but the problem won\u2019t reproduce. You are asked to share a test case. All this takes extra time. Open source helps you create a reproducible example faster. We have a test app, which uses part of the infrastructure. Its main function is dogfooding, i.e. making sure as early as possible using a simple and isolated case that everything works. But this same app makes it easier to demonstrate bugs. When we show a reproducible example in a third-party library, it becomes easier for its developer to understand what is going on. This increases the chances that the developers will fix the issue. The popularity of an open source project also increases the likelihood that you will be paid attention to. When an issue in a library has many stars and users, this increases the pressure, and the issue becomes more difficult to ignore. Achieving this without open source is more challenging \u2014 the app has to be super popular, or one should make oneself known. PR and personal motivation # Last but not least, is personal benefit. Everybody benefits when their daily work gains publicity. Avito grabs public attention by offering a useful product, and we promote our personal brands as engineers and develop additional motivation for working. We no longer need to use our free time to work on our own projects or commits in third-party open source libraries. What\u2019s in the open source # We have made available in the GitHub repository almost all of our Android and CI/CD testing infrastructure. To make it easier for other developers to navigate the project, we grouped all its modules by function: Gradle plugins. Libraries for Android testing modules. Emulators. Let\u2019s discuss some of the most important libraries. Test runner # This is a Gradle plugin to run instrumentation tests. The closest analog is Marathon , but our plugin runs only under Android. Test runner: Specifies which tests to run. Filtering by annotations, by packages, by the results of the last run is supported. Specifies which emulators to run tests on. Backs these up to Kubernetes or connects to local emulators. Sets test restart conditions. Sends a final report with the test run results. The results are stored in custom TMS (test management system), which is not open source. We are working on the possibility of connecting to a different implementation. Impact analysis # We have about 1,600 instrumentation tests and 10K unit tests. We would like to run all the tests for any code change, but this is not possible \u2014 such a test run would take too much time. A simple solution is to manually subdivide the tests into subsets, for example, smoke tests, fast, slow tests, and run only one set at a time. But with this approach, there is always a risk of missing an error, because it is not clear which set of tests is optimal. An ideal solution would be to understand which minimum test set can verify all changes. This is known as test impact analysis . We wrote a Gradle plugin , which searches for changes in modules, parses tests, and determines which ones to run. For more details of the main modules and approaches, see the project documentation(deleted). It is still incomplete, and not everything is translated. We want to make the documentation easier to understand, and need your help. Tell us what to improve and correct in the documentation in our Telegram chat . How our libraries can be useful # Since there are many components in our project, its applications depend on your needs. If you are working on a similar problem or just want to understand the technology better \u2014 feel free to contact us in GitHub or our Telegram chat . We will share what we know, try to help, and show relevant examples. You can ask anything: - How do we handle unstable tests? - Why so much code? It makes no sense. - Why is all the code in Gradle plugins and not in python scripts? If you want to use a specific module, you can try it in the test app . Currently, it shows an example of using our test runner. Unfortunately, we still have few examples of reuse in other projects, so integration may reveal yet unknown limitations. Let us know if this happens, and we we will see what to fix. Conclusion # In our upcoming posts, we plan to talk about: Our test runner. Test anatomy \u2014 what happens from the moment of clicking \u201cRun\u201d in the IDE up to the test completion moment. How we deal with the instability of tests and infrastructure. Our approaches to writing infrastructure. How we reduced the release time from month to week. We want to discuss some more general topics, too: How to start writing tests. Fundamentals of testing for beginners \u2014 common approaches and technologies. Comment to let us know what you would like to read about. So we will know which topic to cover first.","title":"Open Source introduction"},{"location":"blog/2019/12/open-source-introduction/#open-source-cicd-and-test-infrastructure-for-android","text":"Avito.ru is the second biggest classified in the world. We have moved our Android infrastructure into open source: Gradle plugins, emulators, and test libraries. Our code will be useful in automating CI/CD and will also facilitate the coding and support of autotests. In this review, we will explain why we decided to move into open source, present the central libraries of the project, and suggest whom to contact with any questions. We will analyze in detail the individual libraries, Gradle plugins, and our development approaches in future posts.","title":"Open source: CI/CD and test infrastructure for Android"},{"location":"blog/2019/12/open-source-introduction/#who-we-are-and-what-we-do","text":"We are developing solutions for Android as part of the Speed platform team. There are four of us: Sergey Boishtyan Senior engineer sboishtyan Dima Voronin Lead engineer DmitriVoronin Eugene Krivobokov Senior engineer eugene_kr Daniil Popov Senior engineer Int02h We are in charge of delivering changes in all Avito\u2019s Android apps to users as fast as possible. Our area of responsibility covers: Local project activities: making sure that everything is quickly built and the IDE runs fast. CI pipeline: tests and all possible checks. CD: tools for release engineers.","title":"Who we are and what we do"},{"location":"blog/2019/12/open-source-introduction/#why-open-source","text":"We wanted not only to mirror the code in the open source repository on GitHub but also to learn something new and make a contribution to the software engineering community. There were five key reasons to move the project into open source: Get feedback. Influence industry standards. Learn something new. Influence third-party libraries. Promote our personal brands. Let's discuss these one by one.","title":"Why open source"},{"location":"blog/2019/12/open-source-introduction/#get-feedback-and-make-the-code-easier-to-reuse","text":"We do the tooling for Avito\u2019s engineers, and our users need all solutions to simply work. We lack the outsider perspective of developers who work on similar problems. We need them to point out issues in the internal implementation and the convenience of connecting to our project. We have already seen how moving the code to GitHub highlighted the problems of reuse. When you understand that other companies can use your project, you start looking at the architecture differently. Reusing code is not the ultimate target. But this external criterion says a lot about the quality of the architecture and its flexibility.","title":"Get feedback and make the code easier to reuse"},{"location":"blog/2019/12/open-source-introduction/#influence-the-industry-standards","text":"We have been developing infrastructure for mobile apps since 2017 and regularly make talks at local developer conferences and meetups. We always wanted to share the code in addition to our words and allow others to reuse it. Indeed, many Android developers face similar challenges: How to write effective autotests. How to run these in pull requests. How to maintain infrastructure cost-effectively. There are no generally accepted, universal solutions for these tasks \u2014 each company solves them in its way. We share our best practices so that developers of new projects do not have to collect bit by bit information on testing mobile apps and building CI/CD. We want to offer ready-made solutions for routine problems instead of having to invent the wheel. And even if nobody uses the project code in its original form, developers will be able to see our approaches and improve their libraries.","title":"Influence the industry standards"},{"location":"blog/2019/12/open-source-introduction/#learn-by-teaching","text":"Just moving the code into open source is not enough. Practices, approaches, methods of troubleshooting, and making decisions \u2014 this is what is essential. Sharing these, we verify whether our ideas and ready-made solutions work outside of Avito.","title":"Learn by teaching"},{"location":"blog/2019/12/open-source-introduction/#influencing-third-party-libraries-and-fixing-their-problems-faster","text":"Imagine you are facing a problem in Android or a library and cannot find a workaround. You need help from the community or the code\u2019s authors. You asked a question on Stack Overflow, filed a bug report in Google IssueTracker, described everything in detail, but the problem won\u2019t reproduce. You are asked to share a test case. All this takes extra time. Open source helps you create a reproducible example faster. We have a test app, which uses part of the infrastructure. Its main function is dogfooding, i.e. making sure as early as possible using a simple and isolated case that everything works. But this same app makes it easier to demonstrate bugs. When we show a reproducible example in a third-party library, it becomes easier for its developer to understand what is going on. This increases the chances that the developers will fix the issue. The popularity of an open source project also increases the likelihood that you will be paid attention to. When an issue in a library has many stars and users, this increases the pressure, and the issue becomes more difficult to ignore. Achieving this without open source is more challenging \u2014 the app has to be super popular, or one should make oneself known.","title":"Influencing third-party libraries and fixing their problems faster"},{"location":"blog/2019/12/open-source-introduction/#pr-and-personal-motivation","text":"Last but not least, is personal benefit. Everybody benefits when their daily work gains publicity. Avito grabs public attention by offering a useful product, and we promote our personal brands as engineers and develop additional motivation for working. We no longer need to use our free time to work on our own projects or commits in third-party open source libraries.","title":"PR and personal motivation"},{"location":"blog/2019/12/open-source-introduction/#whats-in-the-open-source","text":"We have made available in the GitHub repository almost all of our Android and CI/CD testing infrastructure. To make it easier for other developers to navigate the project, we grouped all its modules by function: Gradle plugins. Libraries for Android testing modules. Emulators. Let\u2019s discuss some of the most important libraries.","title":"What\u2019s in the open source"},{"location":"blog/2019/12/open-source-introduction/#test-runner","text":"This is a Gradle plugin to run instrumentation tests. The closest analog is Marathon , but our plugin runs only under Android. Test runner: Specifies which tests to run. Filtering by annotations, by packages, by the results of the last run is supported. Specifies which emulators to run tests on. Backs these up to Kubernetes or connects to local emulators. Sets test restart conditions. Sends a final report with the test run results. The results are stored in custom TMS (test management system), which is not open source. We are working on the possibility of connecting to a different implementation.","title":"Test runner"},{"location":"blog/2019/12/open-source-introduction/#impact-analysis","text":"We have about 1,600 instrumentation tests and 10K unit tests. We would like to run all the tests for any code change, but this is not possible \u2014 such a test run would take too much time. A simple solution is to manually subdivide the tests into subsets, for example, smoke tests, fast, slow tests, and run only one set at a time. But with this approach, there is always a risk of missing an error, because it is not clear which set of tests is optimal. An ideal solution would be to understand which minimum test set can verify all changes. This is known as test impact analysis . We wrote a Gradle plugin , which searches for changes in modules, parses tests, and determines which ones to run. For more details of the main modules and approaches, see the project documentation(deleted). It is still incomplete, and not everything is translated. We want to make the documentation easier to understand, and need your help. Tell us what to improve and correct in the documentation in our Telegram chat .","title":"Impact analysis"},{"location":"blog/2019/12/open-source-introduction/#how-our-libraries-can-be-useful","text":"Since there are many components in our project, its applications depend on your needs. If you are working on a similar problem or just want to understand the technology better \u2014 feel free to contact us in GitHub or our Telegram chat . We will share what we know, try to help, and show relevant examples. You can ask anything: - How do we handle unstable tests? - Why so much code? It makes no sense. - Why is all the code in Gradle plugins and not in python scripts? If you want to use a specific module, you can try it in the test app . Currently, it shows an example of using our test runner. Unfortunately, we still have few examples of reuse in other projects, so integration may reveal yet unknown limitations. Let us know if this happens, and we we will see what to fix.","title":"How our libraries can be useful"},{"location":"blog/2019/12/open-source-introduction/#conclusion","text":"In our upcoming posts, we plan to talk about: Our test runner. Test anatomy \u2014 what happens from the moment of clicking \u201cRun\u201d in the IDE up to the test completion moment. How we deal with the instability of tests and infrastructure. Our approaches to writing infrastructure. How we reduced the release time from month to week. We want to discuss some more general topics, too: How to start writing tests. Fundamentals of testing for beginners \u2014 common approaches and technologies. Comment to let us know what you would like to read about. So we will know which topic to cover first.","title":"Conclusion"},{"location":"blog/2019/12/open-source-introduction.ru/","text":"Open source \u0434\u043b\u044f CI/CD \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0410\u0432\u0438\u0442\u043e \u0434\u043b\u044f Android # \u041c\u044b \u0432\u044b\u043d\u0435\u0441\u043b\u0438 \u0432 open source \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0410\u0432\u0438\u0442\u043e \u0434\u043b\u044f Android: Gradle \u043f\u043b\u0430\u0433\u0438\u043d\u044b, \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u044b \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432. \u041d\u0430\u0448 \u043a\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u0435\u043d \u043f\u0440\u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 CI/CD, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u043b\u0435\u0433\u0447\u0438\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0430\u0432\u0442\u043e\u0442\u0435\u0441\u0442\u043e\u0432. \u0412 \u044d\u0442\u043e\u0439 \u043e\u0431\u0437\u043e\u0440\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0435 \u043c\u044b \u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0435\u043c, \u043f\u043e\u0447\u0435\u043c\u0443 \u0440\u0435\u0448\u0438\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0432\u043e\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0439, \u043e \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 \u0441\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u0443\u0435\u043c, \u043a\u0443\u0434\u0430 \u0438\u0434\u0442\u0438 \u0441 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0438\u043c\u0438 \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\u0438. \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0431\u0435\u0440\u0451\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, Gradle-\u043f\u043b\u0430\u0433\u0438\u043d\u044b \u0438 \u043d\u0430\u0448\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043a \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430\u0445. \u041a\u0442\u043e \u043c\u044b \u0442\u0430\u043a\u0438\u0435 \u0438 \u0447\u0435\u043c \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u043c\u0441\u044f # \u041c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043d\u0430 Android-\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0432 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 Speed. \u041d\u0430\u0441 \u0447\u0435\u0442\u044b\u0440\u0435 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430: \u0421\u0435\u0440\u0451\u0436\u0430 \u0411\u043e\u0438\u0448\u0442\u044f\u043d Senior engineer \u0422\u0432\u0438\u0442\u0442\u0435\u0440-\u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0414\u0438\u043c\u0430 \u0412\u043e\u0440\u043e\u043d\u0438\u043d Lead engineer \u0422\u0432\u0438\u0442\u0442\u0435\u0440-\u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0416\u0435\u043d\u044f \u041a\u0440\u0438\u0432\u043e\u0431\u043e\u043a\u043e\u0432 Senior engineer \u0422\u0432\u0438\u0442\u0442\u0435\u0440-\u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0414\u0430\u043d\u0438\u0438\u043b \u041f\u043e\u043f\u043e\u0432 Senior engineer \u0422\u0432\u0438\u0442\u0442\u0435\u0440-\u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u041c\u044b \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u043c \u0437\u0430 \u0442\u043e, \u0447\u0442\u043e\u0431\u044b \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432\u043e \u0432\u0441\u0435\u0445 Android-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 \u0410\u0432\u0438\u0442\u043e \u0434\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0412 \u043d\u0430\u0448\u0443 \u0437\u043e\u043d\u0443 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0432\u0445\u043e\u0434\u044f\u0442: \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c: \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u0451 \u0431\u044b\u0441\u0442\u0440\u043e \u0441\u043e\u0431\u0438\u0440\u0430\u043b\u043e\u0441\u044c \u0438 IDE \u043d\u0435 \u0442\u043e\u0440\u043c\u043e\u0437\u0438\u043b\u0430. CI pipeline: \u0442\u0435\u0441\u0442\u044b, \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438. CD: \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0435\u043b\u0438\u0437-\u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043e\u0432. \u0417\u0430\u0447\u0435\u043c \u043d\u0430\u043c \u043d\u0443\u0436\u0435\u043d open source # \u041c\u044b \u0445\u043e\u0442\u0435\u043b\u0438 \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u0437\u0435\u0440\u043a\u0430\u043b\u0438\u0442\u044c \u043a\u043e\u0434 \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 \u043d\u0430 \u0413\u0438\u0442\u0445\u0430\u0431\u0435, \u0430 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0439 \u0434\u043b\u044f \u0441\u0435\u0431\u044f \u0438 \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043f\u0440\u0438\u0447\u0438\u043d \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442 \u0432 open source \u2014 \u043f\u044f\u0442\u044c: \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e \u0441\u0432\u044f\u0437\u044c. \u0412\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u044b \u0432 \u0438\u043d\u0434\u0443\u0441\u0442\u0440\u0438\u0438. \u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u043e\u0432\u043e\u043c\u0443. \u0412\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u041f\u0440\u043e\u043a\u0430\u0447\u0430\u0442\u044c \u043b\u0438\u0447\u043d\u044b\u0439 \u0431\u0440\u0435\u043d\u0434. \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043a\u043e\u0440\u043e\u0442\u043a\u043e \u043f\u043e \u043d\u0438\u043c \u043f\u0440\u043e\u0439\u0434\u0451\u043c\u0441\u044f. \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e \u0441\u0432\u044f\u0437\u044c \u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043a\u043e\u0434 \u043f\u0440\u043e\u0449\u0435 \u0434\u043b\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f # \u041c\u044b \u0434\u0435\u043b\u0430\u0435\u043c \u0442\u0443\u043b\u0438\u043d\u0433 \u0434\u043b\u044f \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043e\u0432 \u0410\u0432\u0438\u0442\u043e, \u0438 \u043d\u0430\u0448\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043d\u0443\u0436\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438. \u041d\u0430\u043c \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u0432\u0437\u0433\u043b\u044f\u0434\u0430 \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043e\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0435\u0448\u0430\u044e\u0442 \u043f\u043e\u0445\u043e\u0436\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u0411\u0443\u0434\u0435\u0442 \u043a\u0440\u0443\u0442\u043e, \u0435\u0441\u043b\u0438 \u043d\u0430\u043c \u0443\u043a\u0430\u0436\u0443\u0442 \u043d\u0430 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0432\u043e \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0443. \u041c\u044b \u0443\u0436\u0435 \u0443\u0432\u0438\u0434\u0435\u043b\u0438, \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u043d\u043e\u0441 \u043a\u043e\u0434\u0430 \u0432 \u0413\u0438\u0442\u0445\u0430\u0431 \u043f\u043e\u0434\u0441\u0432\u0435\u0442\u0438\u043b \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f. \u041a\u043e\u0433\u0434\u0430 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0448\u044c, \u0447\u0442\u043e \u044d\u0442\u0438\u043c \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u0440\u0443\u0433\u0438\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0442\u043e \u043f\u043e-\u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u0441\u043c\u043e\u0442\u0440\u0438\u0448\u044c \u043d\u0430 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443. \u041f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u2014 \u043d\u0435 \u0441\u0430\u043c\u043e\u0446\u0435\u043b\u044c. \u041d\u043e \u044d\u0442\u043e\u0442 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 \u043c\u043d\u043e\u0433\u043e\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u0438 \u0435\u0451 \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u0438. \u0412\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u044b \u0432 \u0438\u043d\u0434\u0443\u0441\u0442\u0440\u0438\u0438 # \u041c\u044b \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0435\u043c \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u043b\u044f \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 c 2017 \u0433\u043e\u0434\u0430 \u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043e\u0431 \u044d\u0442\u043e\u043c \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u0445 \u0438 \u043c\u0438\u0442\u0430\u043f\u0430\u0445: \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0412\u043e\u0440\u043e\u043d\u0438\u043d \u00abAndroid \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0410\u0432\u0438\u0442\u043e \u0432 Open Source\u00bb - Android Broadcast. \u0421\u0435\u0440\u0433\u0435\u0439 \u0411\u043e\u0438\u0448\u0442\u044f\u043d \u00abCI/CD \u0437\u0434\u043e\u0440\u043e\u0432\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430\u00bb - AppsConf 2019. \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0428\u043f\u0438\u0440\u043a\u043e \u00ab\u0410\u0432\u0442\u043e\u0442\u0435\u0441\u0442\u044b \u0432 \u0410\u0432\u0438\u0442\u043e. \u0417\u0430\u0447\u0435\u043c \u043e\u043d\u0438, \u043a\u0430\u043a \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u043e\u044f\u0442\u00bb \u2014 Apps Conf Moscow 2019. \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041a\u0440\u0438\u0432\u043e\u0431\u043e\u043a\u043e\u0432 \u00ab\u0423\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435 \u0441\u0431\u043e\u0440\u043a\u0438 \u043c\u043d\u043e\u0433\u043e\u043c\u043e\u0434\u0443\u043b\u044c\u043d\u043e\u0433\u043e Android-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u00bb \u2014 Apps Conf Moscow 2019. \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0428\u043f\u0438\u0440\u043a\u043e \u00ab\u0420\u0435\u043b\u0438\u0437\u044b \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0432 \u0410\u0432\u0438\u0442\u043e\u00bb \u2014 Mobius 2018 Piter. \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u041c\u0435\u0440\u043a\u0443\u0440\u044c\u0435\u0432 \"Impact Analysis\" \u2014 AppsConf: QualityApps 2018. \u041d\u0438\u043a\u043e\u043b\u0430\u0439 \u041d\u0435\u0441\u0442\u0435\u0440\u043e\u0432 \u00ab\u042d\u0432\u043e\u043b\u044e\u0446\u0438\u044f CI \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438\u00bb \u2014 Saint AppsConf 2018. \u041f\u043e\u043c\u0438\u043c\u043e \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u043e\u0432, \u043c\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0445\u043e\u0442\u0435\u043b\u0438 \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f \u043a\u043e\u0434\u043e\u043c \u0438 \u0434\u0430\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0435\u0433\u043e \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c. \u0412\u0435\u0434\u044c \u043c\u043d\u043e\u0433\u0438\u0435 Android-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441\u0442\u0430\u043b\u043a\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u0445\u043e\u0436\u0438\u043c\u0438 \u0432\u044b\u0437\u043e\u0432\u0430\u043c\u0438: \u041a\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u0430\u0432\u0442\u043e\u0442\u0435\u0441\u0442\u044b, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0438 \u043f\u0440\u0438\u043d\u043e\u0441\u0438\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u0443. \u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0438\u0445 \u0432 pull request\u2019\u0430\u0445. \u041a\u0430\u043a \u0434\u0435\u0448\u0435\u0432\u043b\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443. \u0414\u043b\u044f \u044d\u0442\u0438\u0445 \u0437\u0430\u0434\u0430\u0447 \u043d\u0435\u0442 \u043e\u0431\u0449\u0435\u043f\u0440\u0438\u043d\u044f\u0442\u044b\u0445 \u0438 \u0443\u0441\u0442\u043e\u044f\u0432\u0448\u0438\u0445\u0441\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u2014 \u043a\u0430\u0436\u0434\u0430\u044f \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u043e-\u0441\u0432\u043e\u0435\u043c\u0443. \u041c\u044b \u0434\u0435\u043b\u0438\u043c\u0441\u044f \u0441\u0432\u043e\u0438\u043c\u0438 \u043d\u0430\u0440\u0430\u0431\u043e\u0442\u043a\u0430\u043c\u0438, \u0447\u0442\u043e\u0431\u044b \u0432 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u043d\u0435 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u043b\u043e\u0441\u044c \u0441\u043e\u0431\u0438\u0440\u0430\u0442\u044c \u043f\u043e \u043a\u0440\u0443\u043f\u0438\u0446\u0430\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 CI/CD. \u0425\u043e\u0447\u0435\u0442\u0441\u044f, \u0447\u0442\u043e\u0431\u044b \u0432\u043c\u0435\u0441\u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u0430 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0432\u0437\u044f\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0443\u0442\u0438\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c. \u0418, \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u043a\u043e\u0434\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u0432\u0438\u0434\u0435 \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441\u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0434\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430\u0448\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f, \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u044f \u0434\u0440\u0443\u0433\u0438\u043c # \u041f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u043a\u043e\u0434 \u0432 open source \u2014 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e. \u0412\u0430\u0436\u043d\u044b \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438, \u043f\u043e\u0434\u0445\u043e\u0434\u044b, \u043f\u0443\u0442\u0438 \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0438 \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u0439. \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044f \u0438\u0445, \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0448\u0438 \u0438\u0434\u0435\u0438 \u0438 \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432\u043d\u0435 \u0410\u0432\u0438\u0442\u043e. \u0412\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b # \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435, \u0447\u0442\u043e \u0432\u044b \u0441\u0442\u043e\u043b\u043a\u043d\u0443\u043b\u0438\u0441\u044c \u0441 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u043e\u0439 \u0432 Android \u0438\u043b\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u043e\u0431\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u0443\u0442\u044c. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u0430 \u043f\u043e\u043c\u043e\u0449\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430 \u0438\u043b\u0438 \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u043a\u043e\u0434\u0430. \u0412\u044b \u0437\u0430\u0434\u0430\u043b\u0438 \u0432\u043e\u043f\u0440\u043e\u0441 \u043d\u0430 Stack Overflow, \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u0431\u0430\u0433 \u0432 Google IssueTracker, \u0432\u0441\u0451 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043b\u0438, \u043d\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u043d\u0435 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f. \u0423 \u0432\u0430\u0441 \u043f\u0440\u043e\u0441\u044f\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440. \u041d\u0430 \u0432\u0441\u0451 \u044d\u0442\u043e \u0443\u0445\u043e\u0434\u0438\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f. Open source \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440. \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 , \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044c \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b. \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0435\u0433\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u2014 dogfooding, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u043d\u044c\u0448\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u043c \u0438 \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u0447\u0442\u043e \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442. \u041d\u043e \u044d\u0442\u043e \u0436\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0449\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0431\u0430\u0433\u0438. \u041a\u043e\u0433\u0434\u0430 \u043c\u044b \u0434\u0430\u0451\u043c \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432 \u0447\u0443\u0436\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435, \u0435\u0451 \u0430\u0432\u0442\u043e\u0440\u0443 \u043f\u0440\u043e\u0449\u0435 \u043f\u043e\u043d\u044f\u0442\u044c, \u0432 \u0447\u0451\u043c \u0434\u0435\u043b\u043e. \u042d\u0442\u043e \u043f\u043e\u0432\u044b\u0448\u0430\u0435\u0442 \u0448\u0430\u043d\u0441\u044b, \u0447\u0442\u043e \u043e\u043d \u0432\u043e\u0437\u044c\u043c\u0451\u0442\u0441\u044f \u0437\u0430 \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u041f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u044c open source \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0442\u043e\u0436\u0435 \u043f\u043e\u0432\u044b\u0448\u0430\u0435\u0442 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c, \u0447\u0442\u043e \u043d\u0430 \u0432\u0430\u0441 \u043e\u0431\u0440\u0430\u0442\u044f\u0442 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435. \u0423\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0430 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0441 \u043a\u0443\u0447\u0435\u0439 \u0437\u0432\u0451\u0437\u0434\u043e\u0447\u0435\u043a \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e\u0432\u044b\u0448\u0430\u0435\u0442 \u0434\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u0435\u0451 \u0441\u043b\u043e\u0436\u043d\u0435\u0435 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u0430\u043a\u043e\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0431\u0435\u0437 open source \u0441\u043b\u043e\u0436\u043d\u0435\u0435 \u2014 \u0442\u0432\u043e\u0451 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0441\u0443\u043f\u0435\u0440\u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0438\u043b\u0438 \u0442\u0435\u0431\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u043d\u0430\u0442\u044c \u043b\u0438\u0447\u043d\u043e. \u041f\u0438\u0430\u0440 \u0438 \u043b\u0438\u0447\u043d\u0430\u044f \u043c\u043e\u0442\u0438\u0432\u0430\u0446\u0438\u044f # \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f, \u043d\u043e \u043d\u0435 \u043f\u043e \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438, \u043f\u0440\u0438\u0447\u0438\u043d\u0430 \u2014 \u044d\u0442\u043e \u043b\u0438\u0447\u043d\u0430\u044f \u0432\u044b\u0433\u043e\u0434\u0430. \u041e\u0442 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0441\u0442\u0438 \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u044b\u0438\u0433\u0440\u044b\u0432\u0430\u044e\u0442 \u0432\u0441\u0435. \u041a\u043e\u043c\u043f\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0437\u0430 \u0441\u0447\u0451\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430, \u0430 \u043c\u044b \u043f\u0440\u043e\u043a\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u043b\u0438\u0447\u043d\u044b\u0439 \u0431\u0440\u0435\u043d\u0434 \u043a\u0430\u043a \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u044b \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043c\u043e\u0442\u0438\u0432\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b. \u0411\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0438\u0441\u043a\u0438\u0432\u0430\u0442\u044c \u043f\u043e \u0432\u0435\u0447\u0435\u0440\u0430\u043c \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u0438\u043b\u0438 \u043a\u043e\u043c\u043c\u0438\u0442\u044b \u0432 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0435 open source \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0427\u0442\u043e \u0432\u044b\u043d\u0435\u0441\u043b\u0438 \u0432 open source # \u041c\u044b \u0432\u044b\u043d\u0435\u0441\u043b\u0438 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043d\u0430 \u0413\u0438\u0442\u0445\u0430\u0431\u0435 \u043f\u043e\u0447\u0442\u0438 \u0432\u0441\u044e \u043d\u0430\u0448\u0443 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Android \u0438 CI/CD. \u0427\u0442\u043e\u0431\u044b \u0434\u0440\u0443\u0433\u0438\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u043f\u0440\u043e\u0449\u0435 \u0431\u044b\u043b\u043e \u0441\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435, \u0432\u0441\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043f\u043e \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e: Gradle \u043f\u043b\u0430\u0433\u0438\u043d\u044b. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f Android \u0442\u0435\u0441\u0442\u043e\u0432. \u042d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u044b \u041e\u0442\u043c\u0435\u0447\u0443 \u043f\u0430\u0440\u043e\u0447\u043a\u0443 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. Test runner # \u042d\u0442\u043e gradle \u043f\u043b\u0430\u0433\u0438\u043d \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 instrumentation \u0442\u0435\u0441\u0442\u043e\u0432. \u0411\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0439 \u0430\u043d\u0430\u043b\u043e\u0433 \u2014 Marathon , \u043d\u043e \u043d\u0430\u0448 \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434 Android. Test Runner: \u041e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0442\u0435\u0441\u0442\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c. \u0415\u0441\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f\u043c, \u043f\u043e \u043f\u0430\u043a\u0435\u0442\u0430\u043c, \u043f\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c \u043f\u0440\u043e\u0448\u043b\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430. \u041e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442, \u043d\u0430 \u043a\u0430\u043a\u0438\u0445 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430\u0445 \u043f\u0440\u043e\u0433\u043e\u043d\u044f\u0442\u044c \u0442\u0435\u0441\u0442\u044b. \u0420\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u0443\u0435\u0442 \u0438\u0445 \u0432 Kubernetes \u0438\u043b\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430\u043c. \u0417\u0430\u0434\u0430\u0451\u0442 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432. \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u043e\u0442\u0447\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u043f\u0440\u043e\u0433\u043e\u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0439 TMS (test management system), \u0435\u0451 \u043d\u0435\u0442 \u0432 open source. \u041c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043d\u0430\u0434 \u0442\u0435\u043c, \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0434\u0440\u0443\u0433\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e. Impact analysis # \u0423 \u043d\u0430\u0441 \u043e\u043a\u043e\u043b\u043e 1600 instrumentation \u0442\u0435\u0441\u0442\u043e\u0432 \u0438 10K unit-\u0442\u0435\u0441\u0442\u043e\u0432. \u041c\u044b \u0445\u043e\u0442\u0435\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0432\u0441\u0435 \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u043b\u044e\u0431\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430, \u043d\u043e \u044d\u0442\u043e \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u2014 \u043f\u0440\u043e\u0433\u043e\u043d \u0437\u0430\u0439\u043c\u0451\u0442 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u2014 \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, smoke-\u0442\u0435\u0441\u0442\u044b, \u0431\u044b\u0441\u0442\u0440\u044b\u0435, \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0435, \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u044c. \u041d\u043e \u043f\u0440\u0438 \u0442\u0430\u043a\u043e\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0435\u0441\u0442\u044c \u0448\u0430\u043d\u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0443, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u043e, \u043a\u0430\u043a\u043e\u0439 \u043d\u0430\u0431\u043e\u0440 \u0442\u0435\u0441\u0442\u043e\u0432 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u0435\u0435. \u0418\u0434\u0435\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u2014 \u043f\u043e\u043d\u044f\u0442\u044c, \u043a\u0430\u043a\u043e\u0439 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0442\u0435\u0441\u0442\u043e\u0432 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442 \u0432\u0441\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. \u042d\u0442\u043e \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f test impact analysis . \u041c\u044b \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0438 Gradle plugin , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0449\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043c\u043e\u0434\u0443\u043b\u044f\u0445, \u043f\u0430\u0440\u0441\u0438\u0442 \u0442\u0435\u0441\u0442\u044b \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0438\u0437 \u043d\u0438\u0445 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c. \u0411\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430(\u0443\u0434\u0430\u043b\u0435\u043d\u043e). \u0421\u0435\u0439\u0447\u0430\u0441 \u043e\u043d\u0430 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u0430, \u0434\u0430 \u0435\u0449\u0451 \u0438 \u043d\u0435 \u0432\u0441\u044f \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430. \u041c\u044b \u0445\u043e\u0442\u0438\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u043e\u043d\u044f\u0442\u043d\u0435\u0435, \u0438 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u0430 \u0432\u0430\u0448\u0430 \u043f\u043e\u043c\u043e\u0449\u044c. \u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438\u0442\u0435, \u0447\u0442\u043e \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0438 \u043f\u043e\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 \u0432 \u043d\u0430\u0448\u0435\u043c \u0442\u0435\u043b\u0435\u0433\u0440\u0430\u043c-\u0447\u0430\u0442\u0435 . \u0427\u0435\u043c \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u044b \u043d\u0430\u0448\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 # \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043c\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0445, \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0432\u0430\u0448\u0438\u0445 \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0435\u0439. \u0415\u0441\u043b\u0438 \u0432\u044b \u0440\u0435\u0448\u0430\u0435\u0442\u0435 \u043f\u043e\u0445\u043e\u0436\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u2014 \u0441\u043c\u0435\u043b\u043e \u043f\u0438\u0448\u0438\u0442\u0435 \u043d\u0430\u043c \u0432 \u0442\u0435\u043b\u0435\u0433\u0440\u0430\u043c-\u0447\u0430\u0442 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u0438\u043b\u0438 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c . \u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0435\u043c, \u0447\u0442\u043e \u0437\u043d\u0430\u0435\u043c, \u043f\u043e\u0441\u0442\u0430\u0440\u0430\u0435\u043c\u0441\u044f \u043f\u043e\u043c\u043e\u0447\u044c \u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b. \u041c\u043e\u0436\u043d\u043e \u0441\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0442\u044c \u0447\u0442\u043e \u0443\u0433\u043e\u0434\u043d\u043e: \u0410 \u043a\u0430\u043a \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0435 \u0441 \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u043c\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438? \u0417\u0430\u0447\u0435\u043c \u0442\u0430\u043a \u043c\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430? \u041e\u043d \u0436\u0435 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439. \u041f\u043e\u0447\u0435\u043c\u0443 \u0432\u0435\u0441\u044c \u043a\u043e\u0434 \u0432 Gradle \u043f\u043b\u0430\u0433\u0438\u043d\u0430\u0445, \u0430 \u043d\u0435 \u0432 Python \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445? \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0432&nbsp \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 . \u0421\u0435\u0439\u0447\u0430\u0441 \u0432 \u043d\u0451\u043c \u043f\u043e\u043a\u0430\u0437\u0430\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f test runner. \u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u0443 \u043d\u0430\u0441 \u043f\u043e\u043a\u0430 \u043c\u0430\u043b\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u043e\u044f\u0432\u0438\u0442\u044c\u0441\u044f \u0435\u0449\u0451 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043d\u0430\u043c, \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0434\u0435\u0442, \u0438 \u043c\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c. \u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 # \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0430\u0442\u044c\u044f\u0445 \u043c\u044b \u043f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0440\u043e: \u041d\u0430\u0448 test runner. \u0410\u043d\u0430\u0442\u043e\u043c\u0438\u044e \u0442\u0435\u0441\u0442\u0430 \u2014 \u0447\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043e\u0442 \u043d\u0430\u0436\u0430\u0442\u0438\u044f \u043a\u043d\u043e\u043f\u043a\u0438 \u201cRun\u201d \u0432 IDE \u0434\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430. \u041a\u0430\u043a \u043c\u044b \u0431\u043e\u0440\u0435\u043c\u0441\u044f c \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0442\u0435\u0441\u0442\u043e\u0432 \u0438 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b. \u041d\u0430\u0448\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043a \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b. \u041a\u0430\u043a \u043c\u044b \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u043b\u0438 \u0432\u0440\u0435\u043c\u044f \u0440\u0435\u043b\u0438\u0437\u043e\u0432 \u0441 \u043c\u0435\u0441\u044f\u0446\u0430 \u0434\u043e \u043d\u0435\u0434\u0435\u043b\u0438. \u0415\u0441\u0442\u044c \u0438\u0434\u0435\u0438 \u0438 \u043f\u043e \u0431\u043e\u043b\u0435\u0435 \u043e\u0431\u0449\u0438\u043c \u0442\u0435\u043c\u0430\u043c: \u041a\u0430\u043a \u043d\u0430\u0447\u0430\u0442\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b. \u041e\u0441\u043d\u043e\u0432\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u043d\u043e\u0432\u0438\u0447\u043a\u043e\u0432 \u2014 \u043f\u0440\u043e \u043e\u0431\u0449\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438. \u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438\u0442\u0435 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445, \u043e \u0447\u0451\u043c \u0432\u0430\u043c \u0431\u0443\u0434\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u0435\u0435 \u0443\u0437\u043d\u0430\u0442\u044c. \u0422\u0430\u043a \u043c\u044b \u043f\u043e\u0439\u043c\u0451\u043c, \u043a\u0430\u043a\u043e\u0439 \u0442\u0435\u043a\u0441\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c.","title":"Open source \u0434\u043b\u044f CI/CD \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0410\u0432\u0438\u0442\u043e \u0434\u043b\u044f Android"},{"location":"blog/2019/12/open-source-introduction.ru/#open-source-\u0434\u043b\u044f-cicd-\u0438-\u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439-\u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b-\u0430\u0432\u0438\u0442\u043e-\u0434\u043b\u044f-android","text":"\u041c\u044b \u0432\u044b\u043d\u0435\u0441\u043b\u0438 \u0432 open source \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0410\u0432\u0438\u0442\u043e \u0434\u043b\u044f Android: Gradle \u043f\u043b\u0430\u0433\u0438\u043d\u044b, \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u044b \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432. \u041d\u0430\u0448 \u043a\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u0435\u043d \u043f\u0440\u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 CI/CD, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u043b\u0435\u0433\u0447\u0438\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0430\u0432\u0442\u043e\u0442\u0435\u0441\u0442\u043e\u0432. \u0412 \u044d\u0442\u043e\u0439 \u043e\u0431\u0437\u043e\u0440\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0435 \u043c\u044b \u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0435\u043c, \u043f\u043e\u0447\u0435\u043c\u0443 \u0440\u0435\u0448\u0438\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0432\u043e\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0439, \u043e \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 \u0441\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u0443\u0435\u043c, \u043a\u0443\u0434\u0430 \u0438\u0434\u0442\u0438 \u0441 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0438\u043c\u0438 \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\u0438. \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0431\u0435\u0440\u0451\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, Gradle-\u043f\u043b\u0430\u0433\u0438\u043d\u044b \u0438 \u043d\u0430\u0448\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043a \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430\u0445.","title":"Open source \u0434\u043b\u044f CI/CD \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0410\u0432\u0438\u0442\u043e \u0434\u043b\u044f Android"},{"location":"blog/2019/12/open-source-introduction.ru/#\u043a\u0442\u043e-\u043c\u044b-\u0442\u0430\u043a\u0438\u0435-\u0438-\u0447\u0435\u043c-\u0437\u0430\u043d\u0438\u043c\u0430\u0435\u043c\u0441\u044f","text":"\u041c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043d\u0430 Android-\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0432 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 Speed. \u041d\u0430\u0441 \u0447\u0435\u0442\u044b\u0440\u0435 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430: \u0421\u0435\u0440\u0451\u0436\u0430 \u0411\u043e\u0438\u0448\u0442\u044f\u043d Senior engineer \u0422\u0432\u0438\u0442\u0442\u0435\u0440-\u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0414\u0438\u043c\u0430 \u0412\u043e\u0440\u043e\u043d\u0438\u043d Lead engineer \u0422\u0432\u0438\u0442\u0442\u0435\u0440-\u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0416\u0435\u043d\u044f \u041a\u0440\u0438\u0432\u043e\u0431\u043e\u043a\u043e\u0432 Senior engineer \u0422\u0432\u0438\u0442\u0442\u0435\u0440-\u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0414\u0430\u043d\u0438\u0438\u043b \u041f\u043e\u043f\u043e\u0432 Senior engineer \u0422\u0432\u0438\u0442\u0442\u0435\u0440-\u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u041c\u044b \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u043c \u0437\u0430 \u0442\u043e, \u0447\u0442\u043e\u0431\u044b \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432\u043e \u0432\u0441\u0435\u0445 Android-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 \u0410\u0432\u0438\u0442\u043e \u0434\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0412 \u043d\u0430\u0448\u0443 \u0437\u043e\u043d\u0443 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0432\u0445\u043e\u0434\u044f\u0442: \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c: \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u0451 \u0431\u044b\u0441\u0442\u0440\u043e \u0441\u043e\u0431\u0438\u0440\u0430\u043b\u043e\u0441\u044c \u0438 IDE \u043d\u0435 \u0442\u043e\u0440\u043c\u043e\u0437\u0438\u043b\u0430. CI pipeline: \u0442\u0435\u0441\u0442\u044b, \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438. CD: \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0435\u043b\u0438\u0437-\u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043e\u0432.","title":"\u041a\u0442\u043e \u043c\u044b \u0442\u0430\u043a\u0438\u0435 \u0438 \u0447\u0435\u043c \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u043c\u0441\u044f"},{"location":"blog/2019/12/open-source-introduction.ru/#\u0437\u0430\u0447\u0435\u043c-\u043d\u0430\u043c-\u043d\u0443\u0436\u0435\u043d-open-source","text":"\u041c\u044b \u0445\u043e\u0442\u0435\u043b\u0438 \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u0437\u0435\u0440\u043a\u0430\u043b\u0438\u0442\u044c \u043a\u043e\u0434 \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 \u043d\u0430 \u0413\u0438\u0442\u0445\u0430\u0431\u0435, \u0430 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0439 \u0434\u043b\u044f \u0441\u0435\u0431\u044f \u0438 \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043f\u0440\u0438\u0447\u0438\u043d \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442 \u0432 open source \u2014 \u043f\u044f\u0442\u044c: \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e \u0441\u0432\u044f\u0437\u044c. \u0412\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u044b \u0432 \u0438\u043d\u0434\u0443\u0441\u0442\u0440\u0438\u0438. \u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u043e\u0432\u043e\u043c\u0443. \u0412\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u041f\u0440\u043e\u043a\u0430\u0447\u0430\u0442\u044c \u043b\u0438\u0447\u043d\u044b\u0439 \u0431\u0440\u0435\u043d\u0434. \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043a\u043e\u0440\u043e\u0442\u043a\u043e \u043f\u043e \u043d\u0438\u043c \u043f\u0440\u043e\u0439\u0434\u0451\u043c\u0441\u044f.","title":"\u0417\u0430\u0447\u0435\u043c \u043d\u0430\u043c \u043d\u0443\u0436\u0435\u043d open source"},{"location":"blog/2019/12/open-source-introduction.ru/#\u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c-\u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e-\u0441\u0432\u044f\u0437\u044c-\u0438-\u0441\u0434\u0435\u043b\u0430\u0442\u044c-\u043a\u043e\u0434-\u043f\u0440\u043e\u0449\u0435-\u0434\u043b\u044f\u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e-\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"\u041c\u044b \u0434\u0435\u043b\u0430\u0435\u043c \u0442\u0443\u043b\u0438\u043d\u0433 \u0434\u043b\u044f \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043e\u0432 \u0410\u0432\u0438\u0442\u043e, \u0438 \u043d\u0430\u0448\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043d\u0443\u0436\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438. \u041d\u0430\u043c \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u0432\u0437\u0433\u043b\u044f\u0434\u0430 \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043e\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0435\u0448\u0430\u044e\u0442 \u043f\u043e\u0445\u043e\u0436\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u0411\u0443\u0434\u0435\u0442 \u043a\u0440\u0443\u0442\u043e, \u0435\u0441\u043b\u0438 \u043d\u0430\u043c \u0443\u043a\u0430\u0436\u0443\u0442 \u043d\u0430 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0432\u043e \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0443. \u041c\u044b \u0443\u0436\u0435 \u0443\u0432\u0438\u0434\u0435\u043b\u0438, \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u043d\u043e\u0441 \u043a\u043e\u0434\u0430 \u0432 \u0413\u0438\u0442\u0445\u0430\u0431 \u043f\u043e\u0434\u0441\u0432\u0435\u0442\u0438\u043b \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f. \u041a\u043e\u0433\u0434\u0430 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0448\u044c, \u0447\u0442\u043e \u044d\u0442\u0438\u043c \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u0440\u0443\u0433\u0438\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0442\u043e \u043f\u043e-\u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u0441\u043c\u043e\u0442\u0440\u0438\u0448\u044c \u043d\u0430 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443. \u041f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u2014 \u043d\u0435 \u0441\u0430\u043c\u043e\u0446\u0435\u043b\u044c. \u041d\u043e \u044d\u0442\u043e\u0442 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 \u043c\u043d\u043e\u0433\u043e\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u0438 \u0435\u0451 \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u0438.","title":"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e \u0441\u0432\u044f\u0437\u044c \u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043a\u043e\u0434 \u043f\u0440\u043e\u0449\u0435 \u0434\u043b\u044f&nbsp;\u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"blog/2019/12/open-source-introduction.ru/#\u0432\u043b\u0438\u044f\u0442\u044c-\u043d\u0430-\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u044b-\u0432\u0438\u043d\u0434\u0443\u0441\u0442\u0440\u0438\u0438","text":"\u041c\u044b \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0435\u043c \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u043b\u044f \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 c 2017 \u0433\u043e\u0434\u0430 \u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043e\u0431 \u044d\u0442\u043e\u043c \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u0445 \u0438 \u043c\u0438\u0442\u0430\u043f\u0430\u0445: \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0412\u043e\u0440\u043e\u043d\u0438\u043d \u00abAndroid \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0410\u0432\u0438\u0442\u043e \u0432 Open Source\u00bb - Android Broadcast. \u0421\u0435\u0440\u0433\u0435\u0439 \u0411\u043e\u0438\u0448\u0442\u044f\u043d \u00abCI/CD \u0437\u0434\u043e\u0440\u043e\u0432\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430\u00bb - AppsConf 2019. \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0428\u043f\u0438\u0440\u043a\u043e \u00ab\u0410\u0432\u0442\u043e\u0442\u0435\u0441\u0442\u044b \u0432 \u0410\u0432\u0438\u0442\u043e. \u0417\u0430\u0447\u0435\u043c \u043e\u043d\u0438, \u043a\u0430\u043a \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u043e\u044f\u0442\u00bb \u2014 Apps Conf Moscow 2019. \u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041a\u0440\u0438\u0432\u043e\u0431\u043e\u043a\u043e\u0432 \u00ab\u0423\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435 \u0441\u0431\u043e\u0440\u043a\u0438 \u043c\u043d\u043e\u0433\u043e\u043c\u043e\u0434\u0443\u043b\u044c\u043d\u043e\u0433\u043e Android-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u00bb \u2014 Apps Conf Moscow 2019. \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0428\u043f\u0438\u0440\u043a\u043e \u00ab\u0420\u0435\u043b\u0438\u0437\u044b \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0432 \u0410\u0432\u0438\u0442\u043e\u00bb \u2014 Mobius 2018 Piter. \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u041c\u0435\u0440\u043a\u0443\u0440\u044c\u0435\u0432 \"Impact Analysis\" \u2014 AppsConf: QualityApps 2018. \u041d\u0438\u043a\u043e\u043b\u0430\u0439 \u041d\u0435\u0441\u0442\u0435\u0440\u043e\u0432 \u00ab\u042d\u0432\u043e\u043b\u044e\u0446\u0438\u044f CI \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438\u00bb \u2014 Saint AppsConf 2018. \u041f\u043e\u043c\u0438\u043c\u043e \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u043e\u0432, \u043c\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0445\u043e\u0442\u0435\u043b\u0438 \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f \u043a\u043e\u0434\u043e\u043c \u0438 \u0434\u0430\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0435\u0433\u043e \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c. \u0412\u0435\u0434\u044c \u043c\u043d\u043e\u0433\u0438\u0435 Android-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441\u0442\u0430\u043b\u043a\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u0445\u043e\u0436\u0438\u043c\u0438 \u0432\u044b\u0437\u043e\u0432\u0430\u043c\u0438: \u041a\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u0430\u0432\u0442\u043e\u0442\u0435\u0441\u0442\u044b, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0438 \u043f\u0440\u0438\u043d\u043e\u0441\u0438\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u0443. \u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0438\u0445 \u0432 pull request\u2019\u0430\u0445. \u041a\u0430\u043a \u0434\u0435\u0448\u0435\u0432\u043b\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443. \u0414\u043b\u044f \u044d\u0442\u0438\u0445 \u0437\u0430\u0434\u0430\u0447 \u043d\u0435\u0442 \u043e\u0431\u0449\u0435\u043f\u0440\u0438\u043d\u044f\u0442\u044b\u0445 \u0438 \u0443\u0441\u0442\u043e\u044f\u0432\u0448\u0438\u0445\u0441\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u2014 \u043a\u0430\u0436\u0434\u0430\u044f \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u043e-\u0441\u0432\u043e\u0435\u043c\u0443. \u041c\u044b \u0434\u0435\u043b\u0438\u043c\u0441\u044f \u0441\u0432\u043e\u0438\u043c\u0438 \u043d\u0430\u0440\u0430\u0431\u043e\u0442\u043a\u0430\u043c\u0438, \u0447\u0442\u043e\u0431\u044b \u0432 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u043d\u0435 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u043b\u043e\u0441\u044c \u0441\u043e\u0431\u0438\u0440\u0430\u0442\u044c \u043f\u043e \u043a\u0440\u0443\u043f\u0438\u0446\u0430\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 CI/CD. \u0425\u043e\u0447\u0435\u0442\u0441\u044f, \u0447\u0442\u043e\u0431\u044b \u0432\u043c\u0435\u0441\u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u0430 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0432\u0437\u044f\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0443\u0442\u0438\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c. \u0418, \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u043a\u043e\u0434\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u0432\u0438\u0434\u0435 \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441\u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0434\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430\u0448\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.","title":"\u0412\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u044b \u0432&nbsp;\u0438\u043d\u0434\u0443\u0441\u0442\u0440\u0438\u0438"},{"location":"blog/2019/12/open-source-introduction.ru/#\u043d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f-\u043e\u0431\u044a\u044f\u0441\u043d\u044f\u044f-\u0434\u0440\u0443\u0433\u0438\u043c","text":"\u041f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u043a\u043e\u0434 \u0432 open source \u2014 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e. \u0412\u0430\u0436\u043d\u044b \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438, \u043f\u043e\u0434\u0445\u043e\u0434\u044b, \u043f\u0443\u0442\u0438 \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0438 \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u0439. \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044f \u0438\u0445, \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0448\u0438 \u0438\u0434\u0435\u0438 \u0438 \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432\u043d\u0435 \u0410\u0432\u0438\u0442\u043e.","title":"\u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f, \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u044f \u0434\u0440\u0443\u0433\u0438\u043c"},{"location":"blog/2019/12/open-source-introduction.ru/#\u0432\u043b\u0438\u044f\u0442\u044c-\u043d\u0430\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0435-\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438-\u0438-\u0431\u044b\u0441\u0442\u0440\u0435\u0435-\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c-\u0438\u0445-\u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b","text":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435, \u0447\u0442\u043e \u0432\u044b \u0441\u0442\u043e\u043b\u043a\u043d\u0443\u043b\u0438\u0441\u044c \u0441 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u043e\u0439 \u0432 Android \u0438\u043b\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u043e\u0431\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u0443\u0442\u044c. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u0430 \u043f\u043e\u043c\u043e\u0449\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430 \u0438\u043b\u0438 \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u043a\u043e\u0434\u0430. \u0412\u044b \u0437\u0430\u0434\u0430\u043b\u0438 \u0432\u043e\u043f\u0440\u043e\u0441 \u043d\u0430 Stack Overflow, \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u0431\u0430\u0433 \u0432 Google IssueTracker, \u0432\u0441\u0451 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043b\u0438, \u043d\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u043d\u0435 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f. \u0423 \u0432\u0430\u0441 \u043f\u0440\u043e\u0441\u044f\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440. \u041d\u0430 \u0432\u0441\u0451 \u044d\u0442\u043e \u0443\u0445\u043e\u0434\u0438\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f. Open source \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440. \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 , \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044c \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b. \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0435\u0433\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u2014 dogfooding, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u043d\u044c\u0448\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u043c \u0438 \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u0447\u0442\u043e \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442. \u041d\u043e \u044d\u0442\u043e \u0436\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0449\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0431\u0430\u0433\u0438. \u041a\u043e\u0433\u0434\u0430 \u043c\u044b \u0434\u0430\u0451\u043c \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432 \u0447\u0443\u0436\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435, \u0435\u0451 \u0430\u0432\u0442\u043e\u0440\u0443 \u043f\u0440\u043e\u0449\u0435 \u043f\u043e\u043d\u044f\u0442\u044c, \u0432 \u0447\u0451\u043c \u0434\u0435\u043b\u043e. \u042d\u0442\u043e \u043f\u043e\u0432\u044b\u0448\u0430\u0435\u0442 \u0448\u0430\u043d\u0441\u044b, \u0447\u0442\u043e \u043e\u043d \u0432\u043e\u0437\u044c\u043c\u0451\u0442\u0441\u044f \u0437\u0430 \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u041f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u044c open source \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0442\u043e\u0436\u0435 \u043f\u043e\u0432\u044b\u0448\u0430\u0435\u0442 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c, \u0447\u0442\u043e \u043d\u0430 \u0432\u0430\u0441 \u043e\u0431\u0440\u0430\u0442\u044f\u0442 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435. \u0423\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0430 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0441 \u043a\u0443\u0447\u0435\u0439 \u0437\u0432\u0451\u0437\u0434\u043e\u0447\u0435\u043a \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e\u0432\u044b\u0448\u0430\u0435\u0442 \u0434\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u0435\u0451 \u0441\u043b\u043e\u0436\u043d\u0435\u0435 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u0430\u043a\u043e\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0431\u0435\u0437 open source \u0441\u043b\u043e\u0436\u043d\u0435\u0435 \u2014 \u0442\u0432\u043e\u0451 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0441\u0443\u043f\u0435\u0440\u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0438\u043b\u0438 \u0442\u0435\u0431\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u043d\u0430\u0442\u044c \u043b\u0438\u0447\u043d\u043e.","title":"\u0412\u043b\u0438\u044f\u0442\u044c \u043d\u0430&nbsp;\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b"},{"location":"blog/2019/12/open-source-introduction.ru/#\u043f\u0438\u0430\u0440-\u0438-\u043b\u0438\u0447\u043d\u0430\u044f-\u043c\u043e\u0442\u0438\u0432\u0430\u0446\u0438\u044f","text":"\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f, \u043d\u043e \u043d\u0435 \u043f\u043e \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438, \u043f\u0440\u0438\u0447\u0438\u043d\u0430 \u2014 \u044d\u0442\u043e \u043b\u0438\u0447\u043d\u0430\u044f \u0432\u044b\u0433\u043e\u0434\u0430. \u041e\u0442 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0441\u0442\u0438 \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u044b\u0438\u0433\u0440\u044b\u0432\u0430\u044e\u0442 \u0432\u0441\u0435. \u041a\u043e\u043c\u043f\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0437\u0430 \u0441\u0447\u0451\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430, \u0430 \u043c\u044b \u043f\u0440\u043e\u043a\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u043b\u0438\u0447\u043d\u044b\u0439 \u0431\u0440\u0435\u043d\u0434 \u043a\u0430\u043a \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u044b \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043c\u043e\u0442\u0438\u0432\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b. \u0411\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0438\u0441\u043a\u0438\u0432\u0430\u0442\u044c \u043f\u043e \u0432\u0435\u0447\u0435\u0440\u0430\u043c \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u0438\u043b\u0438 \u043a\u043e\u043c\u043c\u0438\u0442\u044b \u0432 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0435 open source \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.","title":"\u041f\u0438\u0430\u0440 \u0438 \u043b\u0438\u0447\u043d\u0430\u044f \u043c\u043e\u0442\u0438\u0432\u0430\u0446\u0438\u044f"},{"location":"blog/2019/12/open-source-introduction.ru/#\u0447\u0442\u043e-\u0432\u044b\u043d\u0435\u0441\u043b\u0438-\u0432open-source","text":"\u041c\u044b \u0432\u044b\u043d\u0435\u0441\u043b\u0438 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043d\u0430 \u0413\u0438\u0442\u0445\u0430\u0431\u0435 \u043f\u043e\u0447\u0442\u0438 \u0432\u0441\u044e \u043d\u0430\u0448\u0443 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Android \u0438 CI/CD. \u0427\u0442\u043e\u0431\u044b \u0434\u0440\u0443\u0433\u0438\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u043f\u0440\u043e\u0449\u0435 \u0431\u044b\u043b\u043e \u0441\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435, \u0432\u0441\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043f\u043e \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e: Gradle \u043f\u043b\u0430\u0433\u0438\u043d\u044b. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f Android \u0442\u0435\u0441\u0442\u043e\u0432. \u042d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u044b \u041e\u0442\u043c\u0435\u0447\u0443 \u043f\u0430\u0440\u043e\u0447\u043a\u0443 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a.","title":"\u0427\u0442\u043e \u0432\u044b\u043d\u0435\u0441\u043b\u0438 \u0432&nbsp;open source"},{"location":"blog/2019/12/open-source-introduction.ru/#test-runner","text":"\u042d\u0442\u043e gradle \u043f\u043b\u0430\u0433\u0438\u043d \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 instrumentation \u0442\u0435\u0441\u0442\u043e\u0432. \u0411\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0439 \u0430\u043d\u0430\u043b\u043e\u0433 \u2014 Marathon , \u043d\u043e \u043d\u0430\u0448 \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434 Android. Test Runner: \u041e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0442\u0435\u0441\u0442\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c. \u0415\u0441\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f\u043c, \u043f\u043e \u043f\u0430\u043a\u0435\u0442\u0430\u043c, \u043f\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c \u043f\u0440\u043e\u0448\u043b\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430. \u041e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442, \u043d\u0430 \u043a\u0430\u043a\u0438\u0445 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430\u0445 \u043f\u0440\u043e\u0433\u043e\u043d\u044f\u0442\u044c \u0442\u0435\u0441\u0442\u044b. \u0420\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u0443\u0435\u0442 \u0438\u0445 \u0432 Kubernetes \u0438\u043b\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430\u043c. \u0417\u0430\u0434\u0430\u0451\u0442 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432. \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u043e\u0442\u0447\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u043f\u0440\u043e\u0433\u043e\u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0439 TMS (test management system), \u0435\u0451 \u043d\u0435\u0442 \u0432 open source. \u041c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043d\u0430\u0434 \u0442\u0435\u043c, \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0434\u0440\u0443\u0433\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e.","title":"Test runner"},{"location":"blog/2019/12/open-source-introduction.ru/#impact-analysis","text":"\u0423 \u043d\u0430\u0441 \u043e\u043a\u043e\u043b\u043e 1600 instrumentation \u0442\u0435\u0441\u0442\u043e\u0432 \u0438 10K unit-\u0442\u0435\u0441\u0442\u043e\u0432. \u041c\u044b \u0445\u043e\u0442\u0435\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0432\u0441\u0435 \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u043b\u044e\u0431\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430, \u043d\u043e \u044d\u0442\u043e \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u2014 \u043f\u0440\u043e\u0433\u043e\u043d \u0437\u0430\u0439\u043c\u0451\u0442 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u2014 \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, smoke-\u0442\u0435\u0441\u0442\u044b, \u0431\u044b\u0441\u0442\u0440\u044b\u0435, \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0435, \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u044c. \u041d\u043e \u043f\u0440\u0438 \u0442\u0430\u043a\u043e\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0435\u0441\u0442\u044c \u0448\u0430\u043d\u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0443, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u043e, \u043a\u0430\u043a\u043e\u0439 \u043d\u0430\u0431\u043e\u0440 \u0442\u0435\u0441\u0442\u043e\u0432 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u0435\u0435. \u0418\u0434\u0435\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u2014 \u043f\u043e\u043d\u044f\u0442\u044c, \u043a\u0430\u043a\u043e\u0439 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0442\u0435\u0441\u0442\u043e\u0432 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442 \u0432\u0441\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. \u042d\u0442\u043e \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f test impact analysis . \u041c\u044b \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0438 Gradle plugin , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0449\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043c\u043e\u0434\u0443\u043b\u044f\u0445, \u043f\u0430\u0440\u0441\u0438\u0442 \u0442\u0435\u0441\u0442\u044b \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0438\u0437 \u043d\u0438\u0445 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c. \u0411\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430(\u0443\u0434\u0430\u043b\u0435\u043d\u043e). \u0421\u0435\u0439\u0447\u0430\u0441 \u043e\u043d\u0430 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u0430, \u0434\u0430 \u0435\u0449\u0451 \u0438 \u043d\u0435 \u0432\u0441\u044f \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430. \u041c\u044b \u0445\u043e\u0442\u0438\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u043e\u043d\u044f\u0442\u043d\u0435\u0435, \u0438 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u0430 \u0432\u0430\u0448\u0430 \u043f\u043e\u043c\u043e\u0449\u044c. \u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438\u0442\u0435, \u0447\u0442\u043e \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0438 \u043f\u043e\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 \u0432 \u043d\u0430\u0448\u0435\u043c \u0442\u0435\u043b\u0435\u0433\u0440\u0430\u043c-\u0447\u0430\u0442\u0435 .","title":"Impact analysis"},{"location":"blog/2019/12/open-source-introduction.ru/#\u0447\u0435\u043c-\u043c\u043e\u0433\u0443\u0442-\u0431\u044b\u0442\u044c-\u043f\u043e\u043b\u0435\u0437\u043d\u044b-\u043d\u0430\u0448\u0438-\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","text":"\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043c\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0445, \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0432\u0430\u0448\u0438\u0445 \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0435\u0439. \u0415\u0441\u043b\u0438 \u0432\u044b \u0440\u0435\u0448\u0430\u0435\u0442\u0435 \u043f\u043e\u0445\u043e\u0436\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u2014 \u0441\u043c\u0435\u043b\u043e \u043f\u0438\u0448\u0438\u0442\u0435 \u043d\u0430\u043c \u0432 \u0442\u0435\u043b\u0435\u0433\u0440\u0430\u043c-\u0447\u0430\u0442 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u0438\u043b\u0438 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c . \u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0435\u043c, \u0447\u0442\u043e \u0437\u043d\u0430\u0435\u043c, \u043f\u043e\u0441\u0442\u0430\u0440\u0430\u0435\u043c\u0441\u044f \u043f\u043e\u043c\u043e\u0447\u044c \u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b. \u041c\u043e\u0436\u043d\u043e \u0441\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0442\u044c \u0447\u0442\u043e \u0443\u0433\u043e\u0434\u043d\u043e: \u0410 \u043a\u0430\u043a \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0435 \u0441 \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u043c\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438? \u0417\u0430\u0447\u0435\u043c \u0442\u0430\u043a \u043c\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430? \u041e\u043d \u0436\u0435 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439. \u041f\u043e\u0447\u0435\u043c\u0443 \u0432\u0435\u0441\u044c \u043a\u043e\u0434 \u0432 Gradle \u043f\u043b\u0430\u0433\u0438\u043d\u0430\u0445, \u0430 \u043d\u0435 \u0432 Python \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445? \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0432&nbsp \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 . \u0421\u0435\u0439\u0447\u0430\u0441 \u0432 \u043d\u0451\u043c \u043f\u043e\u043a\u0430\u0437\u0430\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f test runner. \u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u0443 \u043d\u0430\u0441 \u043f\u043e\u043a\u0430 \u043c\u0430\u043b\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u043e\u044f\u0432\u0438\u0442\u044c\u0441\u044f \u0435\u0449\u0451 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043d\u0430\u043c, \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0434\u0435\u0442, \u0438 \u043c\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c.","title":"\u0427\u0435\u043c \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u044b \u043d\u0430\u0448\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438"},{"location":"blog/2019/12/open-source-introduction.ru/#\u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0430\u0442\u044c\u044f\u0445 \u043c\u044b \u043f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0440\u043e: \u041d\u0430\u0448 test runner. \u0410\u043d\u0430\u0442\u043e\u043c\u0438\u044e \u0442\u0435\u0441\u0442\u0430 \u2014 \u0447\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043e\u0442 \u043d\u0430\u0436\u0430\u0442\u0438\u044f \u043a\u043d\u043e\u043f\u043a\u0438 \u201cRun\u201d \u0432 IDE \u0434\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430. \u041a\u0430\u043a \u043c\u044b \u0431\u043e\u0440\u0435\u043c\u0441\u044f c \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0442\u0435\u0441\u0442\u043e\u0432 \u0438 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b. \u041d\u0430\u0448\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043a \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b. \u041a\u0430\u043a \u043c\u044b \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u043b\u0438 \u0432\u0440\u0435\u043c\u044f \u0440\u0435\u043b\u0438\u0437\u043e\u0432 \u0441 \u043c\u0435\u0441\u044f\u0446\u0430 \u0434\u043e \u043d\u0435\u0434\u0435\u043b\u0438. \u0415\u0441\u0442\u044c \u0438\u0434\u0435\u0438 \u0438 \u043f\u043e \u0431\u043e\u043b\u0435\u0435 \u043e\u0431\u0449\u0438\u043c \u0442\u0435\u043c\u0430\u043c: \u041a\u0430\u043a \u043d\u0430\u0447\u0430\u0442\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b. \u041e\u0441\u043d\u043e\u0432\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u043d\u043e\u0432\u0438\u0447\u043a\u043e\u0432 \u2014 \u043f\u0440\u043e \u043e\u0431\u0449\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438. \u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438\u0442\u0435 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445, \u043e \u0447\u0451\u043c \u0432\u0430\u043c \u0431\u0443\u0434\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u0435\u0435 \u0443\u0437\u043d\u0430\u0442\u044c. \u0422\u0430\u043a \u043c\u044b \u043f\u043e\u0439\u043c\u0451\u043c, \u043a\u0430\u043a\u043e\u0439 \u0442\u0435\u043a\u0441\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c.","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},{"location":"blog/2020/02/lint-worker-api-workaround/","text":"Workaround for Android lint that doesn't use Gradle Worker API # OUTDATED since AGP 7 Issue #145235363 Problem # We have a lot of modules in the project, and things build in parallel very well. However, there is a contention between Android lint and UI-tests in CI builds. Both tasks are on a final application module. We use workers to parallelize different UI-testing tasks and enable Gradle workers API for available Android Gradle plugin tasks. Android lint does not use Gradle Worker API yet and blocks any of these optimizations on most occasions. It is so, because Gradle holds module (project) lock , and even if your task use workers, it should acquire the lock to start or report finish. So it will parallelize as nice as you might expect only if all tasks running on module use workers, or non-worker task is fast enough to even bother. Warning Tasks report finish time later than actual: gradle #8630 gantt title Lint blocks instrumentation to start dateFormat YYYY-MM-DD axisFormat %j section project package :package, 1000-01-01, 11d lint :lint, 1000-01-02, 10d instrumentation :after lint package, 10d Solution # We ended up with a kinda dirty and in-theory unstable hack, but it works well. Let's take a look only on final application module tasks: Long tasks supporting workers API (good tasks) must start as soon as all its dependencies ready. It will release a lock right after the start Android lint (bad task) should start right after it, holding a lock until the end Even if good tasks finished before lint we end a whole build in much more optimal time than consequentially gantt title Lint runs in parallel with instrumentation dateFormat YYYY-MM-DD axisFormat %j section project package :package, 1000-01-01, 3d instrumentation :after package, 11d lint :lint, 1000-01-05, 10d Implementation # We have introduced preInstrumentation task for UI-tests, that depends on the same tasks as instrumentation one's, but doing nothing other than mustRunAfter point to lint task, moving it next to UI-tests.","title":"Lint Worker API workaround"},{"location":"blog/2020/02/lint-worker-api-workaround/#workaround-for-android-lint-that-doesnt-use-gradle-worker-api","text":"OUTDATED since AGP 7 Issue #145235363","title":"Workaround for Android lint that doesn't use Gradle Worker API"},{"location":"blog/2020/02/lint-worker-api-workaround/#problem","text":"We have a lot of modules in the project, and things build in parallel very well. However, there is a contention between Android lint and UI-tests in CI builds. Both tasks are on a final application module. We use workers to parallelize different UI-testing tasks and enable Gradle workers API for available Android Gradle plugin tasks. Android lint does not use Gradle Worker API yet and blocks any of these optimizations on most occasions. It is so, because Gradle holds module (project) lock , and even if your task use workers, it should acquire the lock to start or report finish. So it will parallelize as nice as you might expect only if all tasks running on module use workers, or non-worker task is fast enough to even bother. Warning Tasks report finish time later than actual: gradle #8630 gantt title Lint blocks instrumentation to start dateFormat YYYY-MM-DD axisFormat %j section project package :package, 1000-01-01, 11d lint :lint, 1000-01-02, 10d instrumentation :after lint package, 10d","title":"Problem"},{"location":"blog/2020/02/lint-worker-api-workaround/#solution","text":"We ended up with a kinda dirty and in-theory unstable hack, but it works well. Let's take a look only on final application module tasks: Long tasks supporting workers API (good tasks) must start as soon as all its dependencies ready. It will release a lock right after the start Android lint (bad task) should start right after it, holding a lock until the end Even if good tasks finished before lint we end a whole build in much more optimal time than consequentially gantt title Lint runs in parallel with instrumentation dateFormat YYYY-MM-DD axisFormat %j section project package :package, 1000-01-01, 3d instrumentation :after package, 11d lint :lint, 1000-01-05, 10d","title":"Solution"},{"location":"blog/2020/02/lint-worker-api-workaround/#implementation","text":"We have introduced preInstrumentation task for UI-tests, that depends on the same tasks as instrumentation one's, but doing nothing other than mustRunAfter point to lint task, moving it next to UI-tests.","title":"Implementation"},{"location":"blog/2020/03/testing-a-minimized-build/","text":"Testing a minimized build # About minimization: link We want to run UI tests against build as close as possible to a production one. It's quite a challenging task, mostly because of tooling problems: #126429384 . Developers should maintain a list of keep rules of code referenced from a test app manually. We work around these problems by using keeper . Build type # Android Gradle plugin uses testBuildType property to determine which build type to test. We chose stagingAutoTest as a type to test against in CI environment. However local builds defaults to debug type for faster test writing cycle. Developer who wants to reproduce test problem specific to CI locally, should temporary change <app name>.testBuildType property to stagingAutoTest in ~/.gradle/gradle.properties . Sample # You can check an example in the :test-app module. Known issues # Dynamically referenced resources # You can see in PageObjectTest , that we referenced R.layout.page_object_1 , dynamically creating layout. These layouts referenced nowhere in app code, so if shrinkResources enabled you will face strange error: error inflating class x Caused by: java.lang.ClassNotFoundException: Didn't find class \"android.view.x\" on path: DexPathList What it really hides, R.layout.page_object_1 got shrinked to: <x /> If this is your case, add these resources to res/raw/keep.xml like this: <resources xmlns:tools= \"http://schemas.android.com/tools\" tools:keep= \"@layout/page_object*\" /> X already has a mapping # Issue #122924648 - Solved in a 1.6.x Some issues could be solved in a new version of r8, you should consider upgrading before hacking further. By default, r8 bundled with Android Gradle plugin, but you can override it. buildscript { val r8Version : String by project repositories { maven { setUrl ( \"http://storage.googleapis.com/r8-releases/raw\" ) } } dependencies { classpath ( \"com.android.tools:r8: $ r8Version \" ) // < it should be added before android Gradle plugin } } Info For versions check tags here: https://r8.googlesource.com/r8/ Seems like 1.5 versions bundled with AGP 3.5.x 1.6 -> 3.6.x and 2.0 -> 4.0.x Warning Don't forget to tell keeper , you are using different r8 version: dependencies { keeperR8 ( \"com.android.tools:r8: $ r8Version \" ) } Still NoSuchMethodError # Take a look at module :subprojects:android-test:keep-for-testing for additional keep annotations. It's a workaround described here: Issue #143419092 You still need to add proguard rules as pointed in annotation classes comments. Why not package proguard rules? In this case, rules go into all variants, and you only want a tested one. Why not use original @Keep? Just to distinguish an intent, it's for testing and only in a tested variant","title":"Testing a minimized build"},{"location":"blog/2020/03/testing-a-minimized-build/#testing-a-minimized-build","text":"About minimization: link We want to run UI tests against build as close as possible to a production one. It's quite a challenging task, mostly because of tooling problems: #126429384 . Developers should maintain a list of keep rules of code referenced from a test app manually. We work around these problems by using keeper .","title":"Testing a minimized build"},{"location":"blog/2020/03/testing-a-minimized-build/#build-type","text":"Android Gradle plugin uses testBuildType property to determine which build type to test. We chose stagingAutoTest as a type to test against in CI environment. However local builds defaults to debug type for faster test writing cycle. Developer who wants to reproduce test problem specific to CI locally, should temporary change <app name>.testBuildType property to stagingAutoTest in ~/.gradle/gradle.properties .","title":"Build type"},{"location":"blog/2020/03/testing-a-minimized-build/#sample","text":"You can check an example in the :test-app module.","title":"Sample"},{"location":"blog/2020/03/testing-a-minimized-build/#known-issues","text":"","title":"Known issues"},{"location":"blog/2020/03/testing-a-minimized-build/#dynamically-referenced-resources","text":"You can see in PageObjectTest , that we referenced R.layout.page_object_1 , dynamically creating layout. These layouts referenced nowhere in app code, so if shrinkResources enabled you will face strange error: error inflating class x Caused by: java.lang.ClassNotFoundException: Didn't find class \"android.view.x\" on path: DexPathList What it really hides, R.layout.page_object_1 got shrinked to: <x /> If this is your case, add these resources to res/raw/keep.xml like this: <resources xmlns:tools= \"http://schemas.android.com/tools\" tools:keep= \"@layout/page_object*\" />","title":"Dynamically referenced resources"},{"location":"blog/2020/03/testing-a-minimized-build/#x-already-has-a-mapping","text":"Issue #122924648 - Solved in a 1.6.x Some issues could be solved in a new version of r8, you should consider upgrading before hacking further. By default, r8 bundled with Android Gradle plugin, but you can override it. buildscript { val r8Version : String by project repositories { maven { setUrl ( \"http://storage.googleapis.com/r8-releases/raw\" ) } } dependencies { classpath ( \"com.android.tools:r8: $ r8Version \" ) // < it should be added before android Gradle plugin } } Info For versions check tags here: https://r8.googlesource.com/r8/ Seems like 1.5 versions bundled with AGP 3.5.x 1.6 -> 3.6.x and 2.0 -> 4.0.x Warning Don't forget to tell keeper , you are using different r8 version: dependencies { keeperR8 ( \"com.android.tools:r8: $ r8Version \" ) }","title":"X already has a mapping"},{"location":"blog/2020/03/testing-a-minimized-build/#still-nosuchmethoderror","text":"Take a look at module :subprojects:android-test:keep-for-testing for additional keep annotations. It's a workaround described here: Issue #143419092 You still need to add proguard rules as pointed in annotation classes comments. Why not package proguard rules? In this case, rules go into all variants, and you only want a tested one. Why not use original @Keep? Just to distinguish an intent, it's for testing and only in a tested variant","title":"Still NoSuchMethodError"},{"location":"blog/2021/01/ui-impact-analysis-end/","text":"Removal of ui tests impact analysis functionality # Avito had a long standing experiment with impact analysis of ui tests which is come to an end. Reasons: We extracted almost all component tests from main app module and distributed to separate demo apps, which uses basic Impact Analysis approach to skip unaffected tests on module level We don't run e2e tests on PR, which will be, ultimately, only type of tests we can't extract Impact analysis for ui tests is fragile, depends on changing links between modules and id's (set manually) Resources link broke multiple times on AGP updates and will continue to break with new namespaced resources So it is just a complex demanding system with almost zero impact on current processes. Discussion Artifacts # Code # 2021.4 release tag : subprojects/gradle/instrumentation-test-impact-analysis subprojects/gradle/ui-test-bytecode-analyzer samples/test-app-impact Video # Dmitriy Merkuriev 's talk: Android CI Impact analysis - AppsConf Mobile meetup (RU) Docs # Part of the documentation about usage and drawbacks: ### Tradeoffs in impact analysis To bind a Page Object to a Gradle-module we keep this information in the code. See [Screen.rootId](../test_framework/TestFramework.md#screen) There are two types of errors in impact analysis: - False-negative: haven't run affected tests. - False-positive: run extra tests. There is a special case - fallback. If we can't understand impact of changes, we ran all tests. We loose time in favor of correctness. Known fallbacks: - Fallback on test level: if a class has been changed, we'll run all his tests. - Fallback on module level: if a module has been changed, we'll run all tests from its package. - Fallback on Screen level: if we can't find Screen's package, we'll run all tests related to it. - Screen doesn't match any of packages - Screen matches to multiple packages","title":"Removal of ui tests impact analysis functionality"},{"location":"blog/2021/01/ui-impact-analysis-end/#removal-of-ui-tests-impact-analysis-functionality","text":"Avito had a long standing experiment with impact analysis of ui tests which is come to an end. Reasons: We extracted almost all component tests from main app module and distributed to separate demo apps, which uses basic Impact Analysis approach to skip unaffected tests on module level We don't run e2e tests on PR, which will be, ultimately, only type of tests we can't extract Impact analysis for ui tests is fragile, depends on changing links between modules and id's (set manually) Resources link broke multiple times on AGP updates and will continue to break with new namespaced resources So it is just a complex demanding system with almost zero impact on current processes. Discussion","title":"Removal of ui tests impact analysis functionality"},{"location":"blog/2021/01/ui-impact-analysis-end/#artifacts","text":"","title":"Artifacts"},{"location":"blog/2021/01/ui-impact-analysis-end/#code","text":"2021.4 release tag : subprojects/gradle/instrumentation-test-impact-analysis subprojects/gradle/ui-test-bytecode-analyzer samples/test-app-impact","title":"Code"},{"location":"blog/2021/01/ui-impact-analysis-end/#video","text":"Dmitriy Merkuriev 's talk: Android CI Impact analysis - AppsConf Mobile meetup (RU)","title":"Video"},{"location":"blog/2021/01/ui-impact-analysis-end/#docs","text":"Part of the documentation about usage and drawbacks: ### Tradeoffs in impact analysis To bind a Page Object to a Gradle-module we keep this information in the code. See [Screen.rootId](../test_framework/TestFramework.md#screen) There are two types of errors in impact analysis: - False-negative: haven't run affected tests. - False-positive: run extra tests. There is a special case - fallback. If we can't understand impact of changes, we ran all tests. We loose time in favor of correctness. Known fallbacks: - Fallback on test level: if a class has been changed, we'll run all his tests. - Fallback on module level: if a module has been changed, we'll run all tests from its package. - Fallback on Screen level: if we can't find Screen's package, we'll run all tests related to it. - Screen doesn't match any of packages - Screen matches to multiple packages","title":"Docs"},{"location":"ci/Containers/","text":"\u0421\u0431\u043e\u0440\u043a\u0438 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\u0445 # Disclaimer The text below contains Avito specific details Avito Docker documentation (internal) \u0412\u0441\u0435 \u043e\u0431\u0440\u0430\u0437\u044b \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u0432 ci/docker . Android SDK image # This is the base image with Android Build Tools. It's not ready yet, see MBS-7071. Android builder image # This is the image for building and testing Android applications. It contains Android SDK. How to update android-builder image? # Build the image to test your changes In CI Run Build android-builder (internal) teamcity configuration. You will see the tag in stdout: Image *******/android/builder:eb4a3b67e564 has been published successfully Locally export DOCKER_REGISTRY = <docker registry> cd ci/docker ./publish.sh <directory with Dockerfile> This script will build a new image. You will the tag in stdout: Successfully built eb4a3b67e564 To push the image you must have registry credentials in these envs: DOCKER_LOGIN , DOCKER_PASSWORD . Without it the script will stop after building. Upload the image to Docker Hub Update image hash in IMAGE_ANDROID_BUILDER variable in ci shell scripts: In github repo: ci/_environment.sh In internal avito repository: ci/_main.sh Check this images is working. At least, run ci/local_check.sh . Make PR with a new image. Docker in docker image # \u0423\u0442\u0438\u043b\u0438\u0442\u0430\u0440\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0437 \u0441 \u0434\u043e\u043a\u0435\u0440\u043e\u043c \u0432\u043d\u0443\u0442\u0440\u0438. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043e\u0431\u0440\u0430\u0437\u043e\u0432, \u043f\u0440\u0435\u0436\u0434\u0435 \u0432\u0441\u0435\u0433\u043e \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430. How to update itself? # \u041e\u0431\u0440\u0430\u0437 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0441\u0430\u043c \u0441\u0435\u0431\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u043e\u0431\u0440\u0430\u0437\u0430 (bootstrapping): ./publish.sh docker-in-docker-image publish.sh - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u043e\u0431\u0440\u0430\u0437\u0430 docker-in-docker-image - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0415\u0441\u043b\u0438 \u043c\u0435\u043d\u044f\u0435\u043c \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u0441 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435\u043c, \u0442\u043e \u0432\u043d\u043e\u0441\u0438\u043c \u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u043e\u044d\u0442\u0430\u043f\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0448\u043b\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u043e\u0431\u0440\u0430\u0437\u0430 \u043c\u043e\u0433\u043b\u0430 \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e. Build docker-in-docker (internal) Android emulator images # \u042d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u044b \u0438\u043c\u0435\u044e\u0442 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438, \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u041d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u044d\u043a\u0440\u0430\u043d\u0430: 320x480, 4 inch \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u043c\u043d\u043e\u0433\u0438\u0435 \u0444\u0438\u0447\u0438 \u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440? # macOS/Windows CI \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0438\u0437-\u0437\u0430 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 haxm #51 . \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e. \u0421\u043e\u0437\u0434\u0430\u0439 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440 \u0432 Android Studio: WVGA (Nexus One) \u0441 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c \u044d\u043a\u0440\u0430\u043d\u0430 3.4'' \u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c 480x800. \u0417\u0430\u043f\u0443\u0441\u0442\u0438 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440 \u041d\u0430\u0441\u0442\u0440\u043e\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: adb root adb shell \"settings put global window_animation_scale 0.0\" adb shell \"settings put global transition_animation_scale 0.0\" adb shell \"settings put global animator_duration_scale 0.0\" adb shell \"settings put secure spell_checker_enabled 0\" adb shell \"settings put secure show_ime_with_hard_keyboard 1\" adb shell \"settings put system screen_off_timeout 1800000\" adb shell \"settings put secure long_press_timeout 1500\" \u041f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440 \u0421\u043c. \u0432\u0441\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432 android-emulator/hardware \u0438 android-emulator/prepare_snapshot.sh \u0417\u0430\u0434\u0430\u0447\u0430 \u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044e (internal) Linux \u041f\u0440\u043e\u0449\u0435 \u0438 \u043d\u0430\u0434\u0435\u0436\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 CI \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u044b. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: Docker KVM \u041d\u0430\u0439\u0434\u0438 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u043e\u0431\u0440\u0430\u0437\u0430 \u0432 Emulator.kt . \u0420\u0430\u0437\u0440\u0435\u0448\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a Xorg \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441 \u043b\u044e\u0431\u043e\u0433\u043e \u0445\u043e\u0441\u0442\u0430 (\u0438\u0437\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435): xhost + \u0417\u0430\u043f\u0443\u0441\u0442\u0438 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440: docker run -d \\ -p 5555 :5555 \\ -p 5554 :5554 \\ -e \"SNAPSHOT_ENABLED\" = \"false\" -e \"WINDOW\" = \"true\" --volume = \"/tmp/.X11-unix:/tmp/.X11-unix:rw\" \\ --privileged \\ <registry>/android/emulator-27:<TAG> \u0418\u043b\u0438 \u0432 headless \u0440\u0435\u0436\u0438\u043c\u0435: docker run -d \\ -p 5555 :5555 \\ -p 5554 :5554 \\ --privileged \\ <registry>/android/emulator-27:<TAG> \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0441\u044c \u043a \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0443 \u0432 adb adb connect localhost:5555 \u041a\u0430\u043a \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043e\u0431\u0440\u0430\u0437? # \u0414\u043b\u044f \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430 \u043d\u0443\u0436\u043d\u0430 \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u0438 \u043e\u0431\u0440\u0430\u0437\u044b. 1. \u0417\u0430\u043b\u0435\u0439 \u043e\u0431\u0440\u0430\u0437\u044b \u0432 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0439 Docker registry # CI \u0421\u043e\u0431\u0435\u0440\u0438 \u043e\u0431\u0440\u0430\u0437 \u043d\u0430 \u0432\u0435\u0442\u043a\u0435 \u0432 Teamcity \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 Build android-emulator (internal) . \u0422\u0435\u0433\u0438 \u043d\u043e\u0432\u044b\u0445 \u043e\u0431\u0440\u0430\u0437\u043e\u0432 \u0431\u0443\u0434\u0443\u0442 \u0432 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u0430\u0445 \u0441\u0431\u043e\u0440\u043a\u0438. \u041e\u0431\u043d\u043e\u0432\u0438 \u0442\u0435\u0433\u0438 \u0432 build.gradle \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445. \u0417\u0430\u043f\u0443\u0448\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 \u0432\u0435\u0442\u043a\u0443. Local \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: Linux, docker KVM K8S \u043f\u0440\u0430\u0432\u0430 \u043d\u0430 push \u043e\u0431\u0440\u0430\u0437\u043e\u0432 \u0432 registry-mobile-apps (env \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 DOCKER_LOGIN, DOCKER_PASSWORD) \u0417\u0430\u043f\u0443\u0441\u0442\u0438 \u0441\u043a\u0440\u0438\u043f\u0442: cd ci/docker ./publish_emulator android-emulator \u0421\u043e\u0431\u0435\u0440\u0435\u0442 \u043e\u0431\u0440\u0430\u0437, \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u0438 \u0437\u0430\u043f\u0443\u0448\u0438\u0442 \u0432 docker registry. \u041d\u0430\u0439\u0442\u0438 \u043d\u043e\u0432\u044b\u0435 \u0442\u0435\u0433\u0438 \u043e\u0431\u0440\u0430\u0437\u043e\u0432. \u0421\u043c. stdout \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0438\u043b\u0438 \u0444\u0430\u0439\u043b android-emulator/images.txt \u041e\u0431\u043d\u043e\u0432\u0438 \u0442\u0435\u0433\u0438 \u043e\u0431\u0440\u0430\u0437\u043e\u0432 \u0432 build.gradle \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445. 2. \u0417\u0430\u043b\u0435\u0439 \u043e\u0431\u0440\u0430\u0437\u044b \u0432 Docker hub # Uploading image to Docker Hub \u041a\u0430\u043a \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e? # \u041f\u0440\u043e\u0433\u043e\u043d\u0438 instrumentation dynamic \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u044f\u0432\u0438\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0443\u044e \u0443\u0442\u0435\u0447\u043a\u0443 \u043f\u0430\u043c\u044f\u0442\u0438. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u044b\u0439 \u0442\u0435\u0441\u0442 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432. \u041f\u0440\u043e\u0433\u043e\u043d\u0438 fullCheck \u0421\u0440\u0430\u0432\u043d\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u0441\u0442\u043e\u0432 \u043f\u043e \u0432\u0441\u0435\u043c \u0441\u0442\u0430\u0442\u0443\u0441\u0430\u043c, \u043d\u0435 \u0441\u0442\u0430\u043b\u043e \u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0443\u043f\u0430\u0432\u0448\u0438\u0445 \u0438\u043b\u0438 \u043f\u043e\u0442\u0435\u0440\u044f\u043d\u043d\u044b\u0445. \u041a\u0430\u043a \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0442\u0440\u0430\u0442\u0438\u0442 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440? # \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c cAdvisor sudo docker run \\ --volume = /:/rootfs:ro \\ --volume = /var/run:/var/run:ro \\ --volume = /sys:/sys:ro \\ --volume = /var/lib/docker/:/var/lib/docker:ro \\ --volume = /dev/disk/:/dev/disk:ro \\ --publish = 8080 :8080 \\ --detach = true \\ --name = cadvisor \\ google/cadvisor:latest \u0412 CI \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u0443\u0431\u0430. Docker Hub # \u041e\u0431\u0440\u0430\u0437\u044b \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u0435\u043c \u0432 hub.docker.com/u/avitotech . Uploading image to Docker Hub # \u041f\u043e\u043a\u0430 \u0447\u0442\u043e \u0437\u0430\u043b\u0438\u0432\u0430\u0435\u043c \u0432\u0440\u0443\u0447\u043d\u0443\u044e, \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044e: MBS-8773. \u0417\u0430\u043b\u043e\u0433\u0438\u043d\u044c\u0441\u044f \u0432 Docker hub docker login --username = avitotech --password = ... \u0421\u043a\u0430\u0447\u0430\u0439 \u043d\u043e\u0432\u044b\u0439 \u043e\u0431\u0440\u0430\u0437 \u0438\u0437 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u043e\u0433\u043e registry docker pull <DOCKER_REGISTRY>/android/<image>:<DIGEST> \u041f\u0440\u0438\u043c\u0435\u0440: docker pull registry/android/android-emulator-29:c0de63a4cd \u041f\u043e\u0441\u0442\u0430\u0432\u044c \u043e\u0431\u0440\u0430\u0437\u0443 tag \u0440\u0430\u0432\u043d\u044b\u0439 digest \u0438\u0437 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u043e\u0433\u043e registry docker tag <DIGEST> avitotech/android-emulator-<API>:<DIGEST> \u041f\u0440\u0438\u043c\u0435\u0440: docker tag c0de63a4cd avitotech/android-emulator-29:c0de63a4cd ` Tag \u043d\u0443\u0436\u0435\u043d \u0447\u0442\u043e\u0431\u044b \u0441\u0441\u044b\u043b\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043e\u0431\u0440\u0430\u0437 \u043f\u043e \u043e\u0434\u043d\u0438\u043c \u0438 \u0442\u0435\u043c-\u0436\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c. Digest \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 registry \u043c\u043e\u0436\u0435\u0442 \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c ( images ID does not match registry manifest digest ). \u0417\u0430\u043b\u0435\u0439 \u043e\u0431\u0440\u0430\u0437 docker push avitotech/android-emulator-<API>:<DIGEST> ` \u041f\u0440\u0438\u043c\u0435\u0440: docker push avitotech/android-emulator-29:c0de63a4cd Best practices # Reproducible image # \u0425\u043e\u0442\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 \u043e\u0431\u0440\u0430\u0437 \u043d\u0430 \u043b\u044e\u0431\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435, \u0432 \u043b\u044e\u0431\u043e\u043c \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0438. \u042d\u0442\u043e \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u043e\u0442\u043b\u0430\u0434\u043a\u0443 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0438 \u0434\u0435\u043b\u0430\u0435\u0442 \u0441\u0431\u043e\u0440\u043a\u0443 \u0431\u043e\u043b\u0435\u0435 \u043d\u0430\u0434\u0435\u0436\u043d\u043e\u0439. reproducible-builds.org \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438: \u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u044f\u0432\u043d\u043e \u0432\u0435\u0440\u0441\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438. \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0432 \u043e\u0431\u0440\u0430\u0437 \u0444\u0430\u0439\u043b\u044b, \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432\u043d\u0435 \u0434\u043e\u043a\u0435\u0440\u0430. \u0413\u043b\u044f\u0434\u044f \u043d\u0430 \u0442\u0430\u043a\u0438\u0435 \u0444\u0430\u0439\u043b\u044b \u0442\u0440\u0443\u0434\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0432 \u043a\u0430\u043a\u043e\u043c \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0438 \u043e\u043d\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b, \u043a\u0430\u043a\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e\u0435.","title":"Containers"},{"location":"ci/Containers/#\u0441\u0431\u043e\u0440\u043a\u0438-\u0432-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\u0445","text":"Disclaimer The text below contains Avito specific details Avito Docker documentation (internal) \u0412\u0441\u0435 \u043e\u0431\u0440\u0430\u0437\u044b \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u0432 ci/docker .","title":"\u0421\u0431\u043e\u0440\u043a\u0438 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\u0445"},{"location":"ci/Containers/#android-sdk-image","text":"This is the base image with Android Build Tools. It's not ready yet, see MBS-7071.","title":"Android SDK image"},{"location":"ci/Containers/#android-builder-image","text":"This is the image for building and testing Android applications. It contains Android SDK.","title":"Android builder image"},{"location":"ci/Containers/#how-to-update-android-builder-image","text":"Build the image to test your changes In CI Run Build android-builder (internal) teamcity configuration. You will see the tag in stdout: Image *******/android/builder:eb4a3b67e564 has been published successfully Locally export DOCKER_REGISTRY = <docker registry> cd ci/docker ./publish.sh <directory with Dockerfile> This script will build a new image. You will the tag in stdout: Successfully built eb4a3b67e564 To push the image you must have registry credentials in these envs: DOCKER_LOGIN , DOCKER_PASSWORD . Without it the script will stop after building. Upload the image to Docker Hub Update image hash in IMAGE_ANDROID_BUILDER variable in ci shell scripts: In github repo: ci/_environment.sh In internal avito repository: ci/_main.sh Check this images is working. At least, run ci/local_check.sh . Make PR with a new image.","title":"How to update android-builder image?"},{"location":"ci/Containers/#docker-in-docker-image","text":"\u0423\u0442\u0438\u043b\u0438\u0442\u0430\u0440\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0437 \u0441 \u0434\u043e\u043a\u0435\u0440\u043e\u043c \u0432\u043d\u0443\u0442\u0440\u0438. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043e\u0431\u0440\u0430\u0437\u043e\u0432, \u043f\u0440\u0435\u0436\u0434\u0435 \u0432\u0441\u0435\u0433\u043e \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430.","title":"Docker in docker image"},{"location":"ci/Containers/#how-to-update-itself","text":"\u041e\u0431\u0440\u0430\u0437 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0441\u0430\u043c \u0441\u0435\u0431\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u043e\u0431\u0440\u0430\u0437\u0430 (bootstrapping): ./publish.sh docker-in-docker-image publish.sh - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u043e\u0431\u0440\u0430\u0437\u0430 docker-in-docker-image - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0415\u0441\u043b\u0438 \u043c\u0435\u043d\u044f\u0435\u043c \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u0441 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435\u043c, \u0442\u043e \u0432\u043d\u043e\u0441\u0438\u043c \u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u043e\u044d\u0442\u0430\u043f\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0448\u043b\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u043e\u0431\u0440\u0430\u0437\u0430 \u043c\u043e\u0433\u043b\u0430 \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e. Build docker-in-docker (internal)","title":"How to update itself?"},{"location":"ci/Containers/#android-emulator-images","text":"\u042d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u044b \u0438\u043c\u0435\u044e\u0442 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438, \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u041d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u044d\u043a\u0440\u0430\u043d\u0430: 320x480, 4 inch \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u043c\u043d\u043e\u0433\u0438\u0435 \u0444\u0438\u0447\u0438","title":"Android emulator images"},{"location":"ci/Containers/#\u043a\u0430\u043a-\u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c-\u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440","text":"macOS/Windows CI \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0438\u0437-\u0437\u0430 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 haxm #51 . \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e. \u0421\u043e\u0437\u0434\u0430\u0439 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440 \u0432 Android Studio: WVGA (Nexus One) \u0441 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c \u044d\u043a\u0440\u0430\u043d\u0430 3.4'' \u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c 480x800. \u0417\u0430\u043f\u0443\u0441\u0442\u0438 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440 \u041d\u0430\u0441\u0442\u0440\u043e\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: adb root adb shell \"settings put global window_animation_scale 0.0\" adb shell \"settings put global transition_animation_scale 0.0\" adb shell \"settings put global animator_duration_scale 0.0\" adb shell \"settings put secure spell_checker_enabled 0\" adb shell \"settings put secure show_ime_with_hard_keyboard 1\" adb shell \"settings put system screen_off_timeout 1800000\" adb shell \"settings put secure long_press_timeout 1500\" \u041f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440 \u0421\u043c. \u0432\u0441\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432 android-emulator/hardware \u0438 android-emulator/prepare_snapshot.sh \u0417\u0430\u0434\u0430\u0447\u0430 \u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044e (internal) Linux \u041f\u0440\u043e\u0449\u0435 \u0438 \u043d\u0430\u0434\u0435\u0436\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 CI \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u044b. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: Docker KVM \u041d\u0430\u0439\u0434\u0438 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u043e\u0431\u0440\u0430\u0437\u0430 \u0432 Emulator.kt . \u0420\u0430\u0437\u0440\u0435\u0448\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a Xorg \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441 \u043b\u044e\u0431\u043e\u0433\u043e \u0445\u043e\u0441\u0442\u0430 (\u0438\u0437\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435): xhost + \u0417\u0430\u043f\u0443\u0441\u0442\u0438 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440: docker run -d \\ -p 5555 :5555 \\ -p 5554 :5554 \\ -e \"SNAPSHOT_ENABLED\" = \"false\" -e \"WINDOW\" = \"true\" --volume = \"/tmp/.X11-unix:/tmp/.X11-unix:rw\" \\ --privileged \\ <registry>/android/emulator-27:<TAG> \u0418\u043b\u0438 \u0432 headless \u0440\u0435\u0436\u0438\u043c\u0435: docker run -d \\ -p 5555 :5555 \\ -p 5554 :5554 \\ --privileged \\ <registry>/android/emulator-27:<TAG> \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0441\u044c \u043a \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0443 \u0432 adb adb connect localhost:5555","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440?"},{"location":"ci/Containers/#\u043a\u0430\u043a-\u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c-\u043e\u0431\u0440\u0430\u0437","text":"\u0414\u043b\u044f \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430 \u043d\u0443\u0436\u043d\u0430 \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u0438 \u043e\u0431\u0440\u0430\u0437\u044b.","title":"\u041a\u0430\u043a \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043e\u0431\u0440\u0430\u0437?"},{"location":"ci/Containers/#1-\u0437\u0430\u043b\u0435\u0439-\u043e\u0431\u0440\u0430\u0437\u044b-\u0432-\u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0439-docker-registry","text":"CI \u0421\u043e\u0431\u0435\u0440\u0438 \u043e\u0431\u0440\u0430\u0437 \u043d\u0430 \u0432\u0435\u0442\u043a\u0435 \u0432 Teamcity \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 Build android-emulator (internal) . \u0422\u0435\u0433\u0438 \u043d\u043e\u0432\u044b\u0445 \u043e\u0431\u0440\u0430\u0437\u043e\u0432 \u0431\u0443\u0434\u0443\u0442 \u0432 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u0430\u0445 \u0441\u0431\u043e\u0440\u043a\u0438. \u041e\u0431\u043d\u043e\u0432\u0438 \u0442\u0435\u0433\u0438 \u0432 build.gradle \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445. \u0417\u0430\u043f\u0443\u0448\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 \u0432\u0435\u0442\u043a\u0443. Local \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: Linux, docker KVM K8S \u043f\u0440\u0430\u0432\u0430 \u043d\u0430 push \u043e\u0431\u0440\u0430\u0437\u043e\u0432 \u0432 registry-mobile-apps (env \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 DOCKER_LOGIN, DOCKER_PASSWORD) \u0417\u0430\u043f\u0443\u0441\u0442\u0438 \u0441\u043a\u0440\u0438\u043f\u0442: cd ci/docker ./publish_emulator android-emulator \u0421\u043e\u0431\u0435\u0440\u0435\u0442 \u043e\u0431\u0440\u0430\u0437, \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u0438 \u0437\u0430\u043f\u0443\u0448\u0438\u0442 \u0432 docker registry. \u041d\u0430\u0439\u0442\u0438 \u043d\u043e\u0432\u044b\u0435 \u0442\u0435\u0433\u0438 \u043e\u0431\u0440\u0430\u0437\u043e\u0432. \u0421\u043c. stdout \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0438\u043b\u0438 \u0444\u0430\u0439\u043b android-emulator/images.txt \u041e\u0431\u043d\u043e\u0432\u0438 \u0442\u0435\u0433\u0438 \u043e\u0431\u0440\u0430\u0437\u043e\u0432 \u0432 build.gradle \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445.","title":"1. \u0417\u0430\u043b\u0435\u0439 \u043e\u0431\u0440\u0430\u0437\u044b \u0432 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0439 Docker registry"},{"location":"ci/Containers/#2-\u0437\u0430\u043b\u0435\u0439-\u043e\u0431\u0440\u0430\u0437\u044b-\u0432-docker-hub","text":"Uploading image to Docker Hub","title":"2. \u0417\u0430\u043b\u0435\u0439 \u043e\u0431\u0440\u0430\u0437\u044b \u0432 Docker hub"},{"location":"ci/Containers/#\u043a\u0430\u043a-\u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c-\u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e","text":"\u041f\u0440\u043e\u0433\u043e\u043d\u0438 instrumentation dynamic \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u044f\u0432\u0438\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0443\u044e \u0443\u0442\u0435\u0447\u043a\u0443 \u043f\u0430\u043c\u044f\u0442\u0438. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u044b\u0439 \u0442\u0435\u0441\u0442 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432. \u041f\u0440\u043e\u0433\u043e\u043d\u0438 fullCheck \u0421\u0440\u0430\u0432\u043d\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u0441\u0442\u043e\u0432 \u043f\u043e \u0432\u0441\u0435\u043c \u0441\u0442\u0430\u0442\u0443\u0441\u0430\u043c, \u043d\u0435 \u0441\u0442\u0430\u043b\u043e \u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0443\u043f\u0430\u0432\u0448\u0438\u0445 \u0438\u043b\u0438 \u043f\u043e\u0442\u0435\u0440\u044f\u043d\u043d\u044b\u0445.","title":"\u041a\u0430\u043a \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e?"},{"location":"ci/Containers/#\u043a\u0430\u043a-\u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c-\u0441\u043a\u043e\u043b\u044c\u043a\u043e-\u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432-\u0442\u0440\u0430\u0442\u0438\u0442-\u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440","text":"\u041b\u043e\u043a\u0430\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c cAdvisor sudo docker run \\ --volume = /:/rootfs:ro \\ --volume = /var/run:/var/run:ro \\ --volume = /sys:/sys:ro \\ --volume = /var/lib/docker/:/var/lib/docker:ro \\ --volume = /dev/disk/:/dev/disk:ro \\ --publish = 8080 :8080 \\ --detach = true \\ --name = cadvisor \\ google/cadvisor:latest \u0412 CI \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u0443\u0431\u0430.","title":"\u041a\u0430\u043a \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0442\u0440\u0430\u0442\u0438\u0442 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440?"},{"location":"ci/Containers/#docker-hub","text":"\u041e\u0431\u0440\u0430\u0437\u044b \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u0435\u043c \u0432 hub.docker.com/u/avitotech .","title":"Docker Hub"},{"location":"ci/Containers/#uploading-image-to-docker-hub","text":"\u041f\u043e\u043a\u0430 \u0447\u0442\u043e \u0437\u0430\u043b\u0438\u0432\u0430\u0435\u043c \u0432\u0440\u0443\u0447\u043d\u0443\u044e, \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044e: MBS-8773. \u0417\u0430\u043b\u043e\u0433\u0438\u043d\u044c\u0441\u044f \u0432 Docker hub docker login --username = avitotech --password = ... \u0421\u043a\u0430\u0447\u0430\u0439 \u043d\u043e\u0432\u044b\u0439 \u043e\u0431\u0440\u0430\u0437 \u0438\u0437 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u043e\u0433\u043e registry docker pull <DOCKER_REGISTRY>/android/<image>:<DIGEST> \u041f\u0440\u0438\u043c\u0435\u0440: docker pull registry/android/android-emulator-29:c0de63a4cd \u041f\u043e\u0441\u0442\u0430\u0432\u044c \u043e\u0431\u0440\u0430\u0437\u0443 tag \u0440\u0430\u0432\u043d\u044b\u0439 digest \u0438\u0437 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u043e\u0433\u043e registry docker tag <DIGEST> avitotech/android-emulator-<API>:<DIGEST> \u041f\u0440\u0438\u043c\u0435\u0440: docker tag c0de63a4cd avitotech/android-emulator-29:c0de63a4cd ` Tag \u043d\u0443\u0436\u0435\u043d \u0447\u0442\u043e\u0431\u044b \u0441\u0441\u044b\u043b\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043e\u0431\u0440\u0430\u0437 \u043f\u043e \u043e\u0434\u043d\u0438\u043c \u0438 \u0442\u0435\u043c-\u0436\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c. Digest \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 registry \u043c\u043e\u0436\u0435\u0442 \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c ( images ID does not match registry manifest digest ). \u0417\u0430\u043b\u0435\u0439 \u043e\u0431\u0440\u0430\u0437 docker push avitotech/android-emulator-<API>:<DIGEST> ` \u041f\u0440\u0438\u043c\u0435\u0440: docker push avitotech/android-emulator-29:c0de63a4cd","title":"Uploading image to Docker Hub"},{"location":"ci/Containers/#best-practices","text":"","title":"Best practices"},{"location":"ci/Containers/#reproducible-image","text":"\u0425\u043e\u0442\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 \u043e\u0431\u0440\u0430\u0437 \u043d\u0430 \u043b\u044e\u0431\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435, \u0432 \u043b\u044e\u0431\u043e\u043c \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0438. \u042d\u0442\u043e \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u043e\u0442\u043b\u0430\u0434\u043a\u0443 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0438 \u0434\u0435\u043b\u0430\u0435\u0442 \u0441\u0431\u043e\u0440\u043a\u0443 \u0431\u043e\u043b\u0435\u0435 \u043d\u0430\u0434\u0435\u0436\u043d\u043e\u0439. reproducible-builds.org \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438: \u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u044f\u0432\u043d\u043e \u0432\u0435\u0440\u0441\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438. \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0432 \u043e\u0431\u0440\u0430\u0437 \u0444\u0430\u0439\u043b\u044b, \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432\u043d\u0435 \u0434\u043e\u043a\u0435\u0440\u0430. \u0413\u043b\u044f\u0434\u044f \u043d\u0430 \u0442\u0430\u043a\u0438\u0435 \u0444\u0430\u0439\u043b\u044b \u0442\u0440\u0443\u0434\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0432 \u043a\u0430\u043a\u043e\u043c \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0438 \u043e\u043d\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b, \u043a\u0430\u043a\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e\u0435.","title":"Reproducible image"},{"location":"ci/ImpactAnalysis/","text":"Test impact analysis # Test impact analysis finds automatically a minimum set of tests that can verify changed code. The Rise of Test Impact Analysis On module level # Besides tests, we have different work to do in modules: Android Lint, unit-tests, assemble, ... If a module is not affected by changes, we don't want to run anything in it. graph TD AppX --> FeatureA AppX --> FeatureB AppX --> FeatureC AppY --> FeatureC AppY:::changed --> FeatureD:::changed classDef changed fill:#f96; These optimizations are supported in CI Steps Plugin . See implementation in impact module.","title":"Impact analysis"},{"location":"ci/ImpactAnalysis/#test-impact-analysis","text":"Test impact analysis finds automatically a minimum set of tests that can verify changed code. The Rise of Test Impact Analysis","title":"Test impact analysis"},{"location":"ci/ImpactAnalysis/#on-module-level","text":"Besides tests, we have different work to do in modules: Android Lint, unit-tests, assemble, ... If a module is not affected by changes, we don't want to run anything in it. graph TD AppX --> FeatureA AppX --> FeatureB AppX --> FeatureC AppY --> FeatureC AppY:::changed --> FeatureD:::changed classDef changed fill:#f96; These optimizations are supported in CI Steps Plugin . See implementation in impact module.","title":"On module level"},{"location":"contributing/Documentation/","text":"Documentation # If the documentation is not good enough, people will not use what you do. Style guide # Write simply and to the point # Documentation is intended to solve problems. Thus, it has to be simple and clear. We can recommend several definitive guides on writing in general: The Elements of Style - William Strunk Jr. \u041f\u0438\u0448\u0438, \u0441\u043e\u043a\u0440\u0430\u0449\u0430\u0439 ( glvrd.ru - online checker) Extra materials about technical writing: Jetbrains - \u041a\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u044b Microsoft Writing Style Guide GitLab documentation styleguide What nobody tells you about documentation Use appropriate format for the problem # There is no universal documentation. It needs to be structured around problem and a level of knowledge: Studying Working Practical steps Tutorial How-to guide Theoretical knowledge Explanation Reference It's ok to mix some types in one page: # Managing X Here goes short _explanation_ of X for new users. You can reference here to a detailed information. If I know this topic, I will skip it easily. ## Create a new X 1. Do ... <-- Short how-to guide 1. ... ## Move files to X Select ... Tutorial # Analogy: teaching a child how to cook Naming: Getting started with X Writing your first test Assist newcomers to get started Is learning-oriented Shows how to do in form of a lesson The tutorial declares a goal in the beginning. After it guides by a series of steps. Each step is: Easy to follow Robust and reliable Gives a positive feedback by an immediate result Has as minimum theory as possible Examples: Creating Web Applications with Flask How-to guide # Analogy: a recipe Naming: How to run tests in CI - \ud83d\udc4d Running tests - \ud83d\udc4e Tests in CI - \ud83d\udc4e \u041e\u0440\u0438\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u043a\u0430\u043a \u0440\u0435\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443. \u041a\u043b\u044e\u0447\u0435\u0432\u043e\u0435 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 tutorial: \u0443\u0436\u0435 \u0437\u043d\u0430\u043a\u043e\u043c\u044b \u0441 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u043c. \u041c\u043e\u0436\u0435\u0442 \u0430\u0434\u0440\u0435\u0441\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u043e\u0432\u0438\u0447\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0434\u0430\u0436\u0435 \u043d\u0435 \u0441\u0444\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u041d\u0435 \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438, \u043c\u043e\u0436\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0441\u044b\u043b\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438. \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442 \u0447\u0435\u0433\u043e \u0445\u043e\u0447\u0435\u0442 \u0434\u043e\u0441\u0442\u0438\u0447\u044c, \u043d\u043e \u043d\u0435 \u0437\u043d\u0430\u0435\u0442 \u043a\u0430\u043a. \u0428\u0430\u0433\u0438 \u043d\u0435 \u0442\u0430\u043a\u0438\u0435 \u043d\u0430\u0434\u0435\u0436\u043d\u044b\u0435 \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u043c\u044b\u0435, \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u0443\u0436\u0435 \u0437\u043d\u0430\u043a\u043e\u043c \u0441 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u043c. \u0428\u0430\u0433\u0438 \u0431\u043e\u043b\u0435\u0435 \u0433\u0438\u0431\u043a\u0438\u0435 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u043d\u043e \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u043c, \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u043e \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b. Explanation # Analogy: an overview article Naming: \"Testing infrastructure in CI\" \u041e\u0440\u0438\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043d\u0430 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u043d\u0435 \u0440\u0435\u0448\u0430\u0435\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0437\u0430\u0434\u0430\u0447. \u042d\u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f. \u041e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438, \u043f\u043e\u044f\u0441\u043d\u044f\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0438 \u0438\u0441\u0442\u043e\u0440\u0438\u044e \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f \u0414\u0430\u0435\u0442 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u043c\u043d\u0435\u043d\u0438\u044f, \u043f\u043e\u044f\u0441\u043d\u044f\u0435\u0442 \u043c\u043e\u0442\u0438\u0432\u0430\u0446\u0438\u044e Reference # Analogy: an article in Wikipedia \u041e\u0440\u0438\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e: \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u0430\u043a \u0443\u0441\u0442\u0440\u043e\u0435\u043d\u043e, \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442. \u041e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 tutorial, how to guide: \u043d\u0435 \u0444\u043e\u043a\u0443\u0441\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c, \u0445\u043e\u0442\u044f \u0438 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f. \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0434\u0438\u043a\u0442\u043e\u0432\u0430\u043d\u0430 \u043a\u043e\u0434\u043e\u043c, \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u0435\u0433\u043e \u041e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u0438 \u0432 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043a\u0430\u043a \u043e\u043d\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442. \u041e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e \u043a\u0430\u043a \u0435\u0441\u0442\u044c, \u043d\u0435 \u0443\u0445\u043e\u0434\u0438\u0442 \u0432 \u0434\u0438\u0441\u043a\u0443\u0441\u0441\u0438\u0438, \u043c\u043d\u0435\u043d\u0438\u044f, \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438. \u0422\u0430\u043a\u0438\u0435 \u043e\u0442\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0448\u0430\u044e\u0442 \u043f\u043e\u043d\u044f\u0442\u044c \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442. Structure # \u0412\u0441\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 markdown \u0444\u0430\u0439\u043b\u043e\u0432 . \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u0430\u0439\u0442\u043e\u0432 MkDocs , \u0442\u0435\u043c\u0430 MkDocs material . Menu on the left # \u041c\u0435\u043d\u044e \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 docs/mkdocs.yml Page links # [licencse](license.md) - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0432 \u044d\u0442\u043e\u0439 \u0436\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 [licencse](../about/license.md) - \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 [licencse](https://choosealicense.com/licenses){target=_blank} - \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0432 \u043d\u043e\u0432\u043e\u0439 \u0432\u043a\u043b\u0430\u0434\u043a\u0435 Warning \u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f. \u041e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e, \u043d\u043e \u0441\u043b\u043e\u043c\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0434\u0435\u043f\u043b\u043e\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438. \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444: [licencse](#license) - \u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b [licencse](about.md#license) - \u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444 \u0432\u043d\u0443\u0442\u0440\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 (\u0441\u043c. slugify \u0432 mkdocs.yml) ## \u041e\u0442\u0447\u0435\u0442 \u0432 BI \u0431\u0443\u0434\u0435\u0442 \u0441\u0441\u044b\u043b\u043a\u043e\u0439 #otchet-v-bi \u041d\u043e \u0435\u0435 \u043c\u043e\u0436\u043d\u043e \u043a\u0430\u0441\u0442\u043e\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c: ## \u041e\u0442\u0447\u0435\u0442 \u0432 BI {#bi} \u0431\u0443\u0434\u0435\u0442 \u0441\u0441\u044b\u043b\u043a\u043e\u0439 #bi \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435: mkdocs internal links Internal links # The documentation is public but some links and services are not. In this case, define it clearly and in advance. To be consistent we use a snippet: --8<-- avito-disclaimer.md --8<-- Disclaimer The text below contains Avito specific details Also, you have to replace internal links by links.k.avito.ru shortener. It is available only in Avito. To get links statistics add + to it. Diagrams # Diagrams is a preferable way for schemes and processes. They are cheaper in maintenance. Text is the source of truth. You don't need an original image and can edit it in a text editor. Use mermaid code block: ```mermaid stateDiagram [*] --> A A --> B B --> [*] ``` stateDiagram [*] --> A A --> B B --> [*] Live editor Images # Images are good for illustrating an explanation. Use any public file storage for them. For example, a Github CDN: Hints # ??? \"Collapsed by default\" Here's some content. Nesting is working. ???+ \"Expanded\" Here's some content. Nesting is working. ??? success Content. ??? warning classes Content. ??? danger \"Danger!\" And more content again. Collapsed by default Here's some content. Nesting is working. Expanded Here's some content. Nesting is working. Success Content. Warning Content. Danger! And more content again. Tabs # === \"Tab 1\" First tab content === \"Tab 2\" Second tab content Tab 1 First tab content Tab 2 Second tab content Snippets # Snippets are partial pages that can be inserted into another pages. All custom snippets are in docs/snippets directory. Usage: --8<-- file name --8<-- Lists # Ordered vs Unordered lists # Only use ordered list for describing a series of steps to follow. Do: \ud83d\udc4d Run commands: 1. `cd dir` 1. `./prepare_data.sh` 1. `./publish_results.sh` Don't: \ud83d\udc4e There are two components in the system: 1. `Collector` 1. `Publisher` Language # Interaction with UI # Use bold text for describing menu items and > as separator. Open Preferences > Build, Execution, Deployment > Debugger Use exact words as shown in UI \u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u0440\u043c\u0438\u043d\u043e\u0432 # \u0412\u044b\u0434\u0435\u043b\u044f\u0439 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c ` \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0438\u043c\u0435\u043d\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0442.\u043f.: \u0414\u043e\u0431\u0430\u0432\u044c \u043f\u0440\u0435\u0444\u0438\u043a\u0441 Dagger \u0432 \u0438\u043c\u043f\u043e\u0440\u0442\u0430\u0445 \u043f\u0435\u0440\u0435\u0434 Component \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438 \u043c\u043e\u0434\u0443\u043b\u044c dagger \u0412\u0432\u0435\u0434\u0438 last \u0432 \u043f\u043e\u0438\u0441\u043a \u0414\u043e\u0431\u0430\u0432\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 syncAvito \u0432 \u0444\u0430\u0439\u043b properties.ini \u041d\u0435 \u043d\u0430\u0434\u043e \u0432\u044b\u0434\u0435\u043b\u044f\u0442\u044c \u0432\u0441\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439, \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u0438 \u0442.\u043f. \u042d\u0442\u043e \u043d\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0442\u0435\u043a\u0441\u0442, \u0435\u0433\u043e \u0442\u0440\u0443\u0434\u043d\u0435\u0435 \u0447\u0438\u0442\u0430\u0442\u044c: \u0414\u043b\u044f DI \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c Dagger \ud83d\udc4e Changing documentation # How to check changes locally # Run make docs . It will open documentation at localhost. You can edit markdown files on the fly. Changes out of this directory usually require a restart. How to upgrade MkDocs and theme # Change the version in a documentation image ; Publish the image by Build documentation docker configuration; Update a tag in ci/_environment.sh Checklist for upgrades: Search Markdown extensions : mermaid, ... See settings in mkdocs.yml. MkDocs troubleshooting","title":"Documentation"},{"location":"contributing/Documentation/#documentation","text":"If the documentation is not good enough, people will not use what you do.","title":"Documentation"},{"location":"contributing/Documentation/#style-guide","text":"","title":"Style guide"},{"location":"contributing/Documentation/#write-simply-and-to-the-point","text":"Documentation is intended to solve problems. Thus, it has to be simple and clear. We can recommend several definitive guides on writing in general: The Elements of Style - William Strunk Jr. \u041f\u0438\u0448\u0438, \u0441\u043e\u043a\u0440\u0430\u0449\u0430\u0439 ( glvrd.ru - online checker) Extra materials about technical writing: Jetbrains - \u041a\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u044b Microsoft Writing Style Guide GitLab documentation styleguide What nobody tells you about documentation","title":"Write simply and to the point"},{"location":"contributing/Documentation/#use-appropriate-format-for-the-problem","text":"There is no universal documentation. It needs to be structured around problem and a level of knowledge: Studying Working Practical steps Tutorial How-to guide Theoretical knowledge Explanation Reference It's ok to mix some types in one page: # Managing X Here goes short _explanation_ of X for new users. You can reference here to a detailed information. If I know this topic, I will skip it easily. ## Create a new X 1. Do ... <-- Short how-to guide 1. ... ## Move files to X Select ...","title":"Use appropriate format for the problem"},{"location":"contributing/Documentation/#tutorial","text":"Analogy: teaching a child how to cook Naming: Getting started with X Writing your first test Assist newcomers to get started Is learning-oriented Shows how to do in form of a lesson The tutorial declares a goal in the beginning. After it guides by a series of steps. Each step is: Easy to follow Robust and reliable Gives a positive feedback by an immediate result Has as minimum theory as possible Examples: Creating Web Applications with Flask","title":"Tutorial"},{"location":"contributing/Documentation/#how-to-guide","text":"Analogy: a recipe Naming: How to run tests in CI - \ud83d\udc4d Running tests - \ud83d\udc4e Tests in CI - \ud83d\udc4e \u041e\u0440\u0438\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u043a\u0430\u043a \u0440\u0435\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443. \u041a\u043b\u044e\u0447\u0435\u0432\u043e\u0435 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 tutorial: \u0443\u0436\u0435 \u0437\u043d\u0430\u043a\u043e\u043c\u044b \u0441 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u043c. \u041c\u043e\u0436\u0435\u0442 \u0430\u0434\u0440\u0435\u0441\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u043e\u0432\u0438\u0447\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0434\u0430\u0436\u0435 \u043d\u0435 \u0441\u0444\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u041d\u0435 \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438, \u043c\u043e\u0436\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0441\u044b\u043b\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438. \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442 \u0447\u0435\u0433\u043e \u0445\u043e\u0447\u0435\u0442 \u0434\u043e\u0441\u0442\u0438\u0447\u044c, \u043d\u043e \u043d\u0435 \u0437\u043d\u0430\u0435\u0442 \u043a\u0430\u043a. \u0428\u0430\u0433\u0438 \u043d\u0435 \u0442\u0430\u043a\u0438\u0435 \u043d\u0430\u0434\u0435\u0436\u043d\u044b\u0435 \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u043c\u044b\u0435, \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u0443\u0436\u0435 \u0437\u043d\u0430\u043a\u043e\u043c \u0441 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u043c. \u0428\u0430\u0433\u0438 \u0431\u043e\u043b\u0435\u0435 \u0433\u0438\u0431\u043a\u0438\u0435 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u043d\u043e \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u043c, \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u043e \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b.","title":"How-to guide"},{"location":"contributing/Documentation/#explanation","text":"Analogy: an overview article Naming: \"Testing infrastructure in CI\" \u041e\u0440\u0438\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043d\u0430 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u043d\u0435 \u0440\u0435\u0448\u0430\u0435\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0437\u0430\u0434\u0430\u0447. \u042d\u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f. \u041e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438, \u043f\u043e\u044f\u0441\u043d\u044f\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0438 \u0438\u0441\u0442\u043e\u0440\u0438\u044e \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f \u0414\u0430\u0435\u0442 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u043c\u043d\u0435\u043d\u0438\u044f, \u043f\u043e\u044f\u0441\u043d\u044f\u0435\u0442 \u043c\u043e\u0442\u0438\u0432\u0430\u0446\u0438\u044e","title":"Explanation"},{"location":"contributing/Documentation/#reference","text":"Analogy: an article in Wikipedia \u041e\u0440\u0438\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e: \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u0430\u043a \u0443\u0441\u0442\u0440\u043e\u0435\u043d\u043e, \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442. \u041e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 tutorial, how to guide: \u043d\u0435 \u0444\u043e\u043a\u0443\u0441\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c, \u0445\u043e\u0442\u044f \u0438 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f. \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0434\u0438\u043a\u0442\u043e\u0432\u0430\u043d\u0430 \u043a\u043e\u0434\u043e\u043c, \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u0435\u0433\u043e \u041e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u0438 \u0432 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043a\u0430\u043a \u043e\u043d\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442. \u041e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e \u043a\u0430\u043a \u0435\u0441\u0442\u044c, \u043d\u0435 \u0443\u0445\u043e\u0434\u0438\u0442 \u0432 \u0434\u0438\u0441\u043a\u0443\u0441\u0441\u0438\u0438, \u043c\u043d\u0435\u043d\u0438\u044f, \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438. \u0422\u0430\u043a\u0438\u0435 \u043e\u0442\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0448\u0430\u044e\u0442 \u043f\u043e\u043d\u044f\u0442\u044c \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.","title":"Reference"},{"location":"contributing/Documentation/#structure","text":"\u0412\u0441\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 markdown \u0444\u0430\u0439\u043b\u043e\u0432 . \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u0430\u0439\u0442\u043e\u0432 MkDocs , \u0442\u0435\u043c\u0430 MkDocs material .","title":"Structure"},{"location":"contributing/Documentation/#menu-on-the-left","text":"\u041c\u0435\u043d\u044e \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 docs/mkdocs.yml","title":"Menu on the left"},{"location":"contributing/Documentation/#page-links","text":"[licencse](license.md) - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0432 \u044d\u0442\u043e\u0439 \u0436\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 [licencse](../about/license.md) - \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 [licencse](https://choosealicense.com/licenses){target=_blank} - \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0432 \u043d\u043e\u0432\u043e\u0439 \u0432\u043a\u043b\u0430\u0434\u043a\u0435 Warning \u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f. \u041e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e, \u043d\u043e \u0441\u043b\u043e\u043c\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0434\u0435\u043f\u043b\u043e\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438. \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444: [licencse](#license) - \u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444 \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b [licencse](about.md#license) - \u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444 \u0432\u043d\u0443\u0442\u0440\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 (\u0441\u043c. slugify \u0432 mkdocs.yml) ## \u041e\u0442\u0447\u0435\u0442 \u0432 BI \u0431\u0443\u0434\u0435\u0442 \u0441\u0441\u044b\u043b\u043a\u043e\u0439 #otchet-v-bi \u041d\u043e \u0435\u0435 \u043c\u043e\u0436\u043d\u043e \u043a\u0430\u0441\u0442\u043e\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c: ## \u041e\u0442\u0447\u0435\u0442 \u0432 BI {#bi} \u0431\u0443\u0434\u0435\u0442 \u0441\u0441\u044b\u043b\u043a\u043e\u0439 #bi \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435: mkdocs internal links","title":"Page links"},{"location":"contributing/Documentation/#internal-links","text":"The documentation is public but some links and services are not. In this case, define it clearly and in advance. To be consistent we use a snippet: --8<-- avito-disclaimer.md --8<-- Disclaimer The text below contains Avito specific details Also, you have to replace internal links by links.k.avito.ru shortener. It is available only in Avito. To get links statistics add + to it.","title":"Internal links"},{"location":"contributing/Documentation/#diagrams","text":"Diagrams is a preferable way for schemes and processes. They are cheaper in maintenance. Text is the source of truth. You don't need an original image and can edit it in a text editor. Use mermaid code block: ```mermaid stateDiagram [*] --> A A --> B B --> [*] ``` stateDiagram [*] --> A A --> B B --> [*] Live editor","title":"Diagrams"},{"location":"contributing/Documentation/#images","text":"Images are good for illustrating an explanation. Use any public file storage for them. For example, a Github CDN:","title":"Images"},{"location":"contributing/Documentation/#hints","text":"??? \"Collapsed by default\" Here's some content. Nesting is working. ???+ \"Expanded\" Here's some content. Nesting is working. ??? success Content. ??? warning classes Content. ??? danger \"Danger!\" And more content again. Collapsed by default Here's some content. Nesting is working. Expanded Here's some content. Nesting is working. Success Content. Warning Content. Danger! And more content again.","title":"Hints"},{"location":"contributing/Documentation/#tabs","text":"=== \"Tab 1\" First tab content === \"Tab 2\" Second tab content Tab 1 First tab content Tab 2 Second tab content","title":"Tabs"},{"location":"contributing/Documentation/#snippets","text":"Snippets are partial pages that can be inserted into another pages. All custom snippets are in docs/snippets directory. Usage: --8<-- file name --8<--","title":"Snippets"},{"location":"contributing/Documentation/#lists","text":"","title":"Lists"},{"location":"contributing/Documentation/#ordered-vs-unordered-lists","text":"Only use ordered list for describing a series of steps to follow. Do: \ud83d\udc4d Run commands: 1. `cd dir` 1. `./prepare_data.sh` 1. `./publish_results.sh` Don't: \ud83d\udc4e There are two components in the system: 1. `Collector` 1. `Publisher`","title":"Ordered vs Unordered lists"},{"location":"contributing/Documentation/#language","text":"","title":"Language"},{"location":"contributing/Documentation/#interaction-with-ui","text":"Use bold text for describing menu items and > as separator. Open Preferences > Build, Execution, Deployment > Debugger Use exact words as shown in UI","title":"Interaction with UI"},{"location":"contributing/Documentation/#\u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435-\u0442\u0435\u0440\u043c\u0438\u043d\u043e\u0432","text":"\u0412\u044b\u0434\u0435\u043b\u044f\u0439 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c ` \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0438\u043c\u0435\u043d\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0442.\u043f.: \u0414\u043e\u0431\u0430\u0432\u044c \u043f\u0440\u0435\u0444\u0438\u043a\u0441 Dagger \u0432 \u0438\u043c\u043f\u043e\u0440\u0442\u0430\u0445 \u043f\u0435\u0440\u0435\u0434 Component \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438 \u043c\u043e\u0434\u0443\u043b\u044c dagger \u0412\u0432\u0435\u0434\u0438 last \u0432 \u043f\u043e\u0438\u0441\u043a \u0414\u043e\u0431\u0430\u0432\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 syncAvito \u0432 \u0444\u0430\u0439\u043b properties.ini \u041d\u0435 \u043d\u0430\u0434\u043e \u0432\u044b\u0434\u0435\u043b\u044f\u0442\u044c \u0432\u0441\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439, \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u0438 \u0442.\u043f. \u042d\u0442\u043e \u043d\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0442\u0435\u043a\u0441\u0442, \u0435\u0433\u043e \u0442\u0440\u0443\u0434\u043d\u0435\u0435 \u0447\u0438\u0442\u0430\u0442\u044c: \u0414\u043b\u044f DI \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c Dagger \ud83d\udc4e","title":"\u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u0440\u043c\u0438\u043d\u043e\u0432"},{"location":"contributing/Documentation/#changing-documentation","text":"","title":"Changing documentation"},{"location":"contributing/Documentation/#how-to-check-changes-locally","text":"Run make docs . It will open documentation at localhost. You can edit markdown files on the fly. Changes out of this directory usually require a restart.","title":"How to check changes locally"},{"location":"contributing/Documentation/#how-to-upgrade-mkdocs-and-theme","text":"Change the version in a documentation image ; Publish the image by Build documentation docker configuration; Update a tag in ci/_environment.sh Checklist for upgrades: Search Markdown extensions : mermaid, ... See settings in mkdocs.yml. MkDocs troubleshooting","title":"How to upgrade MkDocs and theme"},{"location":"contributing/GradlePlugins/","text":"Gradle plugins # How to start # Start with official documentation: Gradle plugin development tutorials Custom tasks Gradle team's slack: gradle-community.slack.com Working in IDE # IntelliJ IDEA is preferred but could not work if current Android Gradle Plugin is not supported yet. Known issues # (DynamicTest.displayName) displays incorrectly in IDE: #5975 IDE can't run Gradle test and creates Junit Run/Debug configuration instead. Different IDE versions use different ways to run tests. Check if you can use Gradle Test Runner for tests in Settings > Build, Execution, Deployment > Build Tools > Gradle > Runner . If not, create manually Gradle Run/Debug configuration. Testing # Isolating business-logic for unit-tests # You can isolate most of the logic from Gradle. Thus, it can be covered easily by unit-tests. abstract class FeatureTask @Inject constructor ( private val workerExecutor : WorkerExecutor ) : DefaultTask () { @TaskAction fun action () { val apiConfig = ... // get from the project workerExecutor . noIsolation (). submit ( FeatureWorkerAction :: class . java ) { parameters -> parameters . getIntegrationApiConfig (). set ( apiConfig ) } } } // This wrapper is needed only for Worker API // It can be started in another process. Thus, it has to prepare dependencies for the real work. abstract class FeatureWorkerAction : WorkAction < Parameters > { interface Parameters : WorkParameters { fun getIntegrationApiConfig (): Property < IntegrationApiConfig > } override fun execute () { val api = IntegrationApiConfig . Impl ( parameters . getIntegrationApiConfig (). get ()) val action = FeatureAction ( integrationApi = api ) action . execute () } } // This class is responsible for the real work. // The less it knows about Gradle, the better. class FeatureAction ( private val integrationApi : IntegrationApi ) { fun execute () { // Do the real work here } } // Now you can use simple mocks to test the action. @Test fun test () { val integrationApi = mock < IntegrationApi > () whenever ( integrationApi . foo ). thenReturn ( bar ()) val action = FeatureAction ( integrationApi ) < -- No Gradle abstractions here action . execute () assertThat (...) } Integration tests # Apply a convention plugin: plugins { id ( \"convention.gradle-testing\" ) } Place tests in src/gradleTest/kotlin For simple cases, you can create a dummy instance of Project by ProjectBuilder val project = ProjectBuilder . builder (). build () val task = project . tasks . register < TestTask > ( \"testTask\" ) {} task . get (). doStuff () When you need to run a real build, use Gradle Test Kit . See ready utilities in :test-project module. Debugging # Debugging # In GradleTestKit.kt fun gradlew() set withDebug(true) to be able to debug Gradle plugins. Disabled by default, because it breaks tests even without debugging when Android Gradle plugin is applied. See Gradle issue tracker about reasons. Run tests via CLI # ./gradlew test - runs unit tests ./gradlew gradleTest - runs Gradle integration tests Add --continue if you don't need default fail fast on first failure To run a single test, package or class add --tests package.class.method , but keep in mind that it works only for a single project Best practices # Feature toggles # The plugin may break and blocks the work of other developers. Making the plugin unpluggable gives you time for a fix. open class MyPlugin : Plugin < Project > { private val Project . pluginIsEnabled : Boolean get () = providers . gradleProperty ( \"avito.my_plugin.enabled\" ) . forUseAtConfigurationTime () . map { it . toBoolean () } . getOrElse ( true ) override fun apply ( project : Project ) { if ( ! project . pluginIsEnabled ) { project . logger . lifecycle ( \"My plugin is disabled\" ) return } } } Logging #","title":"Gradle plugins"},{"location":"contributing/GradlePlugins/#gradle-plugins","text":"","title":"Gradle plugins"},{"location":"contributing/GradlePlugins/#how-to-start","text":"Start with official documentation: Gradle plugin development tutorials Custom tasks Gradle team's slack: gradle-community.slack.com","title":"How to start"},{"location":"contributing/GradlePlugins/#working-in-ide","text":"IntelliJ IDEA is preferred but could not work if current Android Gradle Plugin is not supported yet.","title":"Working in IDE"},{"location":"contributing/GradlePlugins/#known-issues","text":"(DynamicTest.displayName) displays incorrectly in IDE: #5975 IDE can't run Gradle test and creates Junit Run/Debug configuration instead. Different IDE versions use different ways to run tests. Check if you can use Gradle Test Runner for tests in Settings > Build, Execution, Deployment > Build Tools > Gradle > Runner . If not, create manually Gradle Run/Debug configuration.","title":"Known issues"},{"location":"contributing/GradlePlugins/#testing","text":"","title":"Testing"},{"location":"contributing/GradlePlugins/#isolating-business-logic-for-unit-tests","text":"You can isolate most of the logic from Gradle. Thus, it can be covered easily by unit-tests. abstract class FeatureTask @Inject constructor ( private val workerExecutor : WorkerExecutor ) : DefaultTask () { @TaskAction fun action () { val apiConfig = ... // get from the project workerExecutor . noIsolation (). submit ( FeatureWorkerAction :: class . java ) { parameters -> parameters . getIntegrationApiConfig (). set ( apiConfig ) } } } // This wrapper is needed only for Worker API // It can be started in another process. Thus, it has to prepare dependencies for the real work. abstract class FeatureWorkerAction : WorkAction < Parameters > { interface Parameters : WorkParameters { fun getIntegrationApiConfig (): Property < IntegrationApiConfig > } override fun execute () { val api = IntegrationApiConfig . Impl ( parameters . getIntegrationApiConfig (). get ()) val action = FeatureAction ( integrationApi = api ) action . execute () } } // This class is responsible for the real work. // The less it knows about Gradle, the better. class FeatureAction ( private val integrationApi : IntegrationApi ) { fun execute () { // Do the real work here } } // Now you can use simple mocks to test the action. @Test fun test () { val integrationApi = mock < IntegrationApi > () whenever ( integrationApi . foo ). thenReturn ( bar ()) val action = FeatureAction ( integrationApi ) < -- No Gradle abstractions here action . execute () assertThat (...) }","title":"Isolating business-logic for unit-tests"},{"location":"contributing/GradlePlugins/#integration-tests","text":"Apply a convention plugin: plugins { id ( \"convention.gradle-testing\" ) } Place tests in src/gradleTest/kotlin For simple cases, you can create a dummy instance of Project by ProjectBuilder val project = ProjectBuilder . builder (). build () val task = project . tasks . register < TestTask > ( \"testTask\" ) {} task . get (). doStuff () When you need to run a real build, use Gradle Test Kit . See ready utilities in :test-project module.","title":"Integration tests"},{"location":"contributing/GradlePlugins/#debugging","text":"","title":"Debugging"},{"location":"contributing/GradlePlugins/#debugging_1","text":"In GradleTestKit.kt fun gradlew() set withDebug(true) to be able to debug Gradle plugins. Disabled by default, because it breaks tests even without debugging when Android Gradle plugin is applied. See Gradle issue tracker about reasons.","title":"Debugging"},{"location":"contributing/GradlePlugins/#run-tests-via-cli","text":"./gradlew test - runs unit tests ./gradlew gradleTest - runs Gradle integration tests Add --continue if you don't need default fail fast on first failure To run a single test, package or class add --tests package.class.method , but keep in mind that it works only for a single project","title":"Run tests via CLI"},{"location":"contributing/GradlePlugins/#best-practices","text":"","title":"Best practices"},{"location":"contributing/GradlePlugins/#feature-toggles","text":"The plugin may break and blocks the work of other developers. Making the plugin unpluggable gives you time for a fix. open class MyPlugin : Plugin < Project > { private val Project . pluginIsEnabled : Boolean get () = providers . gradleProperty ( \"avito.my_plugin.enabled\" ) . forUseAtConfigurationTime () . map { it . toBoolean () } . getOrElse ( true ) override fun apply ( project : Project ) { if ( ! project . pluginIsEnabled ) { project . logger . lifecycle ( \"My plugin is disabled\" ) return } } }","title":"Feature toggles"},{"location":"contributing/GradlePlugins/#logging","text":"","title":"Logging"},{"location":"contributing/HowToStart/","text":"How to start # Project structure # subprojects contains almost all of source code divided by project modules samples separate gradle project that includeBuild(\"subprojects\") to iterate on changes fast and provide samples ci/ and /*.sh - we follow IaC principle whenever possible. You can see docker images we use to abstract configuration of apps building and testing, as well as testing github project itself. docs/ - documentation you see right now and code to deploy it automatically. How we document Makefile # Take a look at ./Makefile for useful commands/shortcuts Build features to consider enabling # env COMMIT_CHECK=true to run optimal amount of CI checks on git pre-commit hook env CONFIG_CACHE=true to enable Gradle configuration cache for Makefile commands. You can also override it per command: make command CONFIG_CACHE=false . Avito employees only # Gradle remote cache for local builds artifactoryUrl property in <GRADLE_USER_HOME>/gradle.properties to download dependencies from in-house proxy","title":"How to start"},{"location":"contributing/HowToStart/#how-to-start","text":"","title":"How to start"},{"location":"contributing/HowToStart/#project-structure","text":"subprojects contains almost all of source code divided by project modules samples separate gradle project that includeBuild(\"subprojects\") to iterate on changes fast and provide samples ci/ and /*.sh - we follow IaC principle whenever possible. You can see docker images we use to abstract configuration of apps building and testing, as well as testing github project itself. docs/ - documentation you see right now and code to deploy it automatically. How we document","title":"Project structure"},{"location":"contributing/HowToStart/#makefile","text":"Take a look at ./Makefile for useful commands/shortcuts","title":"Makefile"},{"location":"contributing/HowToStart/#build-features-to-consider-enabling","text":"env COMMIT_CHECK=true to run optimal amount of CI checks on git pre-commit hook env CONFIG_CACHE=true to enable Gradle configuration cache for Makefile commands. You can also override it per command: make command CONFIG_CACHE=false .","title":"Build features to consider enabling"},{"location":"contributing/HowToStart/#avito-employees-only","text":"Gradle remote cache for local builds artifactoryUrl property in <GRADLE_USER_HOME>/gradle.properties to download dependencies from in-house proxy","title":"Avito employees only"},{"location":"contributing/Logging/","text":"Logging # We have common libs those are reused in both environments: Android and Gradle. So we need a logger is not dependent on the concrete environment. We've created com.avito.logger.Logger . It helps us to reuse code. Logging in Gradle # To obtain a logger for Gradle we create the GradleLoggerPlugin . It must be applied to the root project before others plugins dependent on it. You create LoggerFactory for a project or a task val projectLoggerFactory = GradleLoggerPlugin . getLoggerFactory ( project ) val taskLoggerFactory = GradleLoggerPlugin . getLoggerFactory ( task ) PrintlnLoggerHandler # Gradle uses lifecycle level by default, but to see info or debug level you have to set it for the whole Gradle run via --info or --debug , which made console output unreadable and build slow. There is an issue for that: gradle/#1010 Ability to set log level for specific task PrintlnLoggerHandler adds the ability to tune log level for avito plugins separately Logging in Android # To obtain a logger for Android create a LoggerFactory by LoggerFactoryBuilder Testing # StubLoggerFactory and StubLogger can be used in tests. StubLogger will write to stdout only during test runs from IDE.","title":"Logging"},{"location":"contributing/Logging/#logging","text":"We have common libs those are reused in both environments: Android and Gradle. So we need a logger is not dependent on the concrete environment. We've created com.avito.logger.Logger . It helps us to reuse code.","title":"Logging"},{"location":"contributing/Logging/#logging-in-gradle","text":"To obtain a logger for Gradle we create the GradleLoggerPlugin . It must be applied to the root project before others plugins dependent on it. You create LoggerFactory for a project or a task val projectLoggerFactory = GradleLoggerPlugin . getLoggerFactory ( project ) val taskLoggerFactory = GradleLoggerPlugin . getLoggerFactory ( task )","title":"Logging in Gradle"},{"location":"contributing/Logging/#printlnloggerhandler","text":"Gradle uses lifecycle level by default, but to see info or debug level you have to set it for the whole Gradle run via --info or --debug , which made console output unreadable and build slow. There is an issue for that: gradle/#1010 Ability to set log level for specific task PrintlnLoggerHandler adds the ability to tune log level for avito plugins separately","title":"PrintlnLoggerHandler"},{"location":"contributing/Logging/#logging-in-android","text":"To obtain a logger for Android create a LoggerFactory by LoggerFactoryBuilder","title":"Logging in Android"},{"location":"contributing/Logging/#testing","text":"StubLoggerFactory and StubLogger can be used in tests. StubLogger will write to stdout only during test runs from IDE.","title":"Testing"},{"location":"contributing/Networking/","text":"Networking # We use Okhttp sometimes with Retrofit for networking in Gradle plugins and Android libraries. Obtaining an OkHttpClient # Add dependency on http-client module: dependencies { implementation ( projects . subprojects . common . httpClient ) } Create an instance of HttpClientProvider val httpClientProvider = HttpClientProvider ( statsdSender , timeProvider ) Get the client: val httpClient = httpClientProvider . provide (). build () Method provide() returns OkHttpClient.Builder so you can configure it further Required tag # Obtained client needs some additional information to be able to gather required statistics. Every request should contain a tag of type RequestMetadata Warning Missing tag will lead to missing metrics for this api method / service Warning message could be found in logs Creating OkHttpRequest manually # Request . Builder () . url ( \"some url\" ) . tag ( RequestMetadata :: class . java , RequestMetadata ( \"some-service\" , \"some-method\" )) . build () Using Retrofit # interface SomeApi { @POST ( \"/\" ) fun someMethod ( @Body someBody : String , @Tag metadata : RequestMetadata = RequestMetadata ( \"some-service\" , \"some-method\" ) ): Call < Unit > }","title":"Networking"},{"location":"contributing/Networking/#networking","text":"We use Okhttp sometimes with Retrofit for networking in Gradle plugins and Android libraries.","title":"Networking"},{"location":"contributing/Networking/#obtaining-an-okhttpclient","text":"Add dependency on http-client module: dependencies { implementation ( projects . subprojects . common . httpClient ) } Create an instance of HttpClientProvider val httpClientProvider = HttpClientProvider ( statsdSender , timeProvider ) Get the client: val httpClient = httpClientProvider . provide (). build () Method provide() returns OkHttpClient.Builder so you can configure it further","title":"Obtaining an OkHttpClient"},{"location":"contributing/Networking/#required-tag","text":"Obtained client needs some additional information to be able to gather required statistics. Every request should contain a tag of type RequestMetadata Warning Missing tag will lead to missing metrics for this api method / service Warning message could be found in logs","title":"Required tag"},{"location":"contributing/Networking/#creating-okhttprequest-manually","text":"Request . Builder () . url ( \"some url\" ) . tag ( RequestMetadata :: class . java , RequestMetadata ( \"some-service\" , \"some-method\" )) . build ()","title":"Creating OkHttpRequest manually"},{"location":"contributing/Networking/#using-retrofit","text":"interface SomeApi { @POST ( \"/\" ) fun someMethod ( @Body someBody : String , @Tag metadata : RequestMetadata = RequestMetadata ( \"some-service\" , \"some-method\" ) ): Call < Unit > }","title":"Using Retrofit"},{"location":"contributing/Release/","text":"Releasing infrastructure # Disclaimer The text below contains Avito specific details We publish releases to Maven Central: com.avito.android . Publishing a new release # If you release for the first time Get an access to Sonatype Install Github CLI Check if diff against the last release contains any changes for users. If not, then probably there are no reasons to make a release. Check the current status of Nightly Avito integration build . If it is Failed you could release from previous Succeed commits or fix problems. Checkout a release branch with a name equals to projectVersion . For example, 2021.9 . This branch must be persistent. It is used for automation. Manually run Integration build on the release branch . Manually run Github publish configuration on the release branch . It will upload artifacts to a staging repository in Sonatype . So you can upload it in advance at any previous step and drop in case of problems. Release staging repository Make a PR to an internal avito repository with the new version of infrastructure. Checkout a new branch and make a PR to github repository: Change infraVersion property in the ./gradle.properties to the new version Bump up a projectVersion property in the ./gradle.properties to the next version Publish a release in Github: make draft_release version = <current release version> prev_version = <last release version> You need to have the Github cli . See also more details about Managing releases in a repository . Getting access to Sonatype # Create an account Create an issue referencing original one , asking for com.avito.android access Wait for confirmation Login to nexus to validate staging profile access Some additional info: Maven central publishing reference article Making a release in Sonatype # We publish a release through a temporary staging repository. If something goes wrong you can drop the repository to cancel the publication process. Open Staging repositories In a Content tab you can see uploaded artifacts. Close the repository: You don\u2019t need to provide a description here. In an Activity tab you can track progress. Release the repository. It will publish the contents to Maven Central Wait till new packages appear on Maven Central. It takes usually about 15-30 min. You can see them earlier in a repository manager or in public search before all of them will be available for download. Some additional info: Maven central publishing reference article Known issues # Can't find an artifact in an internal Artifactory # How it looks: Maven central has expected artifacts : pom, jar/aar, sources.jar Gradle can't find it in Artifactory Proxy > Could not resolve all artifacts for configuration ':classpath'. > Could not find com.avito.android:runner-shared:2020.16. Searched in the following locations: - file:/home/user/.m2/repository/ - http://<artifactory>/ Probable reasons: The file is not downloaded by Artifactory yet. Such files look in web UI like empty references: runner-shared-2020.16.jar-> - - - - (empty size) When you use a partially uploaded release, Artifactory might cache the wrong state. It seems that Artifactory caches it for some time, but we don't know exactly and how to invalidate it. Actions: Download this file manually in the browser or CLI. If the file downloaded successfully, refresh a local cache via --refresh-dependencies . If it didn't help, bump up a minor release version and make a new release. Local integration tests against Avito # Using mavenLocal # Run make publish_to_maven_local in github repository. Run integration tests of your choice in avito with specified test version Using compositeBuild # Run from Avito project directory ./gradlew <task> -Pavito.useCompositeBuild = true -Pavito.compositeBuildPath = <avito-android-infra/subprojects dir on your local machine> CI integration tests against Avito # Choose configuration from existed Run build. If you need to test unmerged code, select a custom build branch. You will see branches from both repositories: By default, build uses develop from github against develop from avito If you pick a branch from avito, it will run against develop on github If you pick a branch from github, it will run against develop on avito To build both projects of special branch, they should have the same name CI integration configurations # fast check configuration (internal) - pull request's builds integration check - currently, contains the biggest amount of integration checks nightly integration check - the same as integration check but uses more Android emulators Gradle configuration compatibility check - checks the configuration compatibility of our Gradle plugins with Avito repo","title":"Release"},{"location":"contributing/Release/#releasing-infrastructure","text":"Disclaimer The text below contains Avito specific details We publish releases to Maven Central: com.avito.android .","title":"Releasing infrastructure"},{"location":"contributing/Release/#publishing-a-new-release","text":"If you release for the first time Get an access to Sonatype Install Github CLI Check if diff against the last release contains any changes for users. If not, then probably there are no reasons to make a release. Check the current status of Nightly Avito integration build . If it is Failed you could release from previous Succeed commits or fix problems. Checkout a release branch with a name equals to projectVersion . For example, 2021.9 . This branch must be persistent. It is used for automation. Manually run Integration build on the release branch . Manually run Github publish configuration on the release branch . It will upload artifacts to a staging repository in Sonatype . So you can upload it in advance at any previous step and drop in case of problems. Release staging repository Make a PR to an internal avito repository with the new version of infrastructure. Checkout a new branch and make a PR to github repository: Change infraVersion property in the ./gradle.properties to the new version Bump up a projectVersion property in the ./gradle.properties to the next version Publish a release in Github: make draft_release version = <current release version> prev_version = <last release version> You need to have the Github cli . See also more details about Managing releases in a repository .","title":"Publishing a new release"},{"location":"contributing/Release/#getting-access-to-sonatype","text":"Create an account Create an issue referencing original one , asking for com.avito.android access Wait for confirmation Login to nexus to validate staging profile access Some additional info: Maven central publishing reference article","title":"Getting access to Sonatype"},{"location":"contributing/Release/#making-a-release-in-sonatype","text":"We publish a release through a temporary staging repository. If something goes wrong you can drop the repository to cancel the publication process. Open Staging repositories In a Content tab you can see uploaded artifacts. Close the repository: You don\u2019t need to provide a description here. In an Activity tab you can track progress. Release the repository. It will publish the contents to Maven Central Wait till new packages appear on Maven Central. It takes usually about 15-30 min. You can see them earlier in a repository manager or in public search before all of them will be available for download. Some additional info: Maven central publishing reference article","title":"Making a release in Sonatype"},{"location":"contributing/Release/#known-issues","text":"","title":"Known issues"},{"location":"contributing/Release/#cant-find-an-artifact-in-an-internal-artifactory","text":"How it looks: Maven central has expected artifacts : pom, jar/aar, sources.jar Gradle can't find it in Artifactory Proxy > Could not resolve all artifacts for configuration ':classpath'. > Could not find com.avito.android:runner-shared:2020.16. Searched in the following locations: - file:/home/user/.m2/repository/ - http://<artifactory>/ Probable reasons: The file is not downloaded by Artifactory yet. Such files look in web UI like empty references: runner-shared-2020.16.jar-> - - - - (empty size) When you use a partially uploaded release, Artifactory might cache the wrong state. It seems that Artifactory caches it for some time, but we don't know exactly and how to invalidate it. Actions: Download this file manually in the browser or CLI. If the file downloaded successfully, refresh a local cache via --refresh-dependencies . If it didn't help, bump up a minor release version and make a new release.","title":"Can't find an artifact in an internal Artifactory"},{"location":"contributing/Release/#local-integration-tests-against-avito","text":"","title":"Local integration tests against Avito"},{"location":"contributing/Release/#using-mavenlocal","text":"Run make publish_to_maven_local in github repository. Run integration tests of your choice in avito with specified test version","title":"Using mavenLocal"},{"location":"contributing/Release/#using-compositebuild","text":"Run from Avito project directory ./gradlew <task> -Pavito.useCompositeBuild = true -Pavito.compositeBuildPath = <avito-android-infra/subprojects dir on your local machine>","title":"Using compositeBuild"},{"location":"contributing/Release/#ci-integration-tests-against-avito","text":"Choose configuration from existed Run build. If you need to test unmerged code, select a custom build branch. You will see branches from both repositories: By default, build uses develop from github against develop from avito If you pick a branch from avito, it will run against develop on github If you pick a branch from github, it will run against develop on avito To build both projects of special branch, they should have the same name","title":"CI integration tests against Avito"},{"location":"contributing/Release/#ci-integration-configurations","text":"fast check configuration (internal) - pull request's builds integration check - currently, contains the biggest amount of integration checks nightly integration check - the same as integration check but uses more Android emulators Gradle configuration compatibility check - checks the configuration compatibility of our Gradle plugins with Avito repo","title":"CI integration configurations"},{"location":"contributing/Testing/","text":"Testing # Gradle plugins # See Gradle plugins / Testing Naming conventions # We use pattern: state under test - expected behaviour - [when] : @Test fun `success runs - returns number of passed test runs` () {} @Test fun `read instrumentation output - completes stream - with failed test` () {} @Test fun `create summary - marks test as matched - all tests passed` () {}","title":"Testing"},{"location":"contributing/Testing/#testing","text":"","title":"Testing"},{"location":"contributing/Testing/#gradle-plugins","text":"See Gradle plugins / Testing","title":"Gradle plugins"},{"location":"contributing/Testing/#naming-conventions","text":"We use pattern: state under test - expected behaviour - [when] : @Test fun `success runs - returns number of passed test runs` () {} @Test fun `read instrumentation output - completes stream - with failed test` () {} @Test fun `create summary - marks test as matched - all tests passed` () {}","title":"Naming conventions"},{"location":"contributing/internal/RemoteCache/","text":"How to enable remote cache for local work # Warning Available only for Avito employees via corporate network Add to ' GRADLE_USER_HOME /gradle.properties': avito.gradle.enterprise.url=<CHECK VALUE IN AVITO PROJECT PROPERTIES> Official docs","title":"Remote cache"},{"location":"contributing/internal/RemoteCache/#how-to-enable-remote-cache-for-local-work","text":"Warning Available only for Avito employees via corporate network Add to ' GRADLE_USER_HOME /gradle.properties': avito.gradle.enterprise.url=<CHECK VALUE IN AVITO PROJECT PROPERTIES> Official docs","title":"How to enable remote cache for local work"},{"location":"projects/BuildChecks/","text":"Build checks Gradle plugin # This plugin verifies common build problems with environment and project configuration. Getting started # Apply the plugin in a root build script or in an Android application module: plugins { id ( \"com.avito.android.build-checks\" ) } Setup plugins In the settings.gradle : pluginManagement { repositories { mavenCentral () } resolutionStrategy { eachPlugin { String pluginId = requested . id . id if ( pluginId . startsWith ( \"com.avito.android\" )) { def artifact = pluginId . replace ( \"com.avito.android.\" , \"\" ) useModule ( \"com.avito.android:$artifact:$avitoToolsVersion\" ) } } } } avitoToolsVersion could be exact version, or property in project's gradle.properties . The latest version could be found on project's release page . Kotlin build.gradle.kts buildChecks { androidSdk { compileSdkVersion = 29 revision = 5 } javaVersion { version = JavaVersion . VERSION_1_8 } } Groovy build.gradle buildChecks { androidSdk { compileSdkVersion = 29 revision = 5 } javaVersion { version = JavaVersion . VERSION_1_8 } uniqueRClasses { enabled = false } } That's all for a configuration. Run it manually to verify that it works: ./gradlew checkBuildEnvironment The plugin will run it automatically on every build. Configuration # Enable single check # Kotlin build.gradle.kts buildChecks { enableByDefault = false androidSdk { compileSdkVersion = 29 revision = 5 } } Groovy build.gradle buildChecks { enableByDefault = false androidSdk { compileSdkVersion = 29 revision = 5 } } Disable single check # Kotlin build.gradle.kts buildChecks { androidSdk { enabled = false } } Groovy build.gradle buildChecks { androidSdk { enabled = false } } Disable all checks # Kotlin build.gradle.kts buildChecks { enableByDefault = false } Groovy build.gradle buildChecks { enableByDefault = false } Disable plugin # To completely disable the plugin add a Gradle property: avito.build-checks.enabled = false Checks # Common build checks # These checks are available in a root project's buildscript. See also Android application checks . Java version # The Java version can influence the output of the Java compiler. It leads to Gradle remote cache misses due to Java version tracking . This check forces the same major version for all builds. Kotlin build.gradle.kts buildChecks { javaVersion { version = JavaVersion . VERSION_1_8 } } Groovy build.gradle buildChecks { javaVersion { version = JavaVersion . VERSION_1_8 } } Android SDK version # Android build tools uses android.jar ( $ANDROID_HOME/platforms/android-<compileSdkVersion>/android.jar ). The version can be specified only without a revision ( #117789774 ). Different revisions lead to Gradle remote cache misses. This check forces the same revision: Kotlin build.gradle.kts buildChecks { androidSdk { compileSdkVersion = 29 revision = 5 } } Groovy build.gradle buildChecks { androidSdk { compileSdkVersion = 29 revision = 5 } } macOS localhost lookup # On macOs java.net.InetAddress#getLocalHost() invocation can last up to 5 seconds instead of milliseconds ( thoeni.io/post/macos-sierra-java ). Gradle has a workaround but it works only inside Gradle's code. To diagnose the problem manually use thoeni/inetTester . To fix the problem use this workaround: Find your computer's name - Find your computer's name and network address Add it to /etc/hosts config: 127.0.0.1 localhost <your_host_name>.local ::1 localhost <your_host_name>.local Reboot the computer Check again by thoeni/inetTester This check automatically detects the issue: Kotlin build.gradle.kts buildChecks { macOSLocalhost { } } Groovy build.gradle buildChecks { macOSLocalhost { } } Gradle properties # Disclaimer The text below contains Avito specific details This check detects if you override Gradle project property by command-line. It sends mismatches to statsd. This information helps to see frequently changed propeties that can lead to remote cache misses. Kotlin build.gradle.kts buildChecks { gradleProperties { enabled = true // disabled by default } } Groovy build.gradle buildChecks { gradleProperties { enabled = true // disabled by default } } Android application checks # These checks are available in an Android application's buildscript. Each application can have specific settings. Unique R classes # If two Android libraries use the same package, their R classes will be merged. While merging, it can unexpectedly override resources ( #175316324 ). It happens even with android.namespacedRClass . To forbid merged R files use this check: Kotlin build.gradle.kts plugins { id ( \"com.avito.android.build-checks\" ) } buildChecks { uniqueRClasses { } // enabled by default } Groovy build.gradle plugins { id ( \"com.avito.android.build-checks\" ) } buildChecks { uniqueRClasses { } // enabled by default } See also android.uniquePackageNames check. In AGP 4.1 it provides similar but less complete contract. You can suppress errors for a specific package: build.gradle.kts buildChecks { uniqueRClasses { allowedNonUniquePackageNames . addAll ( listOf ( \"androidx.test\" , // Default from ManifestMerger #151171905 \"androidx.test.espresso\" , // Won't fix: https://issuetracker.google.com/issues/176002058 \"androidx.navigation.ktx\" // Fixed in 2.2.1: https://developer.android.com/jetpack/androidx/releases/navigation#2.2.1 )) } } Unique application resources # From Android library - considerations : The build tools merge resources from a library module with those of a dependent app module. If a given resource ID is defined in both modules, the resource from the app is used. If conflicts occur between multiple AAR libraries, then the resource from the library listed first in the dependencies list is used. uniqueAppResources ensures that resources in application are unique and won't be overridden implicitly. Kotlin build.gradle.kts Root module: plugins { id ( \"com.avito.android.impact\" ) } Application module: plugins { id ( \"com.avito.android.build-checks\" ) } buildChecks { uniqueAppResources {} // disabled by default } Groovy build.gradle Root module: plugins { id ( \"com.avito.android.impact\" ) } Application module: plugins { id ( \"com.avito.android.build-checks\" ) } buildChecks { uniqueAppResources {} // disabled by default } To avoid resource conflicts, consider using a prefix ( android.resourcePrefix ) or other consistent naming scheme. Ignoring duplicates # buildChecks { uniqueAppResources { // Resource types: string, dimen, bool, layout, drawable, ... ignoredResourceTypes . add ( \"string\" ) // Specific resources ignoredResource ( \"string\" , \"title\" ) ignoredResource ( \"dimen\" , \"max_height\" ) } } Known issues # Requires impact analysis that slows project configuration Disabled by default due to possible false positive cases. Usually, it requires to configure ignored resources. Don't compare values, only resource identifiers. Reported duplicates can have the same content. Detects only project modules without binary dependencies. Don't know how to deal with massive false positive duplicates for widely used libraries (androidx and similar ones). Some resource types are not supported because the issue is not confirmed for them. These are id , attr , styleable .","title":"Build checks"},{"location":"projects/BuildChecks/#build-checks-gradle-plugin","text":"This plugin verifies common build problems with environment and project configuration.","title":"Build checks Gradle plugin"},{"location":"projects/BuildChecks/#getting-started","text":"Apply the plugin in a root build script or in an Android application module: plugins { id ( \"com.avito.android.build-checks\" ) } Setup plugins In the settings.gradle : pluginManagement { repositories { mavenCentral () } resolutionStrategy { eachPlugin { String pluginId = requested . id . id if ( pluginId . startsWith ( \"com.avito.android\" )) { def artifact = pluginId . replace ( \"com.avito.android.\" , \"\" ) useModule ( \"com.avito.android:$artifact:$avitoToolsVersion\" ) } } } } avitoToolsVersion could be exact version, or property in project's gradle.properties . The latest version could be found on project's release page . Kotlin build.gradle.kts buildChecks { androidSdk { compileSdkVersion = 29 revision = 5 } javaVersion { version = JavaVersion . VERSION_1_8 } } Groovy build.gradle buildChecks { androidSdk { compileSdkVersion = 29 revision = 5 } javaVersion { version = JavaVersion . VERSION_1_8 } uniqueRClasses { enabled = false } } That's all for a configuration. Run it manually to verify that it works: ./gradlew checkBuildEnvironment The plugin will run it automatically on every build.","title":"Getting started"},{"location":"projects/BuildChecks/#configuration","text":"","title":"Configuration"},{"location":"projects/BuildChecks/#enable-single-check","text":"Kotlin build.gradle.kts buildChecks { enableByDefault = false androidSdk { compileSdkVersion = 29 revision = 5 } } Groovy build.gradle buildChecks { enableByDefault = false androidSdk { compileSdkVersion = 29 revision = 5 } }","title":"Enable single check"},{"location":"projects/BuildChecks/#disable-single-check","text":"Kotlin build.gradle.kts buildChecks { androidSdk { enabled = false } } Groovy build.gradle buildChecks { androidSdk { enabled = false } }","title":"Disable single check"},{"location":"projects/BuildChecks/#disable-all-checks","text":"Kotlin build.gradle.kts buildChecks { enableByDefault = false } Groovy build.gradle buildChecks { enableByDefault = false }","title":"Disable all checks"},{"location":"projects/BuildChecks/#disable-plugin","text":"To completely disable the plugin add a Gradle property: avito.build-checks.enabled = false","title":"Disable plugin"},{"location":"projects/BuildChecks/#checks","text":"","title":"Checks"},{"location":"projects/BuildChecks/#common-build-checks","text":"These checks are available in a root project's buildscript. See also Android application checks .","title":"Common build checks"},{"location":"projects/BuildChecks/#java-version","text":"The Java version can influence the output of the Java compiler. It leads to Gradle remote cache misses due to Java version tracking . This check forces the same major version for all builds. Kotlin build.gradle.kts buildChecks { javaVersion { version = JavaVersion . VERSION_1_8 } } Groovy build.gradle buildChecks { javaVersion { version = JavaVersion . VERSION_1_8 } }","title":"Java version"},{"location":"projects/BuildChecks/#android-sdk-version","text":"Android build tools uses android.jar ( $ANDROID_HOME/platforms/android-<compileSdkVersion>/android.jar ). The version can be specified only without a revision ( #117789774 ). Different revisions lead to Gradle remote cache misses. This check forces the same revision: Kotlin build.gradle.kts buildChecks { androidSdk { compileSdkVersion = 29 revision = 5 } } Groovy build.gradle buildChecks { androidSdk { compileSdkVersion = 29 revision = 5 } }","title":"Android SDK version"},{"location":"projects/BuildChecks/#macos-localhost-lookup","text":"On macOs java.net.InetAddress#getLocalHost() invocation can last up to 5 seconds instead of milliseconds ( thoeni.io/post/macos-sierra-java ). Gradle has a workaround but it works only inside Gradle's code. To diagnose the problem manually use thoeni/inetTester . To fix the problem use this workaround: Find your computer's name - Find your computer's name and network address Add it to /etc/hosts config: 127.0.0.1 localhost <your_host_name>.local ::1 localhost <your_host_name>.local Reboot the computer Check again by thoeni/inetTester This check automatically detects the issue: Kotlin build.gradle.kts buildChecks { macOSLocalhost { } } Groovy build.gradle buildChecks { macOSLocalhost { } }","title":"macOS localhost lookup"},{"location":"projects/BuildChecks/#gradle-properties","text":"Disclaimer The text below contains Avito specific details This check detects if you override Gradle project property by command-line. It sends mismatches to statsd. This information helps to see frequently changed propeties that can lead to remote cache misses. Kotlin build.gradle.kts buildChecks { gradleProperties { enabled = true // disabled by default } } Groovy build.gradle buildChecks { gradleProperties { enabled = true // disabled by default } }","title":"Gradle properties"},{"location":"projects/BuildChecks/#android-application-checks","text":"These checks are available in an Android application's buildscript. Each application can have specific settings.","title":"Android application checks"},{"location":"projects/BuildChecks/#unique-r-classes","text":"If two Android libraries use the same package, their R classes will be merged. While merging, it can unexpectedly override resources ( #175316324 ). It happens even with android.namespacedRClass . To forbid merged R files use this check: Kotlin build.gradle.kts plugins { id ( \"com.avito.android.build-checks\" ) } buildChecks { uniqueRClasses { } // enabled by default } Groovy build.gradle plugins { id ( \"com.avito.android.build-checks\" ) } buildChecks { uniqueRClasses { } // enabled by default } See also android.uniquePackageNames check. In AGP 4.1 it provides similar but less complete contract. You can suppress errors for a specific package: build.gradle.kts buildChecks { uniqueRClasses { allowedNonUniquePackageNames . addAll ( listOf ( \"androidx.test\" , // Default from ManifestMerger #151171905 \"androidx.test.espresso\" , // Won't fix: https://issuetracker.google.com/issues/176002058 \"androidx.navigation.ktx\" // Fixed in 2.2.1: https://developer.android.com/jetpack/androidx/releases/navigation#2.2.1 )) } }","title":"Unique R classes"},{"location":"projects/BuildChecks/#unique-application-resources","text":"From Android library - considerations : The build tools merge resources from a library module with those of a dependent app module. If a given resource ID is defined in both modules, the resource from the app is used. If conflicts occur between multiple AAR libraries, then the resource from the library listed first in the dependencies list is used. uniqueAppResources ensures that resources in application are unique and won't be overridden implicitly. Kotlin build.gradle.kts Root module: plugins { id ( \"com.avito.android.impact\" ) } Application module: plugins { id ( \"com.avito.android.build-checks\" ) } buildChecks { uniqueAppResources {} // disabled by default } Groovy build.gradle Root module: plugins { id ( \"com.avito.android.impact\" ) } Application module: plugins { id ( \"com.avito.android.build-checks\" ) } buildChecks { uniqueAppResources {} // disabled by default } To avoid resource conflicts, consider using a prefix ( android.resourcePrefix ) or other consistent naming scheme.","title":"Unique application resources"},{"location":"projects/BuildChecks/#ignoring-duplicates","text":"buildChecks { uniqueAppResources { // Resource types: string, dimen, bool, layout, drawable, ... ignoredResourceTypes . add ( \"string\" ) // Specific resources ignoredResource ( \"string\" , \"title\" ) ignoredResource ( \"dimen\" , \"max_height\" ) } }","title":"Ignoring duplicates"},{"location":"projects/BuildChecks/#known-issues","text":"Requires impact analysis that slows project configuration Disabled by default due to possible false positive cases. Usually, it requires to configure ignored resources. Don't compare values, only resource identifiers. Reported duplicates can have the same content. Detects only project modules without binary dependencies. Don't know how to deal with massive false positive duplicates for widely used libraries (androidx and similar ones). Some resource types are not supported because the issue is not confirmed for them. These are id , attr , styleable .","title":"Known issues"},{"location":"projects/BuildProperties/","text":"Build properties Gradle plugin # Sometimes you need to inspect information about the current build in your app code. The conventional way is to use custom fields in a BuildConfig or resource values. android { buildTypes { release { buildConfigField ( \"String\" , \"GIT_COMMIT\" , \"\\\"${commit}\\\"\" ) resValue ( \"string\" , \"git_commit\" , \"${commit}\" ) } debug { // To avoid rebuilding buildConfigField ( \"String\" , \"GIT_COMMIT\" , \"\\\"_\\\"\" ) resValue ( \"string\" , \"git_commit\" , \"_\" ) } } } BuildConfig and R classes are used to compile the code. Any changes harm incremental compilation and build caching. This is a known problem: unstable task inputs . To mitigate this issue the plugin uses assets to store properties. This approach is less harmful for incremental compilation and build caching. Getting started # 1. Apply the plugin in the Android module's build script # plugins { id ( \"com.avito.android.build-properties\" ) } Setup plugins In the settings.gradle : pluginManagement { repositories { mavenCentral () } resolutionStrategy { eachPlugin { String pluginId = requested . id . id if ( pluginId . startsWith ( \"com.avito.android\" )) { def artifact = pluginId . replace ( \"com.avito.android.\" , \"\" ) useModule ( \"com.avito.android:$artifact:$avitoToolsVersion\" ) } } } } avitoToolsVersion could be exact version, or property in project's gradle.properties . The latest version could be found on project's release page . 2. Define properties in a build script # Kotlin build.gradle.kts buildProperties { buildProperty ( \"GIT_COMMIT\" , commit ) } Groovy build.gradle buildProperties { buildProperty ( \"GIT_COMMIT\" , commit ) } 3. Add auto-generated file to the .gitignore config # Content of this file depends on the build. It's no use to store it in VCS. build-info.properties 4. Read properties in the code # val properties = Properties () context . assets . open ( \"build-info.properties\" ). use { properties . load ( it ) } val gitCommit = properties . getProperty ( \"GIT_COMMIT\" )","title":"Build properties"},{"location":"projects/BuildProperties/#build-properties-gradle-plugin","text":"Sometimes you need to inspect information about the current build in your app code. The conventional way is to use custom fields in a BuildConfig or resource values. android { buildTypes { release { buildConfigField ( \"String\" , \"GIT_COMMIT\" , \"\\\"${commit}\\\"\" ) resValue ( \"string\" , \"git_commit\" , \"${commit}\" ) } debug { // To avoid rebuilding buildConfigField ( \"String\" , \"GIT_COMMIT\" , \"\\\"_\\\"\" ) resValue ( \"string\" , \"git_commit\" , \"_\" ) } } } BuildConfig and R classes are used to compile the code. Any changes harm incremental compilation and build caching. This is a known problem: unstable task inputs . To mitigate this issue the plugin uses assets to store properties. This approach is less harmful for incremental compilation and build caching.","title":"Build properties Gradle plugin"},{"location":"projects/BuildProperties/#getting-started","text":"","title":"Getting started"},{"location":"projects/BuildProperties/#1-apply-the-plugin-in-the-android-modules-build-script","text":"plugins { id ( \"com.avito.android.build-properties\" ) } Setup plugins In the settings.gradle : pluginManagement { repositories { mavenCentral () } resolutionStrategy { eachPlugin { String pluginId = requested . id . id if ( pluginId . startsWith ( \"com.avito.android\" )) { def artifact = pluginId . replace ( \"com.avito.android.\" , \"\" ) useModule ( \"com.avito.android:$artifact:$avitoToolsVersion\" ) } } } } avitoToolsVersion could be exact version, or property in project's gradle.properties . The latest version could be found on project's release page .","title":"1. Apply the plugin in the Android module's build script"},{"location":"projects/BuildProperties/#2-define-properties-in-a-build-script","text":"Kotlin build.gradle.kts buildProperties { buildProperty ( \"GIT_COMMIT\" , commit ) } Groovy build.gradle buildProperties { buildProperty ( \"GIT_COMMIT\" , commit ) }","title":"2. Define properties in a build script"},{"location":"projects/BuildProperties/#3-add-auto-generated-file-to-the-gitignore-config","text":"Content of this file depends on the build. It's no use to store it in VCS. build-info.properties","title":"3. Add auto-generated file to the .gitignore config"},{"location":"projects/BuildProperties/#4-read-properties-in-the-code","text":"val properties = Properties () context . assets . open ( \"build-info.properties\" ). use { properties . load ( it ) } val gitCommit = properties . getProperty ( \"GIT_COMMIT\" )","title":"4. Read properties in the code"},{"location":"projects/BuildTrace/","text":"Build trace Gradle plugin # This plugin is a primitive analog of Gradle build scan . Use it if you can't use a build scan for any reason. This plugin collects tasks execution time in a trace event format. Getting started # Apply the plugin in the root buildscript: plugins { id ( \"com.avito.android.build-trace\" ) } buildTrace { enabled . set ( true ) } Setup plugins In the settings.gradle : pluginManagement { repositories { mavenCentral () } resolutionStrategy { eachPlugin { String pluginId = requested . id . id if ( pluginId . startsWith ( \"com.avito.android\" )) { def artifact = pluginId . replace ( \"com.avito.android.\" , \"\" ) useModule ( \"com.avito.android:$artifact:$avitoToolsVersion\" ) } } } } avitoToolsVersion could be exact version, or property in project's gradle.properties . The latest version could be found on project's release page . Run a build. You will get a message in a log: Build trace: <path to the project>/outputs/build-trace/build.trace Inspecting a trace # The trace file can be opened by multiple tools. Chrome tracing chrome://tracing This is a legacy viewer. Use WASD keys and search field for navigation. Perfetto This is a modern alternative for trace files. Here you can also make analytical queries by SQL : -- Slowest tasks SELECT slice . name AS TASK_PATH , slice . dur / 1000000 AS DURATION_MS FROM slice ORDER BY slice . dur DESC Critical path # To understand the critical path better see critical path . Tasks on this path are highlighted in a trace . You can find them by query: SELECT slice . name AS TASK_PATH , slice . ts / 1000000 AS START_MS , slice . dur / 1000000 AS DURATION_MS FROM slice JOIN args ON slice . arg_set_id = args . arg_set_id WHERE args . flat_KEY = \"args.CRITICAL_PATH\" ORDER BY slice . ts ASC Known issues # Tasks' completion time is long after a real time ( #8630 ). In a trace it looks like a task is completed right after the another from the same module.","title":"Build trace"},{"location":"projects/BuildTrace/#build-trace-gradle-plugin","text":"This plugin is a primitive analog of Gradle build scan . Use it if you can't use a build scan for any reason. This plugin collects tasks execution time in a trace event format.","title":"Build trace Gradle plugin"},{"location":"projects/BuildTrace/#getting-started","text":"Apply the plugin in the root buildscript: plugins { id ( \"com.avito.android.build-trace\" ) } buildTrace { enabled . set ( true ) } Setup plugins In the settings.gradle : pluginManagement { repositories { mavenCentral () } resolutionStrategy { eachPlugin { String pluginId = requested . id . id if ( pluginId . startsWith ( \"com.avito.android\" )) { def artifact = pluginId . replace ( \"com.avito.android.\" , \"\" ) useModule ( \"com.avito.android:$artifact:$avitoToolsVersion\" ) } } } } avitoToolsVersion could be exact version, or property in project's gradle.properties . The latest version could be found on project's release page . Run a build. You will get a message in a log: Build trace: <path to the project>/outputs/build-trace/build.trace","title":"Getting started"},{"location":"projects/BuildTrace/#inspecting-a-trace","text":"The trace file can be opened by multiple tools. Chrome tracing chrome://tracing This is a legacy viewer. Use WASD keys and search field for navigation. Perfetto This is a modern alternative for trace files. Here you can also make analytical queries by SQL : -- Slowest tasks SELECT slice . name AS TASK_PATH , slice . dur / 1000000 AS DURATION_MS FROM slice ORDER BY slice . dur DESC","title":"Inspecting a trace"},{"location":"projects/BuildTrace/#critical-path","text":"To understand the critical path better see critical path . Tasks on this path are highlighted in a trace . You can find them by query: SELECT slice . name AS TASK_PATH , slice . ts / 1000000 AS START_MS , slice . dur / 1000000 AS DURATION_MS FROM slice JOIN args ON slice . arg_set_id = args . arg_set_id WHERE args . flat_KEY = \"args.CRITICAL_PATH\" ORDER BY slice . ts ASC","title":"Critical path"},{"location":"projects/BuildTrace/#known-issues","text":"Tasks' completion time is long after a real time ( #8630 ). In a trace it looks like a task is completed right after the another from the same module.","title":"Known issues"},{"location":"projects/internal/BuildMetrics/","text":"Build metrics # Warning This plugin is internal and not recommended to use. See alternatives: Gradle Enterprise , Talaiot Configuring # Disabling plugin # Project property avito.build.metrics.enabled=false Metrics # All metrics can use common placeholders in prefix: Namespace: statsd prefix from avito.stats.namespace property Environment: ci | local | mirakle | _ (unknown) Node: git username for local builds, hostname for CI builds Build status: success | failure They will be referred in docs as <placeholder> . Build cache metrics # Http build cache errors: <namespace>.<environment>.<node>.build.cache.errors.[load|store].<http status code> : errors counter Remote cache statistics: <namespace>.<environment>.<node>.build.cache.remote.[hit|miss] : remote cache operations count by environments. Shows count of cacheable tasks that were requested from the remote cache. This is the same as Performance | Build cache | Remote cache | Operations | HitMiss in build scan. Common build metrics # <namespace>.<environment>.<node>.id.<build status>.init_configuration.total (time in ms): initialization with configuration time <namespace>.<environment>.<node>.id.<build status>.build-time.total (time in ms): total build time Tasks metrics # <namespace>.<environment>.<node>.build.tasks.cumulative.any (time in ms): cumulative time of all tasks Slowest tasks # These metrics give different aggregates for tasks to highlight the slowest ones. <namespace>.<environment>.<node>.build.tasks.slow.task.<module>.<task type> (time in ms): top slowest tasks <namespace>.<environment>.<node>.build.tasks.slow.type.<task type> (time in ms): cumulative time of top slowest task types <namespace>.<environment>.<node>.build.tasks.slow.module.<module> (time in ms): cumulative time of tasks in top slowest modules Example: graph LR lib_KotlinCompile(:lib:compileKotlin - 2s) --> lib_bundleAar(:lib:bundleAar - 1s) lib_KotlinCompile --> app_KotlinCompile(:app:compileKotlin - 3s) app_KotlinCompile --> app_bundleAar(:app:bundleAar - 1s) lib_bundleAar --> app_bundleAar .tasks.cumulative.any : 7s .tasks.slow.task.app.KotlinCompile : 3s .tasks.slow.type.KotlinCompile : 5s .tasks.slow.module.app : 4s Critical path # These metrics describe a critical path. To understand the critical path better see a visualization in a build trace . <namespace>.<environment>.<node>.build.tasks.critical.task.<module>.<task type> (time in ms): tasks in the critical path Specific build events # <namespace>.<environment>.<node>.id.<build status>.app-build.<module path>.<task name>.finish (time in ms): elapsed time from build start till Android app build task finished","title":"Build metrics"},{"location":"projects/internal/BuildMetrics/#build-metrics","text":"Warning This plugin is internal and not recommended to use. See alternatives: Gradle Enterprise , Talaiot","title":"Build metrics"},{"location":"projects/internal/BuildMetrics/#configuring","text":"","title":"Configuring"},{"location":"projects/internal/BuildMetrics/#disabling-plugin","text":"Project property avito.build.metrics.enabled=false","title":"Disabling plugin"},{"location":"projects/internal/BuildMetrics/#metrics","text":"All metrics can use common placeholders in prefix: Namespace: statsd prefix from avito.stats.namespace property Environment: ci | local | mirakle | _ (unknown) Node: git username for local builds, hostname for CI builds Build status: success | failure They will be referred in docs as <placeholder> .","title":"Metrics"},{"location":"projects/internal/BuildMetrics/#build-cache-metrics","text":"Http build cache errors: <namespace>.<environment>.<node>.build.cache.errors.[load|store].<http status code> : errors counter Remote cache statistics: <namespace>.<environment>.<node>.build.cache.remote.[hit|miss] : remote cache operations count by environments. Shows count of cacheable tasks that were requested from the remote cache. This is the same as Performance | Build cache | Remote cache | Operations | HitMiss in build scan.","title":"Build cache metrics"},{"location":"projects/internal/BuildMetrics/#common-build-metrics","text":"<namespace>.<environment>.<node>.id.<build status>.init_configuration.total (time in ms): initialization with configuration time <namespace>.<environment>.<node>.id.<build status>.build-time.total (time in ms): total build time","title":"Common build metrics"},{"location":"projects/internal/BuildMetrics/#tasks-metrics","text":"<namespace>.<environment>.<node>.build.tasks.cumulative.any (time in ms): cumulative time of all tasks","title":"Tasks metrics"},{"location":"projects/internal/BuildMetrics/#slowest-tasks","text":"These metrics give different aggregates for tasks to highlight the slowest ones. <namespace>.<environment>.<node>.build.tasks.slow.task.<module>.<task type> (time in ms): top slowest tasks <namespace>.<environment>.<node>.build.tasks.slow.type.<task type> (time in ms): cumulative time of top slowest task types <namespace>.<environment>.<node>.build.tasks.slow.module.<module> (time in ms): cumulative time of tasks in top slowest modules Example: graph LR lib_KotlinCompile(:lib:compileKotlin - 2s) --> lib_bundleAar(:lib:bundleAar - 1s) lib_KotlinCompile --> app_KotlinCompile(:app:compileKotlin - 3s) app_KotlinCompile --> app_bundleAar(:app:bundleAar - 1s) lib_bundleAar --> app_bundleAar .tasks.cumulative.any : 7s .tasks.slow.task.app.KotlinCompile : 3s .tasks.slow.type.KotlinCompile : 5s .tasks.slow.module.app : 4s","title":"Slowest tasks"},{"location":"projects/internal/BuildMetrics/#critical-path","text":"These metrics describe a critical path. To understand the critical path better see a visualization in a build trace . <namespace>.<environment>.<node>.build.tasks.critical.task.<module>.<task type> (time in ms): tasks in the critical path","title":"Critical path"},{"location":"projects/internal/BuildMetrics/#specific-build-events","text":"<namespace>.<environment>.<node>.id.<build status>.app-build.<module path>.<task name>.finish (time in ms): elapsed time from build start till Android app build task finished","title":"Specific build events"},{"location":"projects/internal/CiSteps/","text":"CI steps plugin # Warning Plugin wasn't tested outside Avito yet, so expect difficulties, or even blockers. However, if you interested, please contact us. Plugin creates chains of tasks for CI, encapsulating it under single gradle task. Getting started # Apply the plugin in the app's build.gradle file: plugins { id ( \"com.avito.android.cd\" ) } The plugin can be applied to a root project or any module. Setup plugins In the settings.gradle : pluginManagement { repositories { mavenCentral () } resolutionStrategy { eachPlugin { String pluginId = requested . id . id if ( pluginId . startsWith ( \"com.avito.android\" )) { def artifact = pluginId . replace ( \"com.avito.android.\" , \"\" ) useModule ( \"com.avito.android:$artifact:$avitoToolsVersion\" ) } } } } avitoToolsVersion could be exact version, or property in project's gradle.properties . The latest version could be found on project's release page . Builds # First, name your chain: Kotlin builds { register ( \"myChain\" ) { //optional description for generated task taskDescription . set ( \"This chain does something useful\" ) } } Groovy builds { myChain { //optional description for generated task taskDescription . set ( \"This chain does something useful\" ) } } Avito example chains # localCheck - compilation checks for local run prCheck - as fast as possible checks for Pull Request fullCheck - as full as possible checks to be run after merges, non-blocking, could be slow release - chain to release our app Steps # Step is a declaration to run some logic. It works inside a chain: Kotlin build { register ( \"prCheck\" ) { // <--- chain unitTests {} // <--- step uiTests {} //optional description for generated task taskDescription . set ( \"This chain does something useful\" ) } } Groovy build { fastCheck { // <--- chain unitTests {} // <--- step uiTests {} //optional description for generated task taskDescription . set ( \"This chain does something useful\" ) } } Now when you invoke ./gradlew fastCheck gradle will run unitTests, uiTests of corresponding project Built-in steps # UI tests # Runs instrumentation tests. Kotlin uiTests { configurations ( \"configurationName\" ) // list of instrumentation configuration to depends on sendStatistics = false // by default suppressFailures = false // by default useImpactAnalysis = true // by default suppressFlaky = false // by default. [\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0434\u0435\u043d\u0438\u0439 FlakyTest](../test/FlakyAnnotation.md). } Groovy uiTests { configurations = [ \"configurationName\" ] // list of instrumentation configuration to depends on sendStatistics = false // by default suppressFailures = false // by default useImpactAnalysis = true // by default suppressFlaky = false // by default. [\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0434\u0435\u043d\u0438\u0439 FlakyTest](../test/FlakyAnnotation.md). } Compile UI tests # Compile instrumentation tests. It is helpful in local development. Kotlin compileUiTests {} Groovy compileUiTests {} Unit tests # Run unit tests. Kotlin unitTests {} Groovy unitTests {} Upload to QApps # Disclaimer The text below contains Avito specific details Upload artifacts to QApps (internal system) Kotlin artifacts { apk ( \"debugApk\" , ...) } uploadToQapps { artifacts = setOf ( \"debugApk\" ) } Groovy artifacts { apk ( \"debugApk\" , ...) } uploadToQapps { artifacts = [ \"debugApk\" ] } Upload to Artifactory # Upload artifacts to Artifactory. Kotlin artifacts { file ( \"myReport\" , \" ${ project . buildDir } /reports/my_report.json\" ) } uploadToArtifactory { artifacts = setOf ( \"myReport\" ) } Groovy artifacts { file ( \"myReport\" , \"${project.buildDir}/reports/my_report.json\" ) } uploadToArtifactory { artifacts = [ \"myReport\" ] } Upload to Prosector # Disclaimer The text below contains Avito specific details Upload artifacts to Prosector (internal) . Kotlin artifacts { apk ( \"debugApk\" , ...) } uploadToProsector { artifacts = setOf ( \"debugApk\" ) } Groovy artifacts { apk ( \"debugApk\" , ...) } uploadToProsector { artifacts = [ \"debugApk\" ] } Upload build results # Disclaimer The text below contains Avito specific details Upload all build results to a deploy service. Kotlin uploadBuildResult { uiTestConfiguration = \"regression\" // instrumentation configuration } Groovy uploadBuildResult { uiTestConfiguration = \"regression\" // instrumentation configuration } Deploy to Google Play # Disclaimer The text below contains Avito specific details Deploy to Google play. Kotlin deploy {} Groovy deploy {} Mark report as source of truth for TMS # See Test case in code Configuration checks # Disclaimer The text below contains Avito specific details Checks a repository configuration. See :build-script-test for details. Kotlin configuration {} Groovy configuration {} Custom steps # If you need to run a simple task: customTask ( \"myStep\" ) { tasksPredicate = TasksPredicate . byName ( \"myTask\" ) } Overriding steps # It's useful when you want to setup default settings and override them per-project. Overriding is explicit to avoid accidental changes. // Root project: subprojects { plugins . withType < CiStepsPlugin > { extensions . configure < NamedDomainObjectContainer < BuildStepListExtension >> { register ( \"release\" ) { uiTests { configurations ( \"configurationName\" ) suppressFailures = false } } } } } // Application: builds { getByName ( \"release\" ) { overrideStep < UiTestCheck > { suppressFailures = true } } } Using impact analysis in step # Step can use Impact analysis . It is enabled by default. Kotlin fastCheck { uiTests { } } Groovy fastCheck { uiTests { } } Suppressing errors in step # In different scenarios steps could fail whole build, some can be configured not to. Kotlin fastCheck { uiTests { suppressFailures = false } } release { uiTests { suppressFailures = true } } Groovy fastCheck { uiTests { suppressFailures = false } } release { uiTests { suppressFailures = true } } Collecting artifacts # Artifacts that planned to be used(uploaded somewhere) must be registered: Kotlin artifacts { file ( \"lintReport\" , \" ${ project . buildDir } /reports/lint-results-release.html\" ) } Groovy artifacts { file ( \"lintReport\" , \"${project.buildDir}/reports/lint-results-release.html\" ) } There are different types of artifacts: apk - gets apk by buildType and checks packageName and signature bundle - gets bundle by buildType and checks packageName and signature mapping - gets r8 mapping by buildType and checks availability file - gets any file by path and checks availability Kotlin import com.avito.cd.BuildVariant.RELEASE val releaseSha1 = \"my sha\" // it's public info, so safe to share artifacts { apk ( \"releaseApk\" , RELEASE , \"com.avito.android\" , \" ${ project . buildDir } /outputs/apk/release/avito.apk\" ) { signature = releaseSha1 } bundle ( \"releaseBundle\" , RELEASE , \"com.avito.android\" , \" ${ project . buildDir } /outputs/bundle/release/avito.aab\" ) { signature = releaseSha1 } mapping ( \"releaseMapping\" , RELEASE , \" ${ project . buildDir } /outputs/mapping/release/mapping.txt\" ) file ( \"featureTogglesJson\" , \" ${ project . buildDir } /reports/feature_toggles.json\" ) } Groovy def releaseSha1 = \"my sha\" // it's public info, so safe to share artifacts { apk ( \"releaseApk\" , RELEASE , \"com.avito.android\" , \"${project.buildDir}/outputs/apk/release/avito.apk\" ) { signature = releaseSha1 } bundle ( \"releaseBundle\" , RELEASE , \"com.avito.android\" , \"${project.buildDir}/outputs/bundle/release/avito.aab\" ) { signature = releaseSha1 } mapping ( \"releaseMapping\" , RELEASE , \"${project.buildDir}/outputs/mapping/release/mapping.txt\" ) file ( \"featureTogglesJson\" , \"${project.buildDir}/reports/feature_toggles.json\" ) } The first argument is a key for upload steps.","title":"CI steps plugin"},{"location":"projects/internal/CiSteps/#ci-steps-plugin","text":"Warning Plugin wasn't tested outside Avito yet, so expect difficulties, or even blockers. However, if you interested, please contact us. Plugin creates chains of tasks for CI, encapsulating it under single gradle task.","title":"CI steps plugin"},{"location":"projects/internal/CiSteps/#getting-started","text":"Apply the plugin in the app's build.gradle file: plugins { id ( \"com.avito.android.cd\" ) } The plugin can be applied to a root project or any module. Setup plugins In the settings.gradle : pluginManagement { repositories { mavenCentral () } resolutionStrategy { eachPlugin { String pluginId = requested . id . id if ( pluginId . startsWith ( \"com.avito.android\" )) { def artifact = pluginId . replace ( \"com.avito.android.\" , \"\" ) useModule ( \"com.avito.android:$artifact:$avitoToolsVersion\" ) } } } } avitoToolsVersion could be exact version, or property in project's gradle.properties . The latest version could be found on project's release page .","title":"Getting started"},{"location":"projects/internal/CiSteps/#builds","text":"First, name your chain: Kotlin builds { register ( \"myChain\" ) { //optional description for generated task taskDescription . set ( \"This chain does something useful\" ) } } Groovy builds { myChain { //optional description for generated task taskDescription . set ( \"This chain does something useful\" ) } }","title":"Builds"},{"location":"projects/internal/CiSteps/#avito-example-chains","text":"localCheck - compilation checks for local run prCheck - as fast as possible checks for Pull Request fullCheck - as full as possible checks to be run after merges, non-blocking, could be slow release - chain to release our app","title":"Avito example chains"},{"location":"projects/internal/CiSteps/#steps","text":"Step is a declaration to run some logic. It works inside a chain: Kotlin build { register ( \"prCheck\" ) { // <--- chain unitTests {} // <--- step uiTests {} //optional description for generated task taskDescription . set ( \"This chain does something useful\" ) } } Groovy build { fastCheck { // <--- chain unitTests {} // <--- step uiTests {} //optional description for generated task taskDescription . set ( \"This chain does something useful\" ) } } Now when you invoke ./gradlew fastCheck gradle will run unitTests, uiTests of corresponding project","title":"Steps"},{"location":"projects/internal/CiSteps/#built-in-steps","text":"","title":"Built-in steps"},{"location":"projects/internal/CiSteps/#ui-tests","text":"Runs instrumentation tests. Kotlin uiTests { configurations ( \"configurationName\" ) // list of instrumentation configuration to depends on sendStatistics = false // by default suppressFailures = false // by default useImpactAnalysis = true // by default suppressFlaky = false // by default. [\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0434\u0435\u043d\u0438\u0439 FlakyTest](../test/FlakyAnnotation.md). } Groovy uiTests { configurations = [ \"configurationName\" ] // list of instrumentation configuration to depends on sendStatistics = false // by default suppressFailures = false // by default useImpactAnalysis = true // by default suppressFlaky = false // by default. [\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0434\u0435\u043d\u0438\u0439 FlakyTest](../test/FlakyAnnotation.md). }","title":"UI tests"},{"location":"projects/internal/CiSteps/#compile-ui-tests","text":"Compile instrumentation tests. It is helpful in local development. Kotlin compileUiTests {} Groovy compileUiTests {}","title":"Compile UI tests"},{"location":"projects/internal/CiSteps/#unit-tests","text":"Run unit tests. Kotlin unitTests {} Groovy unitTests {}","title":"Unit tests"},{"location":"projects/internal/CiSteps/#upload-to-qapps","text":"Disclaimer The text below contains Avito specific details Upload artifacts to QApps (internal system) Kotlin artifacts { apk ( \"debugApk\" , ...) } uploadToQapps { artifacts = setOf ( \"debugApk\" ) } Groovy artifacts { apk ( \"debugApk\" , ...) } uploadToQapps { artifacts = [ \"debugApk\" ] }","title":"Upload to QApps"},{"location":"projects/internal/CiSteps/#upload-to-artifactory","text":"Upload artifacts to Artifactory. Kotlin artifacts { file ( \"myReport\" , \" ${ project . buildDir } /reports/my_report.json\" ) } uploadToArtifactory { artifacts = setOf ( \"myReport\" ) } Groovy artifacts { file ( \"myReport\" , \"${project.buildDir}/reports/my_report.json\" ) } uploadToArtifactory { artifacts = [ \"myReport\" ] }","title":"Upload to Artifactory"},{"location":"projects/internal/CiSteps/#upload-to-prosector","text":"Disclaimer The text below contains Avito specific details Upload artifacts to Prosector (internal) . Kotlin artifacts { apk ( \"debugApk\" , ...) } uploadToProsector { artifacts = setOf ( \"debugApk\" ) } Groovy artifacts { apk ( \"debugApk\" , ...) } uploadToProsector { artifacts = [ \"debugApk\" ] }","title":"Upload to Prosector"},{"location":"projects/internal/CiSteps/#upload-build-results","text":"Disclaimer The text below contains Avito specific details Upload all build results to a deploy service. Kotlin uploadBuildResult { uiTestConfiguration = \"regression\" // instrumentation configuration } Groovy uploadBuildResult { uiTestConfiguration = \"regression\" // instrumentation configuration }","title":"Upload build results"},{"location":"projects/internal/CiSteps/#deploy-to-google-play","text":"Disclaimer The text below contains Avito specific details Deploy to Google play. Kotlin deploy {} Groovy deploy {}","title":"Deploy to Google Play"},{"location":"projects/internal/CiSteps/#mark-report-as-source-of-truth-for-tms","text":"See Test case in code","title":"Mark report as source of truth for TMS"},{"location":"projects/internal/CiSteps/#configuration-checks","text":"Disclaimer The text below contains Avito specific details Checks a repository configuration. See :build-script-test for details. Kotlin configuration {} Groovy configuration {}","title":"Configuration checks"},{"location":"projects/internal/CiSteps/#custom-steps","text":"If you need to run a simple task: customTask ( \"myStep\" ) { tasksPredicate = TasksPredicate . byName ( \"myTask\" ) }","title":"Custom steps"},{"location":"projects/internal/CiSteps/#overriding-steps","text":"It's useful when you want to setup default settings and override them per-project. Overriding is explicit to avoid accidental changes. // Root project: subprojects { plugins . withType < CiStepsPlugin > { extensions . configure < NamedDomainObjectContainer < BuildStepListExtension >> { register ( \"release\" ) { uiTests { configurations ( \"configurationName\" ) suppressFailures = false } } } } } // Application: builds { getByName ( \"release\" ) { overrideStep < UiTestCheck > { suppressFailures = true } } }","title":"Overriding steps"},{"location":"projects/internal/CiSteps/#using-impact-analysis-in-step","text":"Step can use Impact analysis . It is enabled by default. Kotlin fastCheck { uiTests { } } Groovy fastCheck { uiTests { } }","title":"Using impact analysis in step"},{"location":"projects/internal/CiSteps/#suppressing-errors-in-step","text":"In different scenarios steps could fail whole build, some can be configured not to. Kotlin fastCheck { uiTests { suppressFailures = false } } release { uiTests { suppressFailures = true } } Groovy fastCheck { uiTests { suppressFailures = false } } release { uiTests { suppressFailures = true } }","title":"Suppressing errors in step"},{"location":"projects/internal/CiSteps/#collecting-artifacts","text":"Artifacts that planned to be used(uploaded somewhere) must be registered: Kotlin artifacts { file ( \"lintReport\" , \" ${ project . buildDir } /reports/lint-results-release.html\" ) } Groovy artifacts { file ( \"lintReport\" , \"${project.buildDir}/reports/lint-results-release.html\" ) } There are different types of artifacts: apk - gets apk by buildType and checks packageName and signature bundle - gets bundle by buildType and checks packageName and signature mapping - gets r8 mapping by buildType and checks availability file - gets any file by path and checks availability Kotlin import com.avito.cd.BuildVariant.RELEASE val releaseSha1 = \"my sha\" // it's public info, so safe to share artifacts { apk ( \"releaseApk\" , RELEASE , \"com.avito.android\" , \" ${ project . buildDir } /outputs/apk/release/avito.apk\" ) { signature = releaseSha1 } bundle ( \"releaseBundle\" , RELEASE , \"com.avito.android\" , \" ${ project . buildDir } /outputs/bundle/release/avito.aab\" ) { signature = releaseSha1 } mapping ( \"releaseMapping\" , RELEASE , \" ${ project . buildDir } /outputs/mapping/release/mapping.txt\" ) file ( \"featureTogglesJson\" , \" ${ project . buildDir } /reports/feature_toggles.json\" ) } Groovy def releaseSha1 = \"my sha\" // it's public info, so safe to share artifacts { apk ( \"releaseApk\" , RELEASE , \"com.avito.android\" , \"${project.buildDir}/outputs/apk/release/avito.apk\" ) { signature = releaseSha1 } bundle ( \"releaseBundle\" , RELEASE , \"com.avito.android\" , \"${project.buildDir}/outputs/bundle/release/avito.aab\" ) { signature = releaseSha1 } mapping ( \"releaseMapping\" , RELEASE , \"${project.buildDir}/outputs/mapping/release/mapping.txt\" ) file ( \"featureTogglesJson\" , \"${project.buildDir}/reports/feature_toggles.json\" ) } The first argument is a key for upload steps.","title":"Collecting artifacts"},{"location":"projects/internal/CriticalPath/","text":"Critical path # Critical path is a set of tasks that define the build duration. The plugin gives a report with raw data. It is very similar to what you can find in a build scan in Timeline tab: Getting started # Apply the plugin in the root buildscript: plugins { id ( \"com.avito.android.critical-path\" ) } criticalPath { enabled . set ( true ) } Setup plugins In the settings.gradle : pluginManagement { repositories { mavenCentral () } resolutionStrategy { eachPlugin { String pluginId = requested . id . id if ( pluginId . startsWith ( \"com.avito.android\" )) { def artifact = pluginId . replace ( \"com.avito.android.\" , \"\" ) useModule ( \"com.avito.android:$artifact:$avitoToolsVersion\" ) } } } } avitoToolsVersion could be exact version, or property in project's gradle.properties . The latest version could be found on project's release page . Run a build. You will get a report in build/reports/critical-path/ directory. Warning This report is auxiliary and is a subject of change. [ { \"path\" : \":lib:compileKotlin\" , \"type\" : \"KotlinCompile\" , \"start\" : 1620217409525 , \"finish\" : 1620217409525 } ] See also build trace for visualization.","title":"Critical path"},{"location":"projects/internal/CriticalPath/#critical-path","text":"Critical path is a set of tasks that define the build duration. The plugin gives a report with raw data. It is very similar to what you can find in a build scan in Timeline tab:","title":"Critical path"},{"location":"projects/internal/CriticalPath/#getting-started","text":"Apply the plugin in the root buildscript: plugins { id ( \"com.avito.android.critical-path\" ) } criticalPath { enabled . set ( true ) } Setup plugins In the settings.gradle : pluginManagement { repositories { mavenCentral () } resolutionStrategy { eachPlugin { String pluginId = requested . id . id if ( pluginId . startsWith ( \"com.avito.android\" )) { def artifact = pluginId . replace ( \"com.avito.android.\" , \"\" ) useModule ( \"com.avito.android:$artifact:$avitoToolsVersion\" ) } } } } avitoToolsVersion could be exact version, or property in project's gradle.properties . The latest version could be found on project's release page . Run a build. You will get a report in build/reports/critical-path/ directory. Warning This report is auxiliary and is a subject of change. [ { \"path\" : \":lib:compileKotlin\" , \"type\" : \"KotlinCompile\" , \"start\" : 1620217409525 , \"finish\" : 1620217409525 } ] See also build trace for visualization.","title":"Getting started"},{"location":"projects/internal/Internal/","text":"Here are internal projects that are not ready for public usage.","title":"Internal"},{"location":"projects/internal/Signer/","text":"Signer gradle plugin # Sign APK's and AAB's(bundles) using in-house service. Usage # Apply plugin to application module # plugins { id ( \"com.android.application\" ) id ( \"com.avito.android.signer\" ) } Specify service host # signService { host . set ( \"https://my-inhouse-signer-service.service/path\" ) } Register which buildVariants to sign # signService { apk ( variant = android . buildTypes . release , token = project . properties . get ( \"avitoSignToken\" ) ) bundle ( variant = android . buildTypes . release , token = project . properties . get ( \"avitoSignBundleToken\" ) ) } Variants not listed here will fallback to default Android Gradle Plugin signing mechanism Disable to avoid signing # signService { enabled . set ( false ) } Can be useful to disable signing in different builds by some condition Plugin will generate tasks # signApkViaService<Variant> signBundleViaService<Variant> Tasks will not be wired by the plugin to assemble. User should do it manually, configuring corresponding dependencies, e.g. dependsOn(signApkViaService<Variant>) Local development behavior # By default local development not impacted at all: Typical assemble , install tasks won't add signer tasks as dependencies. Signer tasks can be called locally, just don't forget to specify token as gradle property, like -PavitoSignToken=XXX Relations with CiSteps plugin # Signer tasks dependency implicitly wired in Artifacts collection steps of CiSteps plugin See: com.avito.ci.steps.VerifyArtifactsStep Metrics ( Internal Grafana ) # Signer service http calls data available under <namespace>.signer.sign.* . Troubleshooting # Network call data posted right into exception message that failing the build. It should be sent to service owners for investigation Example: Can't sign: /tmp/junit7019843706336345100/app/build/intermediates/apk/release/signApkViaServiceRelease/app-release.apk Where : Signing artifact via service You can learn more about this problem at https://avito-tech.github.io/avito-android/projects/internal/Signer/#troubleshooting Cause exception message: Failed to sign /tmp/junit7019843706336345100/app/build/outputs/apk/release/app-release-unsigned.apk via service Request: POST http://localhost:54801/sign Request body size: 539997 bytes Response: 404 Response headers: Content-Length: 0 Response body is empty","title":"Signer gradle plugin"},{"location":"projects/internal/Signer/#signer-gradle-plugin","text":"Sign APK's and AAB's(bundles) using in-house service.","title":"Signer gradle plugin"},{"location":"projects/internal/Signer/#usage","text":"","title":"Usage"},{"location":"projects/internal/Signer/#apply-plugin-to-application-module","text":"plugins { id ( \"com.android.application\" ) id ( \"com.avito.android.signer\" ) }","title":"Apply plugin to application module"},{"location":"projects/internal/Signer/#specify-service-host","text":"signService { host . set ( \"https://my-inhouse-signer-service.service/path\" ) }","title":"Specify service host"},{"location":"projects/internal/Signer/#register-which-buildvariants-to-sign","text":"signService { apk ( variant = android . buildTypes . release , token = project . properties . get ( \"avitoSignToken\" ) ) bundle ( variant = android . buildTypes . release , token = project . properties . get ( \"avitoSignBundleToken\" ) ) } Variants not listed here will fallback to default Android Gradle Plugin signing mechanism","title":"Register which buildVariants to sign"},{"location":"projects/internal/Signer/#disable-to-avoid-signing","text":"signService { enabled . set ( false ) } Can be useful to disable signing in different builds by some condition","title":"Disable to avoid signing"},{"location":"projects/internal/Signer/#plugin-will-generate-tasks","text":"signApkViaService<Variant> signBundleViaService<Variant> Tasks will not be wired by the plugin to assemble. User should do it manually, configuring corresponding dependencies, e.g. dependsOn(signApkViaService<Variant>)","title":"Plugin will generate tasks"},{"location":"projects/internal/Signer/#local-development-behavior","text":"By default local development not impacted at all: Typical assemble , install tasks won't add signer tasks as dependencies. Signer tasks can be called locally, just don't forget to specify token as gradle property, like -PavitoSignToken=XXX","title":"Local development behavior"},{"location":"projects/internal/Signer/#relations-with-cisteps-plugin","text":"Signer tasks dependency implicitly wired in Artifacts collection steps of CiSteps plugin See: com.avito.ci.steps.VerifyArtifactsStep","title":"Relations with CiSteps plugin"},{"location":"projects/internal/Signer/#metrics-internal-grafana","text":"Signer service http calls data available under <namespace>.signer.sign.* .","title":"Metrics (Internal Grafana)"},{"location":"projects/internal/Signer/#troubleshooting","text":"Network call data posted right into exception message that failing the build. It should be sent to service owners for investigation Example: Can't sign: /tmp/junit7019843706336345100/app/build/intermediates/apk/release/signApkViaServiceRelease/app-release.apk Where : Signing artifact via service You can learn more about this problem at https://avito-tech.github.io/avito-android/projects/internal/Signer/#troubleshooting Cause exception message: Failed to sign /tmp/junit7019843706336345100/app/build/outputs/apk/release/app-release-unsigned.apk via service Request: POST http://localhost:54801/sign Request body size: 539997 bytes Response: 404 Response headers: Content-Length: 0 Response body is empty","title":"Troubleshooting"},{"location":"test/FlakyAnnotation/","text":"@Flaky Annotation # What is flaky test # A flaky test is a test that could fail or pass without project changes. One could say this is unstable tests that fail sometimes but not every launch. It happens when: - test relies on an external environment: back-end, database, environment variables etc. - test had written incorrect. Mistakes easy to do in async jobs. - test framework has bugs Flaky tests make hard: - find real failures - trust to test failures - to react on failures as soon as possible That's why we introduce annotion to mark your test flaky. We want: - Minimize flakiness - Launch as many tests as we can on pull request checks - Help to fix common flaky problems Annotation # Mark flaky tests with special annotation - @Flaky @Flaky ( reason = \"Relies on real back-end\" , onSdks = [ 22 , 28 ] ) class MyAwesomeTests { // ... } reason - description of flakiness. You will see this reason in ReportViewer onSdks - specify if your test is flaking only on concrete sdk versions. When it's empty all sdk versions will be marked flaky. This annotation can be added both to the whole class and to a separate test: class MyAwesomeTests { @Flaky @Test fun foobar () { // ... } } Suppress @Flaky test failures # By default @Flaky only adds flaky sign to ReportViewer. There are two options for changing @Flaky tests behavior: - Add suppressFlaky = true to the uiTests step to suppress step failure because of @Flaky tests - Add excludeFlaky = true to the filter for excluding @Flaky tests from execution","title":"Flaky annotation"},{"location":"test/FlakyAnnotation/#flaky-annotation","text":"","title":"@Flaky Annotation"},{"location":"test/FlakyAnnotation/#what-is-flaky-test","text":"A flaky test is a test that could fail or pass without project changes. One could say this is unstable tests that fail sometimes but not every launch. It happens when: - test relies on an external environment: back-end, database, environment variables etc. - test had written incorrect. Mistakes easy to do in async jobs. - test framework has bugs Flaky tests make hard: - find real failures - trust to test failures - to react on failures as soon as possible That's why we introduce annotion to mark your test flaky. We want: - Minimize flakiness - Launch as many tests as we can on pull request checks - Help to fix common flaky problems","title":"What is flaky test"},{"location":"test/FlakyAnnotation/#annotation","text":"Mark flaky tests with special annotation - @Flaky @Flaky ( reason = \"Relies on real back-end\" , onSdks = [ 22 , 28 ] ) class MyAwesomeTests { // ... } reason - description of flakiness. You will see this reason in ReportViewer onSdks - specify if your test is flaking only on concrete sdk versions. When it's empty all sdk versions will be marked flaky. This annotation can be added both to the whole class and to a separate test: class MyAwesomeTests { @Flaky @Test fun foobar () { // ... } }","title":"Annotation"},{"location":"test/FlakyAnnotation/#suppress-flaky-test-failures","text":"By default @Flaky only adds flaky sign to ReportViewer. There are two options for changing @Flaky tests behavior: - Add suppressFlaky = true to the uiTests step to suppress step failure because of @Flaky tests - Add excludeFlaky = true to the filter for excluding @Flaky tests from execution","title":"Suppress @Flaky test failures"},{"location":"test/Toast/","text":"Testing toasts # android.widget.Toast Warning Testing toasts is a hard because other toasts can show up and yours will be queued. We hack app with proxy object to mitigate this. It is also recommended to use snackbar , or your custom way to display brief unintrusive messages instead. So you should consider not testing it at all. Proxy toast # Use provided extension methods to be able to spy on showToast functions. import com.avito.android.util.showToast showToast ( \"I'am a toast!\" ) implementation ( \"com.avito.android:proxy-toast: $ version \" ) ToastRule # @get : Rule val toastRule = ToastRule () fun test () { toastRule . checks . toastDisplayedWithText ( \"I'am a toast!\" ) } androidTestImplementation ( \"com.avito.android:toast-rule: $ version \" )","title":"Toast"},{"location":"test/Toast/#testing-toasts","text":"android.widget.Toast Warning Testing toasts is a hard because other toasts can show up and yours will be queued. We hack app with proxy object to mitigate this. It is also recommended to use snackbar , or your custom way to display brief unintrusive messages instead. So you should consider not testing it at all.","title":"Testing toasts"},{"location":"test/Toast/#proxy-toast","text":"Use provided extension methods to be able to spy on showToast functions. import com.avito.android.util.showToast showToast ( \"I'am a toast!\" ) implementation ( \"com.avito.android:proxy-toast: $ version \" )","title":"Proxy toast"},{"location":"test/Toast/#toastrule","text":"@get : Rule val toastRule = ToastRule () fun test () { toastRule . checks . toastDisplayedWithText ( \"I'am a toast!\" ) } androidTestImplementation ( \"com.avito.android:toast-rule: $ version \" )","title":"ToastRule"},{"location":"test_framework/Internals/","text":"Internals # Custom click # It is a click without inter-process communication. Motivation to write custom click # Espresso click uses inter-process communication. It leads to problems: Flaky clicks on moving views. Because click takes some time to touch after coordinates calculating. \"misinterpret clicks as long clicks\" Implementation details # Click happens via dispatch touch event on root view. Known issues # Can click through any system elements on the screen. It applies clicks directly on root view of our application. Because of it, crash or permission dialogs can be ignored by tests. Can click through separate decor view of our application. Sometimes we have multiple decor view in application (for example, when we have toolbar overflow menu). And that kind of click implementation can click through it. Overlapped view can't handle click. We can't realize when view is overlapped. Because of that clicks on overlapped views don't work and don't throw errors. Overlapped view click details # We tried to validate that click happens. We were able to check that clicked view wasn't overlapped, but faced scenario when user clicked on container and expected it to delegate click handling to child. We don't want to restrict our user, because many tests behave like that.","title":"Internals"},{"location":"test_framework/Internals/#internals","text":"","title":"Internals"},{"location":"test_framework/Internals/#custom-click","text":"It is a click without inter-process communication.","title":"Custom click"},{"location":"test_framework/Internals/#motivation-to-write-custom-click","text":"Espresso click uses inter-process communication. It leads to problems: Flaky clicks on moving views. Because click takes some time to touch after coordinates calculating. \"misinterpret clicks as long clicks\"","title":"Motivation to write custom click"},{"location":"test_framework/Internals/#implementation-details","text":"Click happens via dispatch touch event on root view.","title":"Implementation details"},{"location":"test_framework/Internals/#known-issues","text":"Can click through any system elements on the screen. It applies clicks directly on root view of our application. Because of it, crash or permission dialogs can be ignored by tests. Can click through separate decor view of our application. Sometimes we have multiple decor view in application (for example, when we have toolbar overflow menu). And that kind of click implementation can click through it. Overlapped view can't handle click. We can't realize when view is overlapped. Because of that clicks on overlapped views don't work and don't throw errors.","title":"Known issues"},{"location":"test_framework/Internals/#overlapped-view-click-details","text":"We tried to validate that click happens. We were able to check that clicked view wasn't overlapped, but faced scenario when user clicked on container and expected it to delegate click handling to child. We don't want to restrict our user, because many tests behave like that.","title":"Overlapped view click details"},{"location":"test_framework/ScreenChecks/","text":"Screen checks # Screen is abstraction that represents Activity , Fragment or View in tests. Screen has a property checks of type ScreenChecks with single function isScreenOpened . ScreenChecks has a property checkOnEachScreenInteraction . It executes isScreenOpened() on each interaction with ViewElement on the Screen . Warning checkOnEachScreenInteraction works only if ViewElement is created by element() function Manual check # screen . checks . isScreenOpened () Writing a custom check # class MyScreen : SimpleScreen () { override val checks = MyScreenChecks () class MyScreenChecks ( screen : MyScreen ) : SimpleScreenChecks < MyScreen > ( screen = screen , checkOnEachScreenInteraction = true ) { override fun screenOpenedCheck () { super . screenOpenedCheck () // Put additional checks here } } } How to use the same Screen with different behavior # It may be useful when one Screen contains different UI states. fun Screen . myScreen ( title : String? = null ) = MyScreen ( title ) class MyScreen ( val title : String? = null ) : SimpleScreen () { class Checks ( screen : MyScreen ) : SimpleScreenChecks < MyScreen > ( screen = screen ) { override fun screenOpenedCheck () { super . screenOpenedCheck () if ( title != null ) { title . checks . withText ( title ) } } } }","title":"Screen checks"},{"location":"test_framework/ScreenChecks/#screen-checks","text":"Screen is abstraction that represents Activity , Fragment or View in tests. Screen has a property checks of type ScreenChecks with single function isScreenOpened . ScreenChecks has a property checkOnEachScreenInteraction . It executes isScreenOpened() on each interaction with ViewElement on the Screen . Warning checkOnEachScreenInteraction works only if ViewElement is created by element() function","title":"Screen checks"},{"location":"test_framework/ScreenChecks/#manual-check","text":"screen . checks . isScreenOpened ()","title":"Manual check"},{"location":"test_framework/ScreenChecks/#writing-a-custom-check","text":"class MyScreen : SimpleScreen () { override val checks = MyScreenChecks () class MyScreenChecks ( screen : MyScreen ) : SimpleScreenChecks < MyScreen > ( screen = screen , checkOnEachScreenInteraction = true ) { override fun screenOpenedCheck () { super . screenOpenedCheck () // Put additional checks here } } }","title":"Writing a custom check"},{"location":"test_framework/ScreenChecks/#how-to-use-the-same-screen-with-different-behavior","text":"It may be useful when one Screen contains different UI states. fun Screen . myScreen ( title : String? = null ) = MyScreen ( title ) class MyScreen ( val title : String? = null ) : SimpleScreen () { class Checks ( screen : MyScreen ) : SimpleScreenChecks < MyScreen > ( screen = screen ) { override fun screenOpenedCheck () { super . screenOpenedCheck () if ( title != null ) { title . checks . withText ( title ) } } } }","title":"How to use the same Screen with different behavior"},{"location":"test_framework/Snackbar/","text":"Snackbar # Why do we need a custom component for snackbar testing? We can't predict when snackbar will appear or disappear because we have no API to watch that behaviour. So it's hard to realize our test failed because: there are no snackbars, snackbar has already disappeared or it hasn't appeared yet. How our library works? We keep all Snackbar showings intentions through the test and give you the ability to check that snackbar showing history. All snackbar assertions only checks an intention to show a snackbar, e.g. a function call, not a real view render. Keep that in mind, because snackbar could be broken on layout phase even if test is green. We use this approach in Avito, because value test stability over assertions depth, and couldn't achieve stable tests with real snackbar layout checks. How to test snackbars with our library? # Add dependencies to Gradle Kotlin Add to your build.gradle.kts dependencies { implementation ( \"com.avito.android:snackbar-proxy: $ version \" ) implementation ( \"com.google.android.material:material: $ androidXVersion \" ) androidTestImplementation ( \"com.avito.android:snackbar-rule: $ version \" ) } Groovy Add to your build.gradle dependencies { implementation ( \"com.avito.android:snackbar-proxy:$version\" ) implementation ( \"com.google.android.material:material:$androidXVersion\" ) androidTestImplementation ( \"com.avito.android:snackbar-rule:$version\" ) } Replace com.google.android.material.snackbar.Snackbar.show() by our wrapper function import com.avito.android.snackbar.proxy.showSnackbar import com.google.android.material.snackbar.Snackbar val snackbar : Snackbar = TODO ( \"Make a snackbar\" ) snackbar . showSnackbar () Use our com.avito.android.test.app.second.SnackbarRule in tests import com.avito.android.test.app.second.SnackbarRule import org.junit.Test import org.junit.Rule class SomeTest { @get : Rule private val rule = SnackbarRule () @Test fun test () { // test logic rule . assertIsShownWith ( \"text\" ) rule . assertIsShownWith ( Matchers . Is ( \"text\" )) rule . assertIsShownLastWith ( \"text\" ) rule . assertIsShownLastWith ( Matchers . Is ( \"text\" )) } }","title":"Snackbar"},{"location":"test_framework/Snackbar/#snackbar","text":"Why do we need a custom component for snackbar testing? We can't predict when snackbar will appear or disappear because we have no API to watch that behaviour. So it's hard to realize our test failed because: there are no snackbars, snackbar has already disappeared or it hasn't appeared yet. How our library works? We keep all Snackbar showings intentions through the test and give you the ability to check that snackbar showing history. All snackbar assertions only checks an intention to show a snackbar, e.g. a function call, not a real view render. Keep that in mind, because snackbar could be broken on layout phase even if test is green. We use this approach in Avito, because value test stability over assertions depth, and couldn't achieve stable tests with real snackbar layout checks.","title":"Snackbar"},{"location":"test_framework/Snackbar/#how-to-test-snackbars-with-our-library","text":"Add dependencies to Gradle Kotlin Add to your build.gradle.kts dependencies { implementation ( \"com.avito.android:snackbar-proxy: $ version \" ) implementation ( \"com.google.android.material:material: $ androidXVersion \" ) androidTestImplementation ( \"com.avito.android:snackbar-rule: $ version \" ) } Groovy Add to your build.gradle dependencies { implementation ( \"com.avito.android:snackbar-proxy:$version\" ) implementation ( \"com.google.android.material:material:$androidXVersion\" ) androidTestImplementation ( \"com.avito.android:snackbar-rule:$version\" ) } Replace com.google.android.material.snackbar.Snackbar.show() by our wrapper function import com.avito.android.snackbar.proxy.showSnackbar import com.google.android.material.snackbar.Snackbar val snackbar : Snackbar = TODO ( \"Make a snackbar\" ) snackbar . showSnackbar () Use our com.avito.android.test.app.second.SnackbarRule in tests import com.avito.android.test.app.second.SnackbarRule import org.junit.Test import org.junit.Rule class SomeTest { @get : Rule private val rule = SnackbarRule () @Test fun test () { // test logic rule . assertIsShownWith ( \"text\" ) rule . assertIsShownWith ( Matchers . Is ( \"text\" )) rule . assertIsShownLastWith ( \"text\" ) rule . assertIsShownLastWith ( Matchers . Is ( \"text\" )) } }","title":"How to test snackbars with our library?"},{"location":"test_framework/TestFramework/","text":"Test framework # ViewElement # PageObject \u043d\u0430\u0434 View. \u0421\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0435: InteractionContext - \u0437\u043d\u0430\u043d\u0438\u044f \u043f\u0440\u043e \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 Actions - \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c Checks - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 # \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e element : val submitButton : ViewElement = element ( withId ( R . id . submit_button )) ViewMatcher \u0431\u0443\u0434\u0435\u0442 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 PageObject, \u0443\u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0435\u0433\u043e matcher. \u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 ViewElement # \u0412\u0441\u0435 PageObject \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438, \u043e\u0442\u0440\u0430\u0436\u0430\u0442\u044c \u0440\u0435\u0430\u043b\u044c\u043d\u0443\u044e \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u044e: // parent -> container -> button val container : ViewElement = element ( withId ( R . id . container )) val button : ViewElement = container . element ( withId ( R . id . button )) \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 ViewElement # \u0414\u043b\u044f \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f # \u0411\u044b\u0432\u0430\u0435\u0442 \u0443\u0434\u043e\u0431\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u043a\u043b\u0430\u0441\u0441\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u044d\u043a\u0440\u0430\u043d\u0430\u0445. // parent --> selector --> hint val selector : ImageSelectorElement = element ( withId ( R . id . selector )) class ImageSelectorElement ( interactionContext : InteractionContext ) : ViewElement ( interactionContext ) { val hint : ViewElement = element ( withId ( R . id . hint )) } \u0414\u043b\u044f \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0445 actions, checks # \u0415\u0449\u0435 \u043e\u0434\u043d\u0430 \u043f\u0440\u0438\u0447\u0438\u043d\u0430 \u0434\u043b\u044f \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0433\u043e ViewElement - \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 actions, checks. \u041f\u0440\u0438\u043c\u0435\u0440\u044b: RatingBarElement , BottomSheetElement . \u0414\u043b\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0433\u043e Matcher # \u0414\u043b\u044f \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0443\u0434\u043e\u0431\u043d\u043e \u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u0437\u043d\u0430\u043d\u0438\u044f \u043f\u0440\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0439 \u043c\u0430\u0442\u0447\u0435\u0440. \u041f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0431\u0443\u0434\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0435\u0433\u043e, \u043d\u043e \u043d\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c. \u041f\u043e\u043a\u0430 \u0447\u0442\u043e \u043d\u0435 \u0443\u043c\u0435\u0435\u043c \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0443\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 interaction context, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430: class ElementWithEmbeddedMatcher : HandleParentContext , ViewElement { constructor ( interactionContext : InteractionContext ) : super ( interactionContext . provideChildContext ( defaultMatcher ())) constructor ( interactionContext : InteractionContext , matcher : Matcher < View > ) : super ( interactionContext . provideChildContext ( Matchers . allOf ( defaultMatcher (), matcher ))) } HandleParentContext - \u043c\u0430\u0440\u043a\u0435\u0440\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441. \u0418\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 PageObject.element(matcher) . \u041c\u044b \u0441\u0430\u043c\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043c\u044b \u0437\u043d\u0430\u0435\u043c \u043f\u0440\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0439 \u043c\u0430\u0442\u0447\u0435\u0440. Screen # \u042d\u0442\u043e PageObject \u0434\u043b\u044f \u044d\u043a\u0440\u0430\u043d\u0430 (activity, fragment, dialog, ...) class PublicProfileScreen : PageObject (), Screen { ... } rootId # \u042f\u0432\u043d\u043e \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c PageObject \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c layout: override val rootId : Int = com . avito . android . public_profile_stuff . R . id . public_profile_screen_root \u041f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043d\u0430\u0439\u0442\u0438 \u043a\u0430\u043a\u043e\u0439 PageObject \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u044d\u043a\u0440\u0430\u043d\u0430 \u0438 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u0412\u0441\u0435 \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 PageObject \u043d\u0435\u044f\u0432\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0432 \u044d\u0442\u043e\u0442 layout \u0421\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u044d\u043a\u0440\u0430\u043d \u0441 Gradle-\u043c\u043e\u0434\u0443\u043b\u0435\u043c. \u042d\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0438\u043c\u043f\u0430\u043a\u0442-\u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u042d\u043b\u0435\u043c\u0435\u043d\u0442\u044b # PageObject \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b: val submitButton : ViewElement = element ( withId ( R . id . submit_button )) \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 element , \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442. \u041f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0438\u043b\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u0430\u043a\u043e\u0439 \u044d\u043a\u0440\u0430\u043d \u0441\u0435\u0439\u0447\u0430\u0441 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f.","title":"Test framework"},{"location":"test_framework/TestFramework/#test-framework","text":"","title":"Test framework"},{"location":"test_framework/TestFramework/#viewelement","text":"PageObject \u043d\u0430\u0434 View. \u0421\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0435: InteractionContext - \u0437\u043d\u0430\u043d\u0438\u044f \u043f\u0440\u043e \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 Actions - \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c Checks - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f","title":"ViewElement"},{"location":"test_framework/TestFramework/#\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435","text":"\u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e element : val submitButton : ViewElement = element ( withId ( R . id . submit_button )) ViewMatcher \u0431\u0443\u0434\u0435\u0442 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 PageObject, \u0443\u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0435\u0433\u043e matcher.","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435"},{"location":"test_framework/TestFramework/#\u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435-viewelement","text":"\u0412\u0441\u0435 PageObject \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438, \u043e\u0442\u0440\u0430\u0436\u0430\u0442\u044c \u0440\u0435\u0430\u043b\u044c\u043d\u0443\u044e \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u044e: // parent -> container -> button val container : ViewElement = element ( withId ( R . id . container )) val button : ViewElement = container . element ( withId ( R . id . button ))","title":"\u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 ViewElement"},{"location":"test_framework/TestFramework/#\u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439-viewelement","text":"","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 ViewElement"},{"location":"test_framework/TestFramework/#\u0434\u043b\u044f-\u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"\u0411\u044b\u0432\u0430\u0435\u0442 \u0443\u0434\u043e\u0431\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u043a\u043b\u0430\u0441\u0441\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u044d\u043a\u0440\u0430\u043d\u0430\u0445. // parent --> selector --> hint val selector : ImageSelectorElement = element ( withId ( R . id . selector )) class ImageSelectorElement ( interactionContext : InteractionContext ) : ViewElement ( interactionContext ) { val hint : ViewElement = element ( withId ( R . id . hint )) }","title":"\u0414\u043b\u044f \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"test_framework/TestFramework/#\u0434\u043b\u044f-\u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0445-actions-checks","text":"\u0415\u0449\u0435 \u043e\u0434\u043d\u0430 \u043f\u0440\u0438\u0447\u0438\u043d\u0430 \u0434\u043b\u044f \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0433\u043e ViewElement - \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 actions, checks. \u041f\u0440\u0438\u043c\u0435\u0440\u044b: RatingBarElement , BottomSheetElement .","title":"\u0414\u043b\u044f \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0445 actions, checks"},{"location":"test_framework/TestFramework/#\u0434\u043b\u044f-\u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0433\u043e-matcher","text":"\u0414\u043b\u044f \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0443\u0434\u043e\u0431\u043d\u043e \u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u0437\u043d\u0430\u043d\u0438\u044f \u043f\u0440\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0439 \u043c\u0430\u0442\u0447\u0435\u0440. \u041f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0431\u0443\u0434\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0435\u0433\u043e, \u043d\u043e \u043d\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c. \u041f\u043e\u043a\u0430 \u0447\u0442\u043e \u043d\u0435 \u0443\u043c\u0435\u0435\u043c \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0443\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 interaction context, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430: class ElementWithEmbeddedMatcher : HandleParentContext , ViewElement { constructor ( interactionContext : InteractionContext ) : super ( interactionContext . provideChildContext ( defaultMatcher ())) constructor ( interactionContext : InteractionContext , matcher : Matcher < View > ) : super ( interactionContext . provideChildContext ( Matchers . allOf ( defaultMatcher (), matcher ))) } HandleParentContext - \u043c\u0430\u0440\u043a\u0435\u0440\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441. \u0418\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 PageObject.element(matcher) . \u041c\u044b \u0441\u0430\u043c\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043c\u044b \u0437\u043d\u0430\u0435\u043c \u043f\u0440\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0439 \u043c\u0430\u0442\u0447\u0435\u0440.","title":"\u0414\u043b\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0433\u043e Matcher"},{"location":"test_framework/TestFramework/#screen","text":"\u042d\u0442\u043e PageObject \u0434\u043b\u044f \u044d\u043a\u0440\u0430\u043d\u0430 (activity, fragment, dialog, ...) class PublicProfileScreen : PageObject (), Screen { ... }","title":"Screen"},{"location":"test_framework/TestFramework/#rootid","text":"\u042f\u0432\u043d\u043e \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c PageObject \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c layout: override val rootId : Int = com . avito . android . public_profile_stuff . R . id . public_profile_screen_root \u041f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043d\u0430\u0439\u0442\u0438 \u043a\u0430\u043a\u043e\u0439 PageObject \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u044d\u043a\u0440\u0430\u043d\u0430 \u0438 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u0412\u0441\u0435 \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 PageObject \u043d\u0435\u044f\u0432\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0432 \u044d\u0442\u043e\u0442 layout \u0421\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u044d\u043a\u0440\u0430\u043d \u0441 Gradle-\u043c\u043e\u0434\u0443\u043b\u0435\u043c. \u042d\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0438\u043c\u043f\u0430\u043a\u0442-\u0430\u043d\u0430\u043b\u0438\u0437\u0430","title":"rootId"},{"location":"test_framework/TestFramework/#\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b","text":"PageObject \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b: val submitButton : ViewElement = element ( withId ( R . id . submit_button )) \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 element , \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442. \u041f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0438\u043b\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u0430\u043a\u043e\u0439 \u044d\u043a\u0440\u0430\u043d \u0441\u0435\u0439\u0447\u0430\u0441 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f.","title":"\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u044b"},{"location":"test_runner/Metrics/","text":"Test runner metrics # Metrics available at: $namespace.testrunner.$projectName.$instrumentationConfigName. devices.living # Sum of all time from creation of device till finishing across all devices graph LR subgraph ef1[Living] id1[Device started] --> id2[Device finished] end devices.working # Sum of all time when device executing tests across all devices graph LR id1[Device started] --> id2 subgraph ef1[working] id2[Received a test intention] --> id3[Test started] --> id4[Test finished] end id4 --> id5[Waiting for another intention] --> id6 subgraph ef2[working] id6[Another test run] end id6 --> id7[Device finished] devices.idle # Sum of all time when device do nothing across all devices graph LR id1[Device started] --> id2 id2[Received a test intention] --> id3[Test started] --> id4[Test finished] --> id5 subgraph ef2[idle] id5[Waiting for another intention] --> id6[Device finished] end initial-delay # Single stat per test suite (instrumentation configuration) graph LR id1[Test runner start] -->|ms|id2[First test execution start] end-delay # Single stat per test suite graph LR id1[Last test execution ended] -->|ms|id2[Test Runner finished] queue-median # Median of tests queue time graph LR id1[Test runner start] -->|ms|id2[Test claimed a device] install-median # Median of installation times graph LR id1[Test claimed a device] -->|ms|id2[Test execution start] suite # Single stat per test suite graph LR id1[First test execution start] -->|ms|id2[Last test execution ended] total # Single stat per test suite graph LR id1[Test runner start] -->|ms|id2[Test runner finished] tests.status.lost. # Tests count with lost status with categorized reasons: not-reported # Don't know exact reason, delta between initial test suite and reported tests no-file # Test report data pulled from device and then pushed to report service. These are cases when file was not found on device for some reason instr-parsing # If fail when parse am instrument output instr-start # If fail when staring am instrument instr-timeout # If fail with timeout when executing am instrument instr-unexpected # If catch unexpected error when executing am instrument adb # Lower level metrics from AdbDevice, to observe device connection issues. It is count metrics, aggregated by time windows get-sdk-property .[ success / error / failure ] # install-application .[ success / error / failure ] # get-alive-device .[ success / error / failure ] # clear-package .[ success / error / failure ] # pull .[ success / error / failure ] # clear-directory .[ success / error / failure ] # list .[ success / error / failure ] # run-test .[ passed / ignored / error / infrastructure-err / failed-on-start / failed-instrum-parse ] #","title":"Metrics"},{"location":"test_runner/Metrics/#test-runner-metrics","text":"Metrics available at: $namespace.testrunner.$projectName.$instrumentationConfigName.","title":"Test runner metrics"},{"location":"test_runner/Metrics/#devicesliving","text":"Sum of all time from creation of device till finishing across all devices graph LR subgraph ef1[Living] id1[Device started] --> id2[Device finished] end","title":"devices.living"},{"location":"test_runner/Metrics/#devicesworking","text":"Sum of all time when device executing tests across all devices graph LR id1[Device started] --> id2 subgraph ef1[working] id2[Received a test intention] --> id3[Test started] --> id4[Test finished] end id4 --> id5[Waiting for another intention] --> id6 subgraph ef2[working] id6[Another test run] end id6 --> id7[Device finished]","title":"devices.working"},{"location":"test_runner/Metrics/#devicesidle","text":"Sum of all time when device do nothing across all devices graph LR id1[Device started] --> id2 id2[Received a test intention] --> id3[Test started] --> id4[Test finished] --> id5 subgraph ef2[idle] id5[Waiting for another intention] --> id6[Device finished] end","title":"devices.idle"},{"location":"test_runner/Metrics/#initial-delay","text":"Single stat per test suite (instrumentation configuration) graph LR id1[Test runner start] -->|ms|id2[First test execution start]","title":"initial-delay"},{"location":"test_runner/Metrics/#end-delay","text":"Single stat per test suite graph LR id1[Last test execution ended] -->|ms|id2[Test Runner finished]","title":"end-delay"},{"location":"test_runner/Metrics/#queue-median","text":"Median of tests queue time graph LR id1[Test runner start] -->|ms|id2[Test claimed a device]","title":"queue-median"},{"location":"test_runner/Metrics/#install-median","text":"Median of installation times graph LR id1[Test claimed a device] -->|ms|id2[Test execution start]","title":"install-median"},{"location":"test_runner/Metrics/#suite","text":"Single stat per test suite graph LR id1[First test execution start] -->|ms|id2[Last test execution ended]","title":"suite"},{"location":"test_runner/Metrics/#total","text":"Single stat per test suite graph LR id1[Test runner start] -->|ms|id2[Test runner finished]","title":"total"},{"location":"test_runner/Metrics/#testsstatuslost","text":"Tests count with lost status with categorized reasons:","title":"tests.status.lost."},{"location":"test_runner/Metrics/#not-reported","text":"Don't know exact reason, delta between initial test suite and reported tests","title":"not-reported"},{"location":"test_runner/Metrics/#no-file","text":"Test report data pulled from device and then pushed to report service. These are cases when file was not found on device for some reason","title":"no-file"},{"location":"test_runner/Metrics/#instr-parsing","text":"If fail when parse am instrument output","title":"instr-parsing"},{"location":"test_runner/Metrics/#instr-start","text":"If fail when staring am instrument","title":"instr-start"},{"location":"test_runner/Metrics/#instr-timeout","text":"If fail with timeout when executing am instrument","title":"instr-timeout"},{"location":"test_runner/Metrics/#instr-unexpected","text":"If catch unexpected error when executing am instrument","title":"instr-unexpected"},{"location":"test_runner/Metrics/#adb","text":"Lower level metrics from AdbDevice, to observe device connection issues. It is count metrics, aggregated by time windows","title":"adb"},{"location":"test_runner/Metrics/#get-sdk-property-success--error--failure-","text":"","title":"get-sdk-property.[ success / error / failure ]"},{"location":"test_runner/Metrics/#install-application-success--error--failure-","text":"","title":"install-application.[ success / error / failure ]"},{"location":"test_runner/Metrics/#get-alive-device-success--error--failure-","text":"","title":"get-alive-device.[ success / error / failure ]"},{"location":"test_runner/Metrics/#clear-package-success--error--failure-","text":"","title":"clear-package.[ success / error / failure ]"},{"location":"test_runner/Metrics/#pull-success--error--failure-","text":"","title":"pull.[ success / error / failure ]"},{"location":"test_runner/Metrics/#clear-directory-success---error--failure-","text":"","title":"clear-directory.[ success /  error / failure ]"},{"location":"test_runner/Metrics/#list-success--error--failure-","text":"","title":"list.[ success / error / failure ]"},{"location":"test_runner/Metrics/#run-test-passed--ignored--error--infrastructure-err--failed-on-start--failed-instrum-parse-","text":"","title":"run-test.[ passed / ignored / error / infrastructure-err / failed-on-start / failed-instrum-parse ]"},{"location":"test_runner/SampleApp/","text":"Test Runner sample app # samples/test-runner Includes build of test-runner project for building as composite , so any changes in test-runner will directly affect sample. Sync project to get gradle plugin API changes. Run # Setup kubernetes context contextName in ~/.kube/config . To run tests use: make test_runner_instrumentation kubernetesContext=<contextName> Most likely you want to enable verbose logging Clean up # If test run stuck, resources in k8s should be freed automatically by cron script (set up in Avito). For manual cleaning use kubectl delete deployment -l type=local-<$USER>","title":"Sample app"},{"location":"test_runner/SampleApp/#test-runner-sample-app","text":"samples/test-runner Includes build of test-runner project for building as composite , so any changes in test-runner will directly affect sample. Sync project to get gradle plugin API changes.","title":"Test Runner sample app"},{"location":"test_runner/SampleApp/#run","text":"Setup kubernetes context contextName in ~/.kube/config . To run tests use: make test_runner_instrumentation kubernetesContext=<contextName> Most likely you want to enable verbose logging","title":"Run"},{"location":"test_runner/SampleApp/#clean-up","text":"If test run stuck, resources in k8s should be freed automatically by cron script (set up in Avito). For manual cleaning use kubectl delete deployment -l type=local-<$USER>","title":"Clean up"},{"location":"test_runner/TestRunner/","text":"Avito test runner # This is the Gradle plugin to run Android instrumentation tests. It can do the following: Filter tests by annotations, by packages, by previous runs. Run tests in parallel. It orchestrates emulators in Kubernetes or uses local emulators. Rerun failed tests to deal with flakiness Save tests result in a report. It uses an internal TMS (test management system). We are working on support other formats. Getting started # Apply the instrumentation-tests Gradle plugin: Kotlin Add to your build.gradle.kts plugins { id ( \"com.android.application\" ) id ( \"com.avito.android.instrumentation-tests\" ) } Groovy Add to your build.gradle plugins { id ( \"com.android.application\" ) id ( \"com.avito.android.instrumentation-tests\" ) } Add common plugin configuration Kotlin import com.avito.instrumentation.reservation.request.Device.LocalEmulator extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { testReport { // optional avito reporting reportViewer { reportApiUrl = \"http://stub\" reportViewerUrl = \"http://stub\" fileStorageUrl = \"http://stub\" } } configurationsContainer . register ( \"local\" ) { targetsContainer . register ( \"api28\" ) { deviceName = \"API28\" scheduling = SchedulingConfiguration (). apply { quota = QuotaConfiguration (). apply { retryCount = 1 minimumSuccessCount = 1 } reservation = TestsBasedDevicesReservationConfiguration (). apply { device = LocalEmulator . device ( 28 , \"Android_SDK_built_for_x86_64\" ) maximum = 1 minimum = 1 testsPerEmulator = 1 } } } } } Groovy import com.avito.instrumentation.reservation.request.Device.LocalEmulator instrumentation { testReport { // optional avito reporting reportViewer { reportApiUrl = \"http://stub\" reportViewerUrl = \"http://stub\" fileStorageUrl = \"http://stub\" } } configurations { local { targets { api28 { deviceName = \"API28\" scheduling { quota { retryCount = 1 minimumSuccessCount = 1 } testsCountBasedReservation { device = new LocalEmulator ( \"28\" , 28 , \"Android_SDK_built_for_x86_64\" ) maximum = 1 testsPerEmulator = 1 } } } } } } } Run tests via Gradle task ./gradlew :<projectPath>:instrumentation<ConfigurationName> In our case: ./gradlew :<projectPath>:instrumentationLocal Examples # Check out a configuration to run in GradleInstrumentationPluginConfiguration in the test app Filtering tests for execution # You must apply a plugin Create filter Kotlin extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { filters . register ( \"filterName\" ) { fromSource . includeByAnnotations ( annotations ) fromSource . excludeByAnnotations ( annotations ) fromSource . includeByPrefixes ( prefixes ) fromSource . excludeByPrefixes ( prefixes ) // it is internal for Avito. It uses run history from our test-report system. fromRunHistory . excludePreviousStatuses ( statuses ) fromRunHistory . excludePreviousStatuses ( statuses ) fromRunHistory . report ( \"reportId\" ) { reportStatuses -> reportStatuses . include ( statuses ) reportStatuses . exclude ( statuses ) } } } Groovy import com.avito.instrumentation.reservation.request.Device.LocalEmulator instrumentation { filters { filterName { fromSource . includeByAnnotations ( annotations ) fromSource . excludeByAnnotations ( annotations ) fromSource . includeByPrefixes ( prefixes ) fromSource . excludeByPrefixes ( prefixes ) // it is internal for Avito. It uses run history from our test-report system. fromRunHistory . excludePreviousStatuses ( statuses ) fromRunHistory . excludePreviousStatuses ( statuses ) fromRunHistory . report ( \"reportId\" ) { reportStatuses -> reportStatuses . include ( statuses ) reportStatuses . exclude ( statuses ) } } } } Add filter to configuration Kotlin extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { configurationsContainer . register ( \"local\" ) { filter = \"filterName\" // else... } } Groovy instrumentation { configurations { local { filter = filterName // else... } } } Filter tests by annotations # Kotlin extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { filters . register ( \"filterName\" ) { val yourFullyQualifiedAnnotationName = \"package.AnnotationClassName\" val annotations = setOf ( youFullyQualifiedAnnotationName ) // will include only tests with at least one annotation fromSource . includeByAnnotations ( annotations ) // will exclude all tests with at least one annotation fromSource . excludeByAnnotations ( annotations ) } } Groovy instrumentation { filters { filterName { def yourFullyQualifiedAnnotationName = \"package.AnnotationClassName\" def annotations = [ youFullyQualifiedAnnotationName ] as Set // will include only tests with at least one annotation fromSource . includeByAnnotations ( annotations ) // will exclude all tests with at least one annotation fromSource . excludeByAnnotations ( annotations ) } } } Filter flaky tests # Kotlin extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { filters . register ( \"filterName\" ) { fromSource . excludeFlaky = true } } Groovy instrumentation { filters { filterName { fromSource . excludeFlaky = true } } } Filter tests by prefix or name # Kotlin extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { filters . register ( \"filterName\" ) { val packageTestFilter = \"testPackage\" val classTestFilter = \"testPackage.testClass\" val fullyQualifiedTestFilter = \"testPackage.testClass.testMetod\" val prefixes = setOf ( packageTestFilter , classTestFilter , fullyQualifiedTestFilter ) // will include only tests from package, class and concrete test fromSource . includeByPrefixes ( prefixes ) // will exclude all tests from package, class and concrete test fromSource . excludeByPrefixes ( prefixes ) } } Groovy instrumentation { filters { filterName { def packageTestFilter = \"testPackage\" def classTestFilter = \"testPackage.testClass\" def fullyQualifiedTestFilter = \"testPackage.testClass.testMetod\" def prefixes = [ packageTestFilter , classTestFilter , fullyQualifiedTestFilter ] as Set // will include only tests from package, class and concrete test fromSource . includeByPrefixes ( prefixes ) // will exclude all tests from package, class and concrete test fromSource . excludeByPrefixes ( prefixes ) } } } Filter tests by statuses from previous run on the same commit # Kotlin import com.avito.instrumentation.configuration.InstrumentationFilter.FromRunHistory.RunStatus extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { filters . register ( \"filterName\" ) { val statuses = setOf ( RunStatus . Success ) // will run only Success previously Succeed tests fromRunHistory . includePreviousStatuses ( statuses ) // will run all tests except previously Succeed fromRunHistory . excludePreviousStatuses ( statuses ) } } Groovy import com.avito.instrumentation.configuration.InstrumentationFilter.FromRunHistory.RunStatus instrumentation { filters { filterName { def statuses = [ RunStatus . Success ] as Set // will run only Success previously Succeed tests fromRunHistory . includePreviousStatuses ( statuses ) // will run all tests except previously Succeed fromRunHistory . excludePreviousStatuses ( statuses ) } } } Filter tests by statuses from report by id # Kotlin import com.avito.instrumentation.configuration.InstrumentationFilter.FromRunHistory.RunStatus extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { filters . register ( \"filterName\" ) { // report-viewer report id val reportId = \"id\" val statuses = setOf ( RunStatus . Failed ) fromRunHistory . report ( reportId ) { reportStatuses -> // will run only Failed tests from report reportStatuses . include ( statuses ) // will run all tests except Failed tests from report reportStatuses . exclude ( statuses ) } } } Groovy import com.avito.instrumentation.configuration.InstrumentationFilter.FromRunHistory.RunStatus instrumentation { filters { filterName { // report-viewer report id def reportId = \"id\" def statuses = [ RunStatus . Failed ] as Set fromRunHistory . report ( reportId ) { reportStatuses -> // will run only Failed tests from report reportStatuses . include ( statuses ) // will run all tests except Failed tests from report reportStatuses . exclude ( statuses ) } } } } Apply a filter without changing build.gradle.kts or build.gradle # Add custom Gradle property for filter name to gradle.properties file filterName = \"default\" Use the property to configure plugin Kotlin import com.avito.kotlin.dsl.getOptionalStringProperty // read property val filterName : String? by project // or val filterName = project . getOptionalStringProperty ( \"filterName\" , \"default\" ) extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { configurationsContainer . register ( \"local\" ) { filter = filterName // else... } } Groovy import static com . avito . kotlin . dsl . ProjectExtensionsKt . getOptionalStringProperty // read property def filterName = project . hasProperty ( \"filterName\" ) ? project [ \"filterName\" ] : \"default\" // or def filterName = getOptionalStringProperty ( project , \"filterName\" , \"default\" ) instrumentation { configurations { local { filter = filterName } } } Add property to CLI command if you want to override filterName ./gradlew instrumentationLocal -PfilterName = <any name of defined filter> Customize a filter without changing build.gradle.kts or build.gradle # You can customize everything by adding custom properties to CLI command e.g. Define filter including tests by annotation Add logic to check presence of Gradle property. Kotlin val includedAnnotation : String? by project // or val includedAnnotation = project . getOptionalStringProperty ( \"includedAnnotation\" ) extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { filters . register ( \"filterName\" ) { val annotation = if ( includedAnnotation != null ){ includedAnnotation } else { \"package.AnnotationClassName\" } val annotations = setOf ( annotation ) fromSource . includeByAnnotations ( annotations ) } } Groovy import static com . avito . kotlin . dsl . ProjectExtensionsKt . getOptionalStringProperty // read property def includedAnnotation = project . hasProperty ( \"includedAnnotation\" ) ? project [ \"includedAnnotation\" ] : null // or def includedAnnotation = getOptionalStringProperty ( project , \"includedAnnotation\" ) instrumentation { filters { filterName { def annotation = includedAnnotation ?: \"package.AnnotationClassName\" def annotations = [ annotation ] as Set fromSource . includeByAnnotations ( annotations ) } } } Run Gradle task with property includedAnnotation to override filter ./gradlew instrumentationLocal -PincludedAnnotation = \"package.AnotherAnnotationClassName\" Find out how filters were applied # If build finishes successfully It will produce files with debug information Files will be located at: <Project root folder>/outputs/<subproject name>/instrumentation/<instrumentation task name>/filter Find out what filter config was # Look at file filter-config.json Find out what filters applied # Look at file filters-applied.json Find out what tests were filtered # Look at file filters-excludes.json - You may find filtered tests grouped by filter names declared in filters-applied.json - You may find a filtered test by name Choosing target for tests execution # Run tests on kubernetes target from a local machine # Disclaimer The text below contains Avito specific details Get access to kubernetes cloud: internal doc Request exec access to android-emulator namespace in beta cluster Setup a context on beta , android-emulator with your user access. More about kubernetes context: Official docs Add a configuration with target on kubernetes Kotlin import com.avito.instrumentation.reservation.request.Device.Emulator.Emulator28 configurationsContainer . register ( \"k8s\" ) { targetsContainer . register ( \"api28\" ) { deviceName = \"API28\" scheduling = SchedulingConfiguration (). apply { quota = QuotaConfiguration (). apply { retryCount = 1 minimumSuccessCount = 1 } reservation = TestsBasedDevicesReservationConfiguration (). apply { device = Emulator28 maximum = 1 minimum = 1 testsPerEmulator = 1 } } } } Groovy import static com . avito . instrumentation . reservation . request . Device . Emulator . Emulator28 instrumentation { configurations { k8s { targets { api28 { deviceName = \"API28\" scheduling { quota { retryCount = 1 minimumSuccessCount = 1 } testsCountBasedReservation { device = Emulator28 . INSTANCE maximum = 1 minimum = 1 testsPerEmulator = 1 } } } } } } } Run tests with extra parameters specified. ./gradlew :samples:test-app:instrumentation<configuration name> -PkubernetesContext = <your context> // for Avito probably 'beta' We will looking for .kube/config in your $HOME Run tests on local emulator target # Add a configuration with target on local emulator Kotlin import com.avito.instrumentation.reservation.request.Device.LocalEmulator extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { configurationsContainer . register ( \"local\" ) { targetsContainer . register ( \"api28\" ) { deviceName = \"API28\" scheduling = SchedulingConfiguration (). apply { quota = QuotaConfiguration (). apply { retryCount = 1 minimumSuccessCount = 1 } reservation = TestsBasedDevicesReservationConfiguration (). apply { device = LocalEmulator . device ( 28 , \"Android_SDK_built_for_x86_64\" ) maximum = 1 testsPerEmulator = 1 } } } } } Groovy import com.avito.instrumentation.reservation.request.Device.LocalEmulator instrumentation { configurations { local { targets { api28 { deviceName = \"API28\" scheduling { quota { retryCount = 1 minimumSuccessCount = 1 } testsCountBasedReservation { device = new LocalEmulator ( \"28\" , 28 , \"Android_SDK_built_for_x86_64\" ) maximum = 1 testsPerEmulator = 1 } } } } } } } Run an emulator with 28 API Run Gradle CLI command ` ./gradlew :<project gradle path>:instrumentation<configuration name> ` , e.g. ` ./gradlew :samples:test-app:instrumentationLocal ` Run test on APK was built before # Plugin builds APKs on his own by default. If for any reason you have to build APK externally, you can pass files manually: // optional applicationApk = \"/path/to/app.apk\" // optional testApplicationApk = \"/path/to/test-app-debug-androidTest.apk\" Run tests on Google Cloud Platform # Work in progress Create and configure Kubernetes cluster TODO Create a node pool. Node must contain CPU that supports KVM https://cloud.google.com/compute/docs/instances/enable-nested-virtualization-vm-instances#gcloud Add configuration for your cluster to ./kube/config Providing credentials to the application https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application TODO Run on local machine TODO Run locally gcloud auth application-default login one time will be enough Run ./gradlew <instrumentationTaskName> -PkubernetesContext=<context from ./kube/config> Run on CI Customize deployment TODO Custom POD image Customize POD cpu and ram Custom namespace","title":"Avito test runner"},{"location":"test_runner/TestRunner/#avito-test-runner","text":"This is the Gradle plugin to run Android instrumentation tests. It can do the following: Filter tests by annotations, by packages, by previous runs. Run tests in parallel. It orchestrates emulators in Kubernetes or uses local emulators. Rerun failed tests to deal with flakiness Save tests result in a report. It uses an internal TMS (test management system). We are working on support other formats.","title":"Avito test runner"},{"location":"test_runner/TestRunner/#getting-started","text":"Apply the instrumentation-tests Gradle plugin: Kotlin Add to your build.gradle.kts plugins { id ( \"com.android.application\" ) id ( \"com.avito.android.instrumentation-tests\" ) } Groovy Add to your build.gradle plugins { id ( \"com.android.application\" ) id ( \"com.avito.android.instrumentation-tests\" ) } Add common plugin configuration Kotlin import com.avito.instrumentation.reservation.request.Device.LocalEmulator extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { testReport { // optional avito reporting reportViewer { reportApiUrl = \"http://stub\" reportViewerUrl = \"http://stub\" fileStorageUrl = \"http://stub\" } } configurationsContainer . register ( \"local\" ) { targetsContainer . register ( \"api28\" ) { deviceName = \"API28\" scheduling = SchedulingConfiguration (). apply { quota = QuotaConfiguration (). apply { retryCount = 1 minimumSuccessCount = 1 } reservation = TestsBasedDevicesReservationConfiguration (). apply { device = LocalEmulator . device ( 28 , \"Android_SDK_built_for_x86_64\" ) maximum = 1 minimum = 1 testsPerEmulator = 1 } } } } } Groovy import com.avito.instrumentation.reservation.request.Device.LocalEmulator instrumentation { testReport { // optional avito reporting reportViewer { reportApiUrl = \"http://stub\" reportViewerUrl = \"http://stub\" fileStorageUrl = \"http://stub\" } } configurations { local { targets { api28 { deviceName = \"API28\" scheduling { quota { retryCount = 1 minimumSuccessCount = 1 } testsCountBasedReservation { device = new LocalEmulator ( \"28\" , 28 , \"Android_SDK_built_for_x86_64\" ) maximum = 1 testsPerEmulator = 1 } } } } } } } Run tests via Gradle task ./gradlew :<projectPath>:instrumentation<ConfigurationName> In our case: ./gradlew :<projectPath>:instrumentationLocal","title":"Getting started"},{"location":"test_runner/TestRunner/#examples","text":"Check out a configuration to run in GradleInstrumentationPluginConfiguration in the test app","title":"Examples"},{"location":"test_runner/TestRunner/#filtering-tests-for-execution","text":"You must apply a plugin Create filter Kotlin extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { filters . register ( \"filterName\" ) { fromSource . includeByAnnotations ( annotations ) fromSource . excludeByAnnotations ( annotations ) fromSource . includeByPrefixes ( prefixes ) fromSource . excludeByPrefixes ( prefixes ) // it is internal for Avito. It uses run history from our test-report system. fromRunHistory . excludePreviousStatuses ( statuses ) fromRunHistory . excludePreviousStatuses ( statuses ) fromRunHistory . report ( \"reportId\" ) { reportStatuses -> reportStatuses . include ( statuses ) reportStatuses . exclude ( statuses ) } } } Groovy import com.avito.instrumentation.reservation.request.Device.LocalEmulator instrumentation { filters { filterName { fromSource . includeByAnnotations ( annotations ) fromSource . excludeByAnnotations ( annotations ) fromSource . includeByPrefixes ( prefixes ) fromSource . excludeByPrefixes ( prefixes ) // it is internal for Avito. It uses run history from our test-report system. fromRunHistory . excludePreviousStatuses ( statuses ) fromRunHistory . excludePreviousStatuses ( statuses ) fromRunHistory . report ( \"reportId\" ) { reportStatuses -> reportStatuses . include ( statuses ) reportStatuses . exclude ( statuses ) } } } } Add filter to configuration Kotlin extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { configurationsContainer . register ( \"local\" ) { filter = \"filterName\" // else... } } Groovy instrumentation { configurations { local { filter = filterName // else... } } }","title":"Filtering tests for execution"},{"location":"test_runner/TestRunner/#filter-tests-by-annotations","text":"Kotlin extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { filters . register ( \"filterName\" ) { val yourFullyQualifiedAnnotationName = \"package.AnnotationClassName\" val annotations = setOf ( youFullyQualifiedAnnotationName ) // will include only tests with at least one annotation fromSource . includeByAnnotations ( annotations ) // will exclude all tests with at least one annotation fromSource . excludeByAnnotations ( annotations ) } } Groovy instrumentation { filters { filterName { def yourFullyQualifiedAnnotationName = \"package.AnnotationClassName\" def annotations = [ youFullyQualifiedAnnotationName ] as Set // will include only tests with at least one annotation fromSource . includeByAnnotations ( annotations ) // will exclude all tests with at least one annotation fromSource . excludeByAnnotations ( annotations ) } } }","title":"Filter tests by annotations"},{"location":"test_runner/TestRunner/#filter-flaky-tests","text":"Kotlin extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { filters . register ( \"filterName\" ) { fromSource . excludeFlaky = true } } Groovy instrumentation { filters { filterName { fromSource . excludeFlaky = true } } }","title":"Filter flaky tests"},{"location":"test_runner/TestRunner/#filter-tests-by-prefix-or-name","text":"Kotlin extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { filters . register ( \"filterName\" ) { val packageTestFilter = \"testPackage\" val classTestFilter = \"testPackage.testClass\" val fullyQualifiedTestFilter = \"testPackage.testClass.testMetod\" val prefixes = setOf ( packageTestFilter , classTestFilter , fullyQualifiedTestFilter ) // will include only tests from package, class and concrete test fromSource . includeByPrefixes ( prefixes ) // will exclude all tests from package, class and concrete test fromSource . excludeByPrefixes ( prefixes ) } } Groovy instrumentation { filters { filterName { def packageTestFilter = \"testPackage\" def classTestFilter = \"testPackage.testClass\" def fullyQualifiedTestFilter = \"testPackage.testClass.testMetod\" def prefixes = [ packageTestFilter , classTestFilter , fullyQualifiedTestFilter ] as Set // will include only tests from package, class and concrete test fromSource . includeByPrefixes ( prefixes ) // will exclude all tests from package, class and concrete test fromSource . excludeByPrefixes ( prefixes ) } } }","title":"Filter tests by prefix or name"},{"location":"test_runner/TestRunner/#filter-tests-by-statuses-from-previous-run-on-the-same-commit","text":"Kotlin import com.avito.instrumentation.configuration.InstrumentationFilter.FromRunHistory.RunStatus extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { filters . register ( \"filterName\" ) { val statuses = setOf ( RunStatus . Success ) // will run only Success previously Succeed tests fromRunHistory . includePreviousStatuses ( statuses ) // will run all tests except previously Succeed fromRunHistory . excludePreviousStatuses ( statuses ) } } Groovy import com.avito.instrumentation.configuration.InstrumentationFilter.FromRunHistory.RunStatus instrumentation { filters { filterName { def statuses = [ RunStatus . Success ] as Set // will run only Success previously Succeed tests fromRunHistory . includePreviousStatuses ( statuses ) // will run all tests except previously Succeed fromRunHistory . excludePreviousStatuses ( statuses ) } } }","title":"Filter tests by statuses from previous run on the same commit"},{"location":"test_runner/TestRunner/#filter-tests-by-statuses-from-report-by-id","text":"Kotlin import com.avito.instrumentation.configuration.InstrumentationFilter.FromRunHistory.RunStatus extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { filters . register ( \"filterName\" ) { // report-viewer report id val reportId = \"id\" val statuses = setOf ( RunStatus . Failed ) fromRunHistory . report ( reportId ) { reportStatuses -> // will run only Failed tests from report reportStatuses . include ( statuses ) // will run all tests except Failed tests from report reportStatuses . exclude ( statuses ) } } } Groovy import com.avito.instrumentation.configuration.InstrumentationFilter.FromRunHistory.RunStatus instrumentation { filters { filterName { // report-viewer report id def reportId = \"id\" def statuses = [ RunStatus . Failed ] as Set fromRunHistory . report ( reportId ) { reportStatuses -> // will run only Failed tests from report reportStatuses . include ( statuses ) // will run all tests except Failed tests from report reportStatuses . exclude ( statuses ) } } } }","title":"Filter tests by statuses from report by id"},{"location":"test_runner/TestRunner/#apply-a-filter-without-changing-buildgradlekts-or-buildgradle","text":"Add custom Gradle property for filter name to gradle.properties file filterName = \"default\" Use the property to configure plugin Kotlin import com.avito.kotlin.dsl.getOptionalStringProperty // read property val filterName : String? by project // or val filterName = project . getOptionalStringProperty ( \"filterName\" , \"default\" ) extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { configurationsContainer . register ( \"local\" ) { filter = filterName // else... } } Groovy import static com . avito . kotlin . dsl . ProjectExtensionsKt . getOptionalStringProperty // read property def filterName = project . hasProperty ( \"filterName\" ) ? project [ \"filterName\" ] : \"default\" // or def filterName = getOptionalStringProperty ( project , \"filterName\" , \"default\" ) instrumentation { configurations { local { filter = filterName } } } Add property to CLI command if you want to override filterName ./gradlew instrumentationLocal -PfilterName = <any name of defined filter>","title":"Apply a filter without changing build.gradle.kts or build.gradle"},{"location":"test_runner/TestRunner/#customize-a-filter-without-changing-buildgradlekts-or-buildgradle","text":"You can customize everything by adding custom properties to CLI command e.g. Define filter including tests by annotation Add logic to check presence of Gradle property. Kotlin val includedAnnotation : String? by project // or val includedAnnotation = project . getOptionalStringProperty ( \"includedAnnotation\" ) extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { filters . register ( \"filterName\" ) { val annotation = if ( includedAnnotation != null ){ includedAnnotation } else { \"package.AnnotationClassName\" } val annotations = setOf ( annotation ) fromSource . includeByAnnotations ( annotations ) } } Groovy import static com . avito . kotlin . dsl . ProjectExtensionsKt . getOptionalStringProperty // read property def includedAnnotation = project . hasProperty ( \"includedAnnotation\" ) ? project [ \"includedAnnotation\" ] : null // or def includedAnnotation = getOptionalStringProperty ( project , \"includedAnnotation\" ) instrumentation { filters { filterName { def annotation = includedAnnotation ?: \"package.AnnotationClassName\" def annotations = [ annotation ] as Set fromSource . includeByAnnotations ( annotations ) } } } Run Gradle task with property includedAnnotation to override filter ./gradlew instrumentationLocal -PincludedAnnotation = \"package.AnotherAnnotationClassName\"","title":"Customize a filter without changing build.gradle.kts or build.gradle"},{"location":"test_runner/TestRunner/#find-out-how-filters-were-applied","text":"If build finishes successfully It will produce files with debug information Files will be located at: <Project root folder>/outputs/<subproject name>/instrumentation/<instrumentation task name>/filter","title":"Find out how filters were applied"},{"location":"test_runner/TestRunner/#find-out-what-filter-config-was","text":"Look at file filter-config.json","title":"Find out what filter config was"},{"location":"test_runner/TestRunner/#find-out-what-filters-applied","text":"Look at file filters-applied.json","title":"Find out what filters applied"},{"location":"test_runner/TestRunner/#find-out-what-tests-were-filtered","text":"Look at file filters-excludes.json - You may find filtered tests grouped by filter names declared in filters-applied.json - You may find a filtered test by name","title":"Find out what tests were filtered"},{"location":"test_runner/TestRunner/#choosing-target-for-tests-execution","text":"","title":"Choosing target for tests execution"},{"location":"test_runner/TestRunner/#run-tests-on-kubernetes-target-from-a-local-machine","text":"Disclaimer The text below contains Avito specific details Get access to kubernetes cloud: internal doc Request exec access to android-emulator namespace in beta cluster Setup a context on beta , android-emulator with your user access. More about kubernetes context: Official docs Add a configuration with target on kubernetes Kotlin import com.avito.instrumentation.reservation.request.Device.Emulator.Emulator28 configurationsContainer . register ( \"k8s\" ) { targetsContainer . register ( \"api28\" ) { deviceName = \"API28\" scheduling = SchedulingConfiguration (). apply { quota = QuotaConfiguration (). apply { retryCount = 1 minimumSuccessCount = 1 } reservation = TestsBasedDevicesReservationConfiguration (). apply { device = Emulator28 maximum = 1 minimum = 1 testsPerEmulator = 1 } } } } Groovy import static com . avito . instrumentation . reservation . request . Device . Emulator . Emulator28 instrumentation { configurations { k8s { targets { api28 { deviceName = \"API28\" scheduling { quota { retryCount = 1 minimumSuccessCount = 1 } testsCountBasedReservation { device = Emulator28 . INSTANCE maximum = 1 minimum = 1 testsPerEmulator = 1 } } } } } } } Run tests with extra parameters specified. ./gradlew :samples:test-app:instrumentation<configuration name> -PkubernetesContext = <your context> // for Avito probably 'beta' We will looking for .kube/config in your $HOME","title":"Run tests on kubernetes target from a local machine"},{"location":"test_runner/TestRunner/#run-tests-on-local-emulator-target","text":"Add a configuration with target on local emulator Kotlin import com.avito.instrumentation.reservation.request.Device.LocalEmulator extensions . getByType < GradleInstrumentationPluginConfiguration > (). apply { configurationsContainer . register ( \"local\" ) { targetsContainer . register ( \"api28\" ) { deviceName = \"API28\" scheduling = SchedulingConfiguration (). apply { quota = QuotaConfiguration (). apply { retryCount = 1 minimumSuccessCount = 1 } reservation = TestsBasedDevicesReservationConfiguration (). apply { device = LocalEmulator . device ( 28 , \"Android_SDK_built_for_x86_64\" ) maximum = 1 testsPerEmulator = 1 } } } } } Groovy import com.avito.instrumentation.reservation.request.Device.LocalEmulator instrumentation { configurations { local { targets { api28 { deviceName = \"API28\" scheduling { quota { retryCount = 1 minimumSuccessCount = 1 } testsCountBasedReservation { device = new LocalEmulator ( \"28\" , 28 , \"Android_SDK_built_for_x86_64\" ) maximum = 1 testsPerEmulator = 1 } } } } } } } Run an emulator with 28 API Run Gradle CLI command ` ./gradlew :<project gradle path>:instrumentation<configuration name> ` , e.g. ` ./gradlew :samples:test-app:instrumentationLocal `","title":"Run tests on local emulator target"},{"location":"test_runner/TestRunner/#run-test-on-apk-was-built-before","text":"Plugin builds APKs on his own by default. If for any reason you have to build APK externally, you can pass files manually: // optional applicationApk = \"/path/to/app.apk\" // optional testApplicationApk = \"/path/to/test-app-debug-androidTest.apk\"","title":"Run test on APK was built before"},{"location":"test_runner/TestRunner/#run-tests-on-google-cloud-platform","text":"Work in progress Create and configure Kubernetes cluster TODO Create a node pool. Node must contain CPU that supports KVM https://cloud.google.com/compute/docs/instances/enable-nested-virtualization-vm-instances#gcloud Add configuration for your cluster to ./kube/config Providing credentials to the application https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application TODO Run on local machine TODO Run locally gcloud auth application-default login one time will be enough Run ./gradlew <instrumentationTaskName> -PkubernetesContext=<context from ./kube/config> Run on CI Customize deployment TODO Custom POD image Customize POD cpu and ram Custom namespace","title":"Run tests on Google Cloud Platform"}]}